
spi_encoder_bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af0  080157a0  080157a0  000167a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016290  08016290  000184a0  2**0
                  CONTENTS
  4 .ARM          00000008  08016290  08016290  00017290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016298  08016298  000184a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016298  08016298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801629c  0801629c  0001729c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a0  20000000  080162a0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  200004a0  08016740  000184a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08016740  00018ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000184a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029443  00000000  00000000  000184d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057b5  00000000  00000000  00041913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  000470c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000144e  00000000  00000000  00048a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c5e  00000000  00000000  00049e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025062  00000000  00000000  00072afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec55e  00000000  00000000  00097b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001840bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fc8  00000000  00000000  00184100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0018c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004a0 	.word	0x200004a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015788 	.word	0x08015788

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a4 	.word	0x200004a4
 800020c:	08015788 	.word	0x08015788

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	2304      	movs	r3, #4
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <OD_getIndex+0x14>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	e000      	b.n	8001028 <OD_getIndex+0x16>
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <OD_extension_init+0x14>
 8001044:	2305      	movs	r3, #5
 8001046:	e003      	b.n	8001050 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af02      	add	r7, sp, #8
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	460b      	mov	r3, r1
 800106a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800106c:	7af9      	ldrb	r1, [r7, #11]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2304      	movs	r3, #4
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f001 fb56 	bl	8002728 <OD_get_value>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00c      	beq.n	80010b4 <OD_read_1014_default+0x2e>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	7c5b      	ldrb	r3, [r3, #17]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d108      	bne.n	80010b4 <OD_read_1014_default+0x2e>
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d902      	bls.n	80010b4 <OD_read_1014_default+0x2e>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80010b4:	2309      	movs	r3, #9
 80010b6:	e01b      	b.n	80010f0 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <OD_read_1014_default+0x44>
 80010c6:	2300      	movs	r3, #0
 80010c8:	e001      	b.n	80010ce <OD_read_1014_default+0x48>
 80010ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80010ce:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80010d6:	3380      	adds	r3, #128	@ 0x80
 80010d8:	461a      	mov	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80010e0:	6939      	ldr	r1, [r7, #16]
 80010e2:	68b8      	ldr	r0, [r7, #8]
 80010e4:	f7ff ff86 	bl	8000ff4 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2204      	movs	r2, #4
 80010ec:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00f      	beq.n	800112c <OD_read_1003+0x34>
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <OD_read_1003+0x34>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d009      	beq.n	800112c <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b03      	cmp	r3, #3
 800111c:	d803      	bhi.n	8001126 <OD_read_1003+0x2e>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	7c5b      	ldrb	r3, [r3, #17]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <OD_read_1003+0x34>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 800112c:	2309      	movs	r3, #9
 800112e:	e04c      	b.n	80011ca <OD_read_1003+0xd2>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	7f1b      	ldrb	r3, [r3, #28]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d801      	bhi.n	8001142 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 800113e:	2309      	movs	r3, #9
 8001140:	e043      	b.n	80011ca <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0) {
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	7c5b      	ldrb	r3, [r3, #17]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10b      	bne.n	8001162 <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001150:	4619      	mov	r1, r3
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f7ff ff3e 	bl	8000fd4 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e033      	b.n	80011ca <OD_read_1003+0xd2>
    }
    else if (stream->subIndex <= em->fifoCount) {
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	7c5a      	ldrb	r2, [r3, #17]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116c:	429a      	cmp	r2, r3
 800116e:	d82b      	bhi.n	80011c8 <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	7f5b      	ldrb	r3, [r3, #29]
 8001174:	461a      	mov	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	7c5b      	ldrb	r3, [r3, #17]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	b29b      	uxth	r3, r3
 800117e:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8001180:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001184:	2b00      	cmp	r3, #0
 8001186:	da07      	bge.n	8001198 <OD_read_1003+0xa0>
            index += em->fifoSize;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	7f1b      	ldrb	r3, [r3, #28]
 800118c:	461a      	mov	r2, r3
 800118e:	8afb      	ldrh	r3, [r7, #22]
 8001190:	4413      	add	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	82fb      	strh	r3, [r7, #22]
 8001196:	e007      	b.n	80011a8 <OD_read_1003+0xb0>
        }
        else if (index >= (em->fifoSize)) {
 8001198:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	7f12      	ldrb	r2, [r2, #28]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	db01      	blt.n	80011a8 <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 80011a4:	2309      	movs	r3, #9
 80011a6:	e010      	b.n	80011ca <OD_read_1003+0xd2>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f7ff ff1b 	bl	8000ff4 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2204      	movs	r2, #4
 80011c2:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <OD_read_1003+0xd2>
    }
    else {
        return ODR_NO_DATA;
 80011c8:	2319      	movs	r3, #25
    }
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00c      	beq.n	8001200 <OD_write_1003+0x2e>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	7c5b      	ldrb	r3, [r3, #17]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d108      	bne.n	8001200 <OD_write_1003+0x2e>
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <OD_write_1003+0x2e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <OD_write_1003+0x2e>
        || countWritten == NULL)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 8001200:	2309      	movs	r3, #9
 8001202:	e012      	b.n	800122a <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 8001204:	68b8      	ldr	r0, [r7, #8]
 8001206:	f7ff fed7 	bl	8000fb8 <CO_getUint8>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8001210:	230f      	movs	r3, #15
 8001212:	e00a      	b.n	800122a <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af02      	add	r7, sp, #8
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001242:	2300      	movs	r3, #0
 8001244:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d01a      	beq.n	8001282 <CO_EM_init+0x4e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d017      	beq.n	8001282 <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d103      	bne.n	8001260 <CO_EM_init+0x2c>
 8001258:	f897 3020 	ldrb.w	r3, [r7, #32]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d810      	bhi.n	8001282 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8001260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00d      	beq.n	8001282 <CO_EM_init+0x4e>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00a      	beq.n	8001282 <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 800126c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <CO_EM_init+0x4e>
 8001274:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8001278:	2b00      	cmp	r3, #0
 800127a:	db02      	blt.n	8001282 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e0a7      	b.n	80013d8 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8001288:	2250      	movs	r2, #80	@ 0x50
 800128a:	2100      	movs	r1, #0
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f011 f9f3 	bl	8012678 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8001298:	2300      	movs	r3, #0
 800129a:	2201      	movs	r2, #1
 800129c:	2100      	movs	r1, #0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f001 faa9 	bl	80027f6 <OD_getPtr>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <CO_EM_init+0x92>
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff feaa 	bl	8001012 <OD_getIndex>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c4:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80012c6:	f06f 030b 	mvn.w	r3, #11
 80012ca:	e085      	b.n	80013d8 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012e0:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80012e2:	f107 0210 	add.w	r2, r7, #16
 80012e6:	2301      	movs	r3, #1
 80012e8:	2100      	movs	r1, #0
 80012ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012ec:	f7ff feb6 	bl	800105c <OD_get_u32>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80012f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d104      	bne.n	8001306 <CO_EM_init+0xd2>
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4b38      	ldr	r3, [pc, #224]	@ (80013e0 <CO_EM_init+0x1ac>)
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8001306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <CO_EM_init+0xe6>
 800130c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800130e:	f7ff fe80 	bl	8001012 <OD_getIndex>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001318:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 800131a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 8001322:	f06f 030b 	mvn.w	r3, #11
 8001326:	e057      	b.n	80013d8 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8001328:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800132c:	b29b      	uxth	r3, r3
 800132e:	3380      	adds	r3, #128	@ 0x80
 8001330:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	0fdb      	lsrs	r3, r3, #31
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4a26      	ldr	r2, [pc, #152]	@ (80013e4 <CO_EM_init+0x1b0>)
 800134a:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4a26      	ldr	r2, [pc, #152]	@ (80013e8 <CO_EM_init+0x1b4>)
 8001350:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3330      	adds	r3, #48	@ 0x30
 8001356:	4619      	mov	r1, r3
 8001358:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800135a:	f7ff fe6b 	bl	8001034 <OD_extension_init>
 800135e:	4603      	mov	r3, r0
 8001360:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001362:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00c      	beq.n	8001384 <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800136a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <CO_EM_init+0x14a>
 8001370:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001372:	f7ff fe4e 	bl	8001012 <OD_getIndex>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800137c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800137e:	f06f 030b 	mvn.w	r3, #11
 8001382:	e029      	b.n	80013d8 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800138a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 800138e:	8aba      	ldrh	r2, [r7, #20]
 8001390:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001392:	2300      	movs	r3, #0
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	2308      	movs	r3, #8
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2300      	movs	r3, #0
 800139c:	68b8      	ldr	r0, [r7, #8]
 800139e:	f006 fd31 	bl	8007e04 <CO_CANtxBufferInit>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	62da      	str	r2, [r3, #44]	@ 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	e010      	b.n	80013d8 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <CO_EM_init+0x1b8>)
 80013c0:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <CO_EM_init+0x1bc>)
 80013c6:	649a      	str	r2, [r3, #72]	@ 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3340      	adds	r3, #64	@ 0x40
 80013cc:	4619      	mov	r1, r3
 80013ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013d0:	f7ff fe30 	bl	8001034 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80013d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	7ffff800 	.word	0x7ffff800
 80013e4:	08001087 	.word	0x08001087
 80013e8:	0800235d 	.word	0x0800235d
 80013ec:	080010f9 	.word	0x080010f9
 80013f0:	080011d3 	.word	0x080011d3

080013f4 <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	8a5b      	ldrh	r3, [r3, #18]
 8001408:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8a1b      	ldrh	r3, [r3, #16]
 800140e:	8aba      	ldrh	r2, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	f000 80a2 	beq.w	800155a <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8a1a      	ldrh	r2, [r3, #16]
 800141a:	8abb      	ldrh	r3, [r7, #20]
 800141c:	4053      	eors	r3, r2
 800141e:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8aba      	ldrh	r2, [r7, #20]
 8001424:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 8001426:	8a7a      	ldrh	r2, [r7, #18]
 8001428:	f240 1301 	movw	r3, #257	@ 0x101
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d010      	beq.n	8001454 <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 8001432:	8aba      	ldrh	r2, [r7, #20]
 8001434:	f240 1301 	movw	r3, #257	@ 0x101
 8001438:	4013      	ands	r3, r2
            CO_error(em,
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	2300      	movs	r3, #0
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	2201      	movs	r2, #1
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 f91a 	bl	8001688 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 8001454:	8a7b      	ldrh	r3, [r7, #18]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d010      	beq.n	8001480 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 800145e:	8abb      	ldrh	r3, [r7, #20]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf14      	ite	ne
 8001468:	2301      	movne	r3, #1
 800146a:	2300      	moveq	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	2300      	movs	r3, #0
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	f248 1320 	movw	r3, #33056	@ 0x8120
 8001478:	2207      	movs	r2, #7
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f904 	bl	8001688 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8001480:	8a7b      	ldrh	r3, [r7, #18]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 800148a:	8abb      	ldrh	r3, [r7, #20]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf14      	ite	ne
 8001494:	2301      	movne	r3, #1
 8001496:	2300      	moveq	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	2300      	movs	r3, #0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	f248 1340 	movw	r3, #33088	@ 0x8140
 80014a4:	2212      	movs	r2, #18
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f8ee 	bl	8001688 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 80014ac:	8a7b      	ldrh	r3, [r7, #18]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d010      	beq.n	80014d8 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 80014b6:	8abb      	ldrh	r3, [r7, #20]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	2300      	movs	r3, #0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	f248 1310 	movw	r3, #33040	@ 0x8110
 80014d0:	2214      	movs	r2, #20
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f8d8 	bl	8001688 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 80014d8:	8a7b      	ldrh	r3, [r7, #18]
 80014da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 80014e2:	8abb      	ldrh	r3, [r7, #20]
 80014e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80014fc:	2215      	movs	r2, #21
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f8c2 	bl	8001688 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8001504:	8a7b      	ldrh	r3, [r7, #18]
 8001506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800150a:	2b00      	cmp	r3, #0
 800150c:	d010      	beq.n	8001530 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 800150e:	8abb      	ldrh	r3, [r7, #20]
 8001510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf14      	ite	ne
 8001518:	2301      	movne	r3, #1
 800151a:	2300      	moveq	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4619      	mov	r1, r3
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	f248 1320 	movw	r3, #33056	@ 0x8120
 8001528:	2206      	movs	r2, #6
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f8ac 	bl	8001688 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8001530:	8a7b      	ldrh	r3, [r7, #18]
 8001532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00f      	beq.n	800155a <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 800153a:	8abb      	ldrh	r3, [r7, #20]
 800153c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	2300      	movs	r3, #0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2313      	movs	r3, #19
 8001552:	2213      	movs	r2, #19
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f897 	bl	8001688 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	795b      	ldrb	r3, [r3, #5]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	789b      	ldrb	r3, [r3, #2]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <CO_EM_process+0x18a>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	78db      	ldrb	r3, [r3, #3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	7a1b      	ldrb	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <CO_EM_process+0x1a2>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	7a5b      	ldrb	r3, [r3, #9]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800159c:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	7dfa      	ldrb	r2, [r7, #23]
 80015a4:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d067      	beq.n	800167c <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	7f1b      	ldrb	r3, [r3, #28]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d965      	bls.n	8001680 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	7f9b      	ldrb	r3, [r3, #30]
 80015b8:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	7f5b      	ldrb	r3, [r3, #29]
 80015be:	7c7a      	ldrb	r2, [r7, #17]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d05d      	beq.n	8001680 <CO_EM_process+0x28c>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d158      	bne.n	8001680 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	7c7b      	ldrb	r3, [r7, #17]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	041a      	lsls	r2, r3, #16
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6998      	ldr	r0, [r3, #24]
 80015e2:	7c7b      	ldrb	r3, [r7, #17]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4403      	add	r3, r0
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	1d58      	adds	r0, r3, #5
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	7c7b      	ldrb	r3, [r7, #17]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	2208      	movs	r2, #8
 80015fe:	4619      	mov	r1, r3
 8001600:	f011 f8c9 	bl	8012796 <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f006 fc72 	bl	8007ef8 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8001614:	7c7b      	ldrb	r3, [r7, #17]
 8001616:	3301      	adds	r3, #1
 8001618:	747b      	strb	r3, [r7, #17]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	7f1b      	ldrb	r3, [r3, #28]
 800161e:	7c7a      	ldrb	r2, [r7, #17]
 8001620:	429a      	cmp	r2, r3
 8001622:	d201      	bcs.n	8001628 <CO_EM_process+0x234>
 8001624:	7c7a      	ldrb	r2, [r7, #17]
 8001626:	e000      	b.n	800162a <CO_EM_process+0x236>
 8001628:	2200      	movs	r2, #0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	7fdb      	ldrb	r3, [r3, #31]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10c      	bne.n	8001650 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2202      	movs	r2, #2
 800163a:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 800163c:	2300      	movs	r3, #0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001644:	2220      	movs	r2, #32
 8001646:	2101      	movs	r1, #1
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f81d 	bl	8001688 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 800164e:	e017      	b.n	8001680 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	7fdb      	ldrb	r3, [r3, #31]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d113      	bne.n	8001680 <CO_EM_process+0x28c>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	7f9a      	ldrb	r2, [r3, #30]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	7f5b      	ldrb	r3, [r3, #29]
 8001660:	429a      	cmp	r2, r3
 8001662:	d10d      	bne.n	8001680 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 800166a:	2300      	movs	r3, #0
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	2220      	movs	r2, #32
 8001672:	2100      	movs	r1, #0
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 f807 	bl	8001688 <CO_error>
    return;
 800167a:	e001      	b.n	8001680 <CO_EM_process+0x28c>
        return;
 800167c:	bf00      	nop
 800167e:	e000      	b.n	8001682 <CO_EM_process+0x28e>
    return;
 8001680:	bf00      	nop
}
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8001688:	b480      	push	{r7}
 800168a:	b08d      	sub	sp, #52	@ 0x34
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	4611      	mov	r1, r2
 8001694:	461a      	mov	r2, r3
 8001696:	460b      	mov	r3, r1
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	4613      	mov	r3, r2
 800169c:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80a6 	beq.w	80017f2 <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	08db      	lsrs	r3, r3, #3
 80016aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	2201      	movs	r2, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 80016be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016c2:	2b09      	cmp	r3, #9
 80016c4:	d90a      	bls.n	80016dc <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 80016c6:	2305      	movs	r3, #5
 80016c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 80016cc:	2301      	movs	r3, #1
 80016ce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 80016d2:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 80016d6:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 80016dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 80016e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80016ee:	4013      	ands	r3, r2
 80016f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 80016fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <CO_error+0x88>
            return;
 8001702:	e079      	b.n	80017f8 <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8001704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001708:	2b00      	cmp	r3, #0
 800170a:	d074      	beq.n	80017f6 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 800170c:	2300      	movs	r3, #0
 800170e:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	061a      	lsls	r2, r3, #24
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	4313      	orrs	r3, r2
 8001718:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 800171a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800171c:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001722:	f3ef 8210 	mrs	r2, PRIMASK
 8001726:	617a      	str	r2, [r7, #20]
  return(result);
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d008      	beq.n	8001748 <CO_error+0xc0>
 8001736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800173e:	4313      	orrs	r3, r2
 8001740:	b2da      	uxtb	r2, r3
 8001742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e00b      	b.n	8001760 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 8001748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25a      	sxtb	r2, r3
 800174e:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8001752:	43db      	mvns	r3, r3
 8001754:	b25b      	sxtb	r3, r3
 8001756:	4013      	ands	r3, r2
 8001758:	b25b      	sxtb	r3, r3
 800175a:	b2da      	uxtb	r2, r3
 800175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175e:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	7f1b      	ldrb	r3, [r3, #28]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d93c      	bls.n	80017e2 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	7f5b      	ldrb	r3, [r3, #29]
 800176c:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 800176e:	7efb      	ldrb	r3, [r7, #27]
 8001770:	3301      	adds	r3, #1
 8001772:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	7f1b      	ldrb	r3, [r3, #28]
 800177a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800177e:	429a      	cmp	r2, r3
 8001780:	d302      	bcc.n	8001788 <CO_error+0x100>
            fifoWrPtrNext = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	7f9b      	ldrb	r3, [r3, #30]
 800178c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001790:	429a      	cmp	r2, r3
 8001792:	d103      	bne.n	800179c <CO_error+0x114>
            em->fifoOverflow = 1;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2201      	movs	r2, #1
 8001798:	77da      	strb	r2, [r3, #31]
 800179a:	e022      	b.n	80017e2 <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	699a      	ldr	r2, [r3, #24]
 80017a0:	7efb      	ldrb	r3, [r7, #27]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	6a3a      	ldr	r2, [r7, #32]
 80017a8:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	7efb      	ldrb	r3, [r7, #27]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80017be:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	7f1b      	ldrb	r3, [r3, #28]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	429a      	cmp	r2, r3
 80017d0:	da07      	bge.n	80017e2 <CO_error+0x15a>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f383 8810 	msr	PRIMASK, r3
}
 80017f0:	e002      	b.n	80017f8 <CO_error+0x170>
    if (em == NULL) return;
 80017f2:	bf00      	nop
 80017f4:	e000      	b.n	80017f8 <CO_error+0x170>
            return;
 80017f6:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 80017f8:	3734      	adds	r7, #52	@ 0x34
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <OD_getIndex+0x14>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	e000      	b.n	8001834 <OD_getIndex+0x16>
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <OD_extension_init>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <OD_extension_init+0x14>
 8001850:	2305      	movs	r3, #5
 8001852:	e003      	b.n	800185c <OD_extension_init+0x1c>
    entry->extension = extension;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <OD_get_u32>:
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	460b      	mov	r3, r1
 8001876:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001878:	7af9      	ldrb	r1, [r7, #11]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2304      	movs	r3, #4
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 ff50 	bl	8002728 <OD_get_value>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8001892:	b480      	push	{r7}
 8001894:	b087      	sub	sp, #28
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	791b      	ldrb	r3, [r3, #4]
 80018a4:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3305      	adds	r3, #5
 80018aa:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b25a      	sxtb	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2201      	movs	r2, #1
 80018c0:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b088      	sub	sp, #32
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <OD_write_1016+0x40>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00f      	beq.n	800190e <OD_write_1016+0x40>
        || stream->subIndex < 1
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	7c5b      	ldrb	r3, [r3, #17]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	7c5a      	ldrb	r2, [r3, #17]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	7a1b      	ldrb	r3, [r3, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d805      	bhi.n	800190e <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b04      	cmp	r3, #4
 8001906:	d102      	bne.n	800190e <OD_write_1016+0x40>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 800190e:	2309      	movs	r3, #9
 8001910:	e020      	b.n	8001954 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f7ff ff75 	bl	8001802 <CO_getUint32>
 8001918:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	7c5b      	ldrb	r3, [r3, #17]
 8001928:	3b01      	subs	r3, #1
 800192a:	b2d9      	uxtb	r1, r3
 800192c:	8abb      	ldrh	r3, [r7, #20]
 800192e:	7dfa      	ldrb	r2, [r7, #23]
 8001930:	69f8      	ldr	r0, [r7, #28]
 8001932:	f000 f8bf 	bl	8001ab4 <CO_HBconsumer_initEntry>
 8001936:	4603      	mov	r3, r0
 8001938:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 800193a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8001942:	2308      	movs	r3, #8
 8001944:	e006      	b.n	8001954 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fd05 	bl	800235c <OD_writeOriginal>
 8001952:	4603      	mov	r3, r0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00b      	beq.n	8001988 <CO_HBconsumer_init+0x2c>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <CO_HBconsumer_init+0x2c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 800197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <CO_HBconsumer_init+0x2c>
 8001982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	e08a      	b.n	8001aa4 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 800198e:	2230      	movs	r2, #48	@ 0x30
 8001990:	2100      	movs	r1, #0
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f010 fe70 	bl	8012678 <memset>
    HBcons->em = em;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019a8:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80019ae:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 80019b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b2:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d304      	bcc.n	80019c4 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 80019ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019bc:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 80019be:	3b01      	subs	r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e000      	b.n	80019c6 <CO_HBconsumer_init+0x6a>
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	77fb      	strb	r3, [r7, #31]
 80019ce:	e041      	b.n	8001a54 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 80019d0:	7ffb      	ldrb	r3, [r7, #31]
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	f107 0214 	add.w	r2, r7, #20
 80019da:	2301      	movs	r3, #1
 80019dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019de:	f7ff ff43 	bl	8001868 <OD_get_u32>
 80019e2:	4603      	mov	r3, r0
 80019e4:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 80019e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00c      	beq.n	8001a08 <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 80019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <CO_HBconsumer_init+0xa6>
 80019f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019f6:	f7ff ff12 	bl	800181e <OD_getIndex>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a00:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8001a02:	f06f 030b 	mvn.w	r3, #11
 8001a06:	e04d      	b.n	8001aa4 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	0c1b      	lsrs	r3, r3, #16
 8001a0c:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8001a12:	8b7b      	ldrh	r3, [r7, #26]
 8001a14:	7f7a      	ldrb	r2, [r7, #29]
 8001a16:	7ff9      	ldrb	r1, [r7, #31]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f84b 	bl	8001ab4 <CO_HBconsumer_initEntry>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8001a22:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d011      	beq.n	8001a4e <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <CO_HBconsumer_init+0xe2>
 8001a30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a32:	f7ff fef4 	bl	800181e <OD_getIndex>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a3c:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8001a3e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a42:	f113 0f0c 	cmn.w	r3, #12
 8001a46:	d002      	beq.n	8001a4e <CO_HBconsumer_init+0xf2>
                return ret;
 8001a48:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a4c:	e02a      	b.n	8001aa4 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
 8001a50:	3301      	adds	r3, #1
 8001a52:	77fb      	strb	r3, [r7, #31]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	7a1b      	ldrb	r3, [r3, #8]
 8001a58:	7ffa      	ldrb	r2, [r7, #31]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3b8      	bcc.n	80019d0 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <CO_HBconsumer_init+0x150>)
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4a10      	ldr	r2, [pc, #64]	@ (8001ab0 <CO_HBconsumer_init+0x154>)
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3320      	adds	r3, #32
 8001a74:	4619      	mov	r1, r3
 8001a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a78:	f7ff fee2 	bl	8001840 <OD_extension_init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001a80:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00c      	beq.n	8001aa2 <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <CO_HBconsumer_init+0x140>
 8001a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a90:	f7ff fec5 	bl	800181e <OD_getIndex>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001a9c:	f06f 030b 	mvn.w	r3, #11
 8001aa0:	e000      	b.n	8001aa4 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	080022ad 	.word	0x080022ad
 8001ab0:	080018cf 	.word	0x080018cf

08001ab4 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b08d      	sub	sp, #52	@ 0x34
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	70fb      	strb	r3, [r7, #3]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70bb      	strb	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <CO_HBconsumer_initEntry+0x2e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7a1b      	ldrb	r3, [r3, #8]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d302      	bcc.n	8001ae8 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e076      	b.n	8001bd6 <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8001ae8:	883b      	ldrh	r3, [r7, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d024      	beq.n	8001b38 <CO_HBconsumer_initEntry+0x84>
 8001aee:	78bb      	ldrb	r3, [r7, #2]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d021      	beq.n	8001b38 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	77bb      	strb	r3, [r7, #30]
 8001af8:	e019      	b.n	8001b2e <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	7fbb      	ldrb	r3, [r7, #30]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f107 0408 	add.w	r4, r7, #8
 8001b08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	7fbb      	ldrb	r3, [r7, #30]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d008      	beq.n	8001b28 <CO_HBconsumer_initEntry+0x74>
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <CO_HBconsumer_initEntry+0x74>
 8001b1c:	7a3b      	ldrb	r3, [r7, #8]
 8001b1e:	78ba      	ldrb	r2, [r7, #2]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d101      	bne.n	8001b28 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8001b24:	23f4      	movs	r3, #244	@ 0xf4
 8001b26:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001b28:	7fbb      	ldrb	r3, [r7, #30]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	77bb      	strb	r3, [r7, #30]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7a1b      	ldrb	r3, [r3, #8]
 8001b32:	7fba      	ldrb	r2, [r7, #30]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3e0      	bcc.n	8001afa <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001b38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d148      	bne.n	8001bd2 <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4413      	add	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	78ba      	ldrb	r2, [r7, #2]
 8001b50:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001b52:	883b      	ldrh	r3, [r7, #0]
 8001b54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	22ff      	movs	r2, #255	@ 0xff
 8001b66:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00c      	beq.n	8001b90 <CO_HBconsumer_initEntry+0xdc>
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8001b86:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	709a      	strb	r2, [r3, #2]
 8001b8e:	e007      	b.n	8001ba0 <CO_HBconsumer_initEntry+0xec>
        }
        else {
            COB_ID = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001bba:	8bba      	ldrh	r2, [r7, #28]
 8001bbc:	4c08      	ldr	r4, [pc, #32]	@ (8001be0 <CO_HBconsumer_initEntry+0x12c>)
 8001bbe:	9402      	str	r4, [sp, #8]
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001bca:	f006 f8bd 	bl	8007d48 <CO_CANrxBufferInit>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8001bd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	@ 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	08001893 	.word	0x08001893

08001be4 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	@ 0x38
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d077      	beq.n	8001cf0 <CO_HBconsumer_process+0x10c>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d073      	beq.n	8001cf0 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001c0e:	e068      	b.n	8001ce2 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	789b      	ldrb	r3, [r3, #2]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d055      	beq.n	8001cd6 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d022      	beq.n	8001c78 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d112      	bne.n	8001c62 <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	789b      	ldrb	r3, [r3, #2]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d10a      	bne.n	8001c5a <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001c52:	221c      	movs	r2, #28
 8001c54:	2101      	movs	r1, #1
 8001c56:	f7ff fd17 	bl	8001688 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	709a      	strb	r2, [r3, #2]
 8001c60:	e007      	b.n	8001c72 <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2202      	movs	r2, #2
 8001c66:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	789b      	ldrb	r3, [r3, #2]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d11c      	bne.n	8001cba <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	441a      	add	r2, r3
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d310      	bcc.n	8001cba <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001ca6:	221b      	movs	r2, #27
 8001ca8:	2101      	movs	r1, #1
 8001caa:	f7ff fced 	bl	8001688 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	22ff      	movs	r2, #255	@ 0xff
 8001cb2:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	789b      	ldrb	r3, [r3, #2]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d001      	beq.n	8001cc6 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d003      	beq.n	8001cd8 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd4:	e000      	b.n	8001cd8 <CO_HBconsumer_process+0xf4>
                continue;
 8001cd6:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	7a1b      	ldrb	r3, [r3, #8]
 8001ce6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d390      	bcc.n	8001c10 <CO_HBconsumer_process+0x2c>
 8001cee:	e028      	b.n	8001d42 <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d103      	bne.n	8001cfe <CO_HBconsumer_process+0x11a>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d021      	beq.n	8001d42 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001cfe:	2300      	movs	r3, #0
 8001d00:	77fb      	strb	r3, [r7, #31]
 8001d02:	e015      	b.n	8001d30 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	7ffb      	ldrb	r3, [r7, #31]
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	22ff      	movs	r2, #255	@ 0xff
 8001d14:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	789b      	ldrb	r3, [r3, #2]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2201      	movs	r2, #1
 8001d28:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	7a1b      	ldrb	r3, [r3, #8]
 8001d34:	7ffa      	ldrb	r2, [r7, #31]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3e4      	bcc.n	8001d04 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d114      	bne.n	8001d74 <CO_HBconsumer_process+0x190>
 8001d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d011      	beq.n	8001d74 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	2300      	movs	r3, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	221b      	movs	r2, #27
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	f7ff fc93 	bl	8001688 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	221c      	movs	r2, #28
 8001d6e:	2100      	movs	r1, #0
 8001d70:	f7ff fc8a 	bl	8001688 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d78:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d7e:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	615a      	str	r2, [r3, #20]
}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	@ 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	81fb      	strh	r3, [r7, #14]
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <OD_getIndex+0x14>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	e000      	b.n	8001dc2 <OD_getIndex+0x16>
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <OD_extension_init>:
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <OD_extension_init+0x14>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e003      	b.n	8001dea <OD_extension_init+0x1c>
    entry->extension = extension;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <OD_get_u16>:
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af02      	add	r7, sp, #8
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	460b      	mov	r3, r1
 8001e04:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001e06:	7af9      	ldrb	r1, [r7, #11]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 fc89 	bl	8002728 <OD_get_value>
 8001e16:	4603      	mov	r3, r0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	08db      	lsrs	r3, r3, #3
 8001e30:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	2201      	movs	r2, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	d807      	bhi.n	8001e5c <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	5cd2      	ldrb	r2, [r2, r3]
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	4013      	ands	r3, r2
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <CO_isError+0x40>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <CO_isError+0x42>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <CO_getErrorRegister+0x1e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <CO_getErrorRegister+0x1e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	e000      	b.n	8001e8e <CO_getErrorRegister+0x20>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8001e9a:	b480      	push	{r7}
 8001e9c:	b087      	sub	sp, #28
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	3305      	adds	r3, #5
 8001eae:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d10a      	bne.n	8001edc <CO_NMT_receive+0x42>
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <CO_NMT_receive+0x3c>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	78db      	ldrb	r3, [r3, #3]
 8001ed0:	7bba      	ldrb	r2, [r7, #14]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d102      	bne.n	8001edc <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00c      	beq.n	8001f16 <OD_write_1017+0x2e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	7c5b      	ldrb	r3, [r3, #17]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d108      	bne.n	8001f16 <OD_write_1017+0x2e>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d102      	bne.n	8001f16 <OD_write_1017+0x2e>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8001f16:	2309      	movs	r3, #9
 8001f18:	e017      	b.n	8001f4a <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001f20:	68b8      	ldr	r0, [r7, #8]
 8001f22:	f7ff ff34 	bl	8001d8e <CO_getUint16>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fa0a 	bl	800235c <OD_writeOriginal>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af04      	add	r7, sp, #16
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00b      	beq.n	8001f84 <CO_NMT_init+0x30>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <CO_NMT_init+0x30>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <CO_NMT_init+0x30>
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	e098      	b.n	80020bc <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001f8a:	222c      	movs	r2, #44	@ 0x2c
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f010 fb72 	bl	8012678 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8c3a      	ldrh	r2, [r7, #32]
 8001faa:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001fb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001fc2:	f107 0214 	add.w	r2, r7, #20
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	2100      	movs	r1, #0
 8001fca:	68b8      	ldr	r0, [r7, #8]
 8001fcc:	f7ff ff13 	bl	8001df6 <OD_get_u16>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001fd4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00c      	beq.n	8001ff6 <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <CO_NMT_init+0x9c>
 8001fe2:	68b8      	ldr	r0, [r7, #8]
 8001fe4:	f7ff fee2 	bl	8001dac <OD_getIndex>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fee:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001ff0:	f06f 030b 	mvn.w	r3, #11
 8001ff4:	e062      	b.n	80020bc <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 8001ff6:	8abb      	ldrh	r3, [r7, #20]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffe:	fb03 f202 	mul.w	r2, r3, r2
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a2d      	ldr	r2, [pc, #180]	@ (80020c4 <CO_NMT_init+0x170>)
 8002010:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a2c      	ldr	r2, [pc, #176]	@ (80020c8 <CO_NMT_init+0x174>)
 8002016:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3310      	adds	r3, #16
 800201c:	4619      	mov	r1, r3
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f7ff fed5 	bl	8001dce <OD_extension_init>
 8002024:	4603      	mov	r3, r0
 8002026:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8002028:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00c      	beq.n	800204a <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8002030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d006      	beq.n	8002044 <CO_NMT_init+0xf0>
 8002036:	68b8      	ldr	r0, [r7, #8]
 8002038:	f7ff feb8 	bl	8001dac <OD_getIndex>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002042:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8002044:	f06f 030b 	mvn.w	r3, #11
 8002048:	e038      	b.n	80020bc <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	429a      	cmp	r2, r3
 8002054:	d903      	bls.n	800205e <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 800205e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002060:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <CO_NMT_init+0x178>)
 8002064:	9302      	str	r3, [sp, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	2300      	movs	r3, #0
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002074:	f005 fe68 	bl	8007d48 <CO_CANrxBufferInit>
 8002078:	4603      	mov	r3, r0
 800207a:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 800207c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <CO_NMT_init+0x136>
        return ret;
 8002084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002088:	e018      	b.n	80020bc <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8002090:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002092:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002094:	2300      	movs	r3, #0
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	2301      	movs	r3, #1
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2300      	movs	r3, #0
 800209e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80020a0:	f005 feb0 	bl	8007e04 <CO_CANtxBufferInit>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e001      	b.n	80020bc <CO_NMT_init+0x168>
    }

    return ret;
 80020b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	080022ad 	.word	0x080022ad
 80020c8:	08001ee9 	.word	0x08001ee9
 80020cc:	08001e9b 	.word	0x08001e9b

080020d0 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80020e4:	2300      	movs	r3, #0
 80020e6:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80020e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d204      	bcs.n	800210c <CO_NMT_process+0x3c>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	e000      	b.n	800210e <CO_NMT_process+0x3e>
 800210c:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10e      	bne.n	8002136 <CO_NMT_process+0x66>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d029      	beq.n	8002174 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800212e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8002132:	429a      	cmp	r2, r3
 8002134:	d01e      	beq.n	8002174 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213a:	7ffa      	ldrb	r2, [r7, #31]
 800213c:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f005 fed5 	bl	8007ef8 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 800214e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	889b      	ldrh	r3, [r3, #4]
 800215a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <CO_NMT_process+0x96>
 8002162:	2305      	movs	r3, #5
 8002164:	e000      	b.n	8002168 <CO_NMT_process+0x98>
 8002166:	237f      	movs	r3, #127	@ 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8002168:	77fb      	strb	r3, [r7, #31]
 800216a:	e003      	b.n	8002174 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	7ffa      	ldrb	r2, [r7, #31]
 8002178:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d025      	beq.n	80021ce <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	789b      	ldrb	r3, [r3, #2]
 8002186:	2b82      	cmp	r3, #130	@ 0x82
 8002188:	d01a      	beq.n	80021c0 <CO_NMT_process+0xf0>
 800218a:	2b82      	cmp	r3, #130	@ 0x82
 800218c:	dc1b      	bgt.n	80021c6 <CO_NMT_process+0xf6>
 800218e:	2b81      	cmp	r3, #129	@ 0x81
 8002190:	d013      	beq.n	80021ba <CO_NMT_process+0xea>
 8002192:	2b81      	cmp	r3, #129	@ 0x81
 8002194:	dc17      	bgt.n	80021c6 <CO_NMT_process+0xf6>
 8002196:	2b80      	cmp	r3, #128	@ 0x80
 8002198:	d00c      	beq.n	80021b4 <CO_NMT_process+0xe4>
 800219a:	2b80      	cmp	r3, #128	@ 0x80
 800219c:	dc13      	bgt.n	80021c6 <CO_NMT_process+0xf6>
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d002      	beq.n	80021a8 <CO_NMT_process+0xd8>
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d003      	beq.n	80021ae <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 80021a6:	e00e      	b.n	80021c6 <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 80021a8:	2305      	movs	r3, #5
 80021aa:	77fb      	strb	r3, [r7, #31]
                break;
 80021ac:	e00c      	b.n	80021c8 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 80021ae:	2304      	movs	r3, #4
 80021b0:	77fb      	strb	r3, [r7, #31]
                break;
 80021b2:	e009      	b.n	80021c8 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 80021b4:	237f      	movs	r3, #127	@ 0x7f
 80021b6:	77fb      	strb	r3, [r7, #31]
                break;
 80021b8:	e006      	b.n	80021c8 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	77bb      	strb	r3, [r7, #30]
                break;
 80021be:	e003      	b.n	80021c8 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 80021c0:	2301      	movs	r3, #1
 80021c2:	77bb      	strb	r3, [r7, #30]
                break;
 80021c4:	e000      	b.n	80021c8 <CO_NMT_process+0xf8>
                break;
 80021c6:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	889b      	ldrh	r3, [r3, #4]
 80021d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01c      	beq.n	8002214 <CO_NMT_process+0x144>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	2112      	movs	r1, #18
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fe1d 	bl	8001e20 <CO_isError>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	211b      	movs	r1, #27
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fe14 	bl	8001e20 <CO_isError>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d108      	bne.n	8002210 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	211c      	movs	r1, #28
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fe0b 	bl	8001e20 <CO_isError>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <CO_NMT_process+0x146>
 8002214:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8002216:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00d      	beq.n	8002240 <CO_NMT_process+0x170>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fe20 	bl	8001e6e <CO_getErrorRegister>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	889b      	ldrh	r3, [r3, #4]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <CO_NMT_process+0x170>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <CO_NMT_process+0x172>
 8002240:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8002242:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8002244:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d110      	bne.n	800226e <CO_NMT_process+0x19e>
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <CO_NMT_process+0x188>
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	889b      	ldrh	r3, [r3, #4]
 800225c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <CO_NMT_process+0x198>
 8002264:	2304      	movs	r3, #4
 8002266:	e000      	b.n	800226a <CO_NMT_process+0x19a>
 8002268:	237f      	movs	r3, #127	@ 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 800226a:	77fb      	strb	r3, [r7, #31]
 800226c:	e010      	b.n	8002290 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	889b      	ldrh	r3, [r3, #4]
 8002272:	b21b      	sxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	da0b      	bge.n	8002290 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 8002278:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800227c:	2b7f      	cmp	r3, #127	@ 0x7f
 800227e:	d107      	bne.n	8002290 <CO_NMT_process+0x1c0>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <CO_NMT_process+0x1c0>
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 800228c:	2305      	movs	r3, #5
 800228e:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	7ffa      	ldrb	r2, [r7, #31]
 8002294:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <CO_NMT_process+0x1d2>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	7ffa      	ldrb	r2, [r7, #31]
 80022a0:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 80022a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <OD_readOriginal+0x20>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <OD_readOriginal+0x20>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80022cc:	2309      	movs	r3, #9
 80022ce:	e041      	b.n	8002354 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80022e2:	230e      	movs	r3, #14
 80022e4:	e036      	b.n	8002354 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <OD_readOriginal+0x4e>
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d922      	bls.n	8002340 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	429a      	cmp	r2, r3
 8002302:	d801      	bhi.n	8002308 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8002304:	2309      	movs	r3, #9
 8002306:	e025      	b.n	8002354 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4413      	add	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d90a      	bls.n	800233a <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	441a      	add	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8002334:	23ff      	movs	r3, #255	@ 0xff
 8002336:	75fb      	strb	r3, [r7, #23]
 8002338:	e002      	b.n	8002340 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	69b9      	ldr	r1, [r7, #24]
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f010 fa26 	bl	8012796 <memcpy>

    *countRead = dataLenToCopy;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002350:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <OD_writeOriginal+0x20>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <OD_writeOriginal+0x20>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800237c:	2309      	movs	r3, #9
 800237e:	e047      	b.n	8002410 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8002392:	230e      	movs	r3, #14
 8002394:	e03c      	b.n	8002410 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <OD_writeOriginal+0x4e>
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d922      	bls.n	80023f0 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d801      	bhi.n	80023b8 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80023b4:	2309      	movs	r3, #9
 80023b6:	e02b      	b.n	8002410 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4413      	add	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d90a      	bls.n	80023ea <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	441a      	add	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80023e4:	23ff      	movs	r3, #255	@ 0xff
 80023e6:	75fb      	strb	r3, [r7, #23]
 80023e8:	e002      	b.n	80023f0 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d201      	bcs.n	80023fc <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80023f8:	230c      	movs	r3, #12
 80023fa:	e009      	b.n	8002410 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	69b8      	ldr	r0, [r7, #24]
 8002402:	f010 f9c8 	bl	8012796 <memcpy>

    *countWritten = dataLenToCopy;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	601a      	str	r2, [r3, #0]
    return returnCode;
 800240c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8002426:	2302      	movs	r3, #2
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8002442:	2302      	movs	r3, #2
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <OD_find+0x1a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <OD_find+0x1e>
        return NULL;
 800246a:	2300      	movs	r3, #0
 800246c:	e046      	b.n	80024fc <OD_find+0xac>
    }

    uint16_t min = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	3b01      	subs	r3, #1
 8002478:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 800247a:	e026      	b.n	80024ca <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 800247c:	8afa      	ldrh	r2, [r7, #22]
 800247e:	8abb      	ldrh	r3, [r7, #20]
 8002480:	4413      	add	r3, r2
 8002482:	105b      	asrs	r3, r3, #1
 8002484:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	89fa      	ldrh	r2, [r7, #14]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	887a      	ldrh	r2, [r7, #2]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d101      	bne.n	80024a6 <OD_find+0x56>
            return entry;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	e02a      	b.n	80024fc <OD_find+0xac>
        }

        if (index < entry->index) {
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d209      	bcs.n	80024c4 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 80024b0:	89fb      	ldrh	r3, [r7, #14]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <OD_find+0x6e>
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	e000      	b.n	80024c0 <OD_find+0x70>
 80024be:	89fb      	ldrh	r3, [r7, #14]
 80024c0:	82bb      	strh	r3, [r7, #20]
 80024c2:	e002      	b.n	80024ca <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 80024c4:	89fb      	ldrh	r3, [r7, #14]
 80024c6:	3301      	adds	r3, #1
 80024c8:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 80024ca:	8afa      	ldrh	r2, [r7, #22]
 80024cc:	8abb      	ldrh	r3, [r7, #20]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d3d4      	bcc.n	800247c <OD_find+0x2c>
        }
    }

    if (min == max) {
 80024d2:	8afa      	ldrh	r2, [r7, #22]
 80024d4:	8abb      	ldrh	r3, [r7, #20]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10f      	bne.n	80024fa <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	8afa      	ldrh	r2, [r7, #22]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d101      	bne.n	80024fa <OD_find+0xaa>
            return entry;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	e000      	b.n	80024fc <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8002508:	b480      	push	{r7}
 800250a:	b08d      	sub	sp, #52	@ 0x34
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	460b      	mov	r3, r1
 8002516:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <OD_getSub+0x1e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <OD_getSub+0x22>
 8002526:	2305      	movs	r3, #5
 8002528:	e0d2      	b.n	80026d0 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <OD_getSub+0x2c>
 8002530:	2309      	movs	r3, #9
 8002532:	e0cd      	b.n	80026d0 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	2b03      	cmp	r3, #3
 8002542:	d050      	beq.n	80025e6 <OD_getSub+0xde>
 8002544:	2b03      	cmp	r3, #3
 8002546:	f300 808c 	bgt.w	8002662 <OD_getSub+0x15a>
 800254a:	2b01      	cmp	r3, #1
 800254c:	d002      	beq.n	8002554 <OD_getSub+0x4c>
 800254e:	2b02      	cmp	r3, #2
 8002550:	d015      	beq.n	800257e <OD_getSub+0x76>
 8002552:	e086      	b.n	8002662 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8002554:	7afb      	ldrb	r3, [r7, #11]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <OD_getSub+0x56>
 800255a:	230e      	movs	r3, #14
 800255c:	e0b8      	b.n	80026d0 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	791a      	ldrb	r2, [r3, #4]
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	609a      	str	r2, [r3, #8]
        break;
 800257c:	e073      	b.n	8002666 <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	789b      	ldrb	r3, [r3, #2]
 8002582:	7afa      	ldrb	r2, [r7, #11]
 8002584:	429a      	cmp	r2, r3
 8002586:	d301      	bcc.n	800258c <OD_getSub+0x84>
 8002588:	230e      	movs	r3, #14
 800258a:	e0a1      	b.n	80026d0 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	7a1a      	ldrb	r2, [r3, #8]
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	2201      	movs	r2, #1
 80025ac:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 80025ae:	e05a      	b.n	8002666 <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	7a5a      	ldrb	r2, [r3, #9]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	7afa      	ldrb	r2, [r7, #11]
 80025ca:	3a01      	subs	r2, #1
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4413      	add	r3, r2
 80025d4:	e000      	b.n	80025d8 <OD_getSub+0xd0>
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025da:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	609a      	str	r2, [r3, #8]
        break;
 80025e4:	e03f      	b.n	8002666 <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025f6:	e01c      	b.n	8002632 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 80025f8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	461a      	mov	r2, r3
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	4413      	add	r3, r2
 800260a:	791b      	ldrb	r3, [r3, #4]
 800260c:	7afa      	ldrb	r2, [r7, #11]
 800260e:	429a      	cmp	r2, r3
 8002610:	d10a      	bne.n	8002628 <OD_getSub+0x120>
                odo = &odoArr[i];
 8002612:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	461a      	mov	r2, r3
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	4413      	add	r3, r2
 8002624:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8002626:	e00a      	b.n	800263e <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002628:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800262c:	3301      	adds	r3, #1
 800262e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	789b      	ldrb	r3, [r3, #2]
 8002636:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800263a:	429a      	cmp	r2, r3
 800263c:	d3dc      	bcc.n	80025f8 <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 800263e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <OD_getSub+0x140>
 8002644:	230e      	movs	r3, #14
 8002646:	e043      	b.n	80026d0 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8002648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264a:	795a      	ldrb	r2, [r3, #5]
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8002650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8002658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	609a      	str	r2, [r3, #8]
        break;
 8002660:	e001      	b.n	8002666 <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8002662:	2309      	movs	r3, #9
 8002664:	e034      	b.n	80026d0 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <OD_getSub+0x16c>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a19      	ldr	r2, [pc, #100]	@ (80026dc <OD_getSub+0x1d4>)
 8002678:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a18      	ldr	r2, [pc, #96]	@ (80026e0 <OD_getSub+0x1d8>)
 800267e:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	2200      	movs	r2, #0
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	e01c      	b.n	80026c2 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <OD_getSub+0x192>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	e000      	b.n	800269c <OD_getSub+0x194>
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <OD_getSub+0x1aa>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	e000      	b.n	80026b4 <OD_getSub+0x1ac>
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	7afa      	ldrb	r2, [r7, #11]
 80026cc:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3734      	adds	r7, #52	@ 0x34
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	080022ad 	.word	0x080022ad
 80026e0:	0800235d 	.word	0x0800235d
 80026e4:	08002419 	.word	0x08002419
 80026e8:	08002435 	.word	0x08002435

080026ec <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db03      	blt.n	8002706 <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b19      	cmp	r3, #25
 8002704:	dd02      	ble.n	800270c <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <OD_getSDOabCode+0x38>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	e004      	b.n	8002716 <OD_getSDOabCode+0x2a>
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <OD_getSDOabCode+0x38>)
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	08015974 	.word	0x08015974

08002728 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b08f      	sub	sp, #60	@ 0x3c
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	460b      	mov	r3, r1
 8002736:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <OD_get_value+0x1a>
 800273e:	2309      	movs	r3, #9
 8002740:	e024      	b.n	800278c <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	637b      	str	r3, [r7, #52]	@ 0x34
    OD_size_t countRd = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 800274c:	f107 0214 	add.w	r2, r7, #20
 8002750:	7af9      	ldrb	r1, [r7, #11]
 8002752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7ff fed7 	bl	8002508 <OD_getSub>
 800275a:	4603      	mov	r3, r0
 800275c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if (ret != ODR_OK) return ret;
 8002760:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <OD_get_value+0x46>
 8002768:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800276c:	e00e      	b.n	800278c <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 800276e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <OD_get_value+0x54>
 8002778:	230b      	movs	r3, #11
 800277a:	e007      	b.n	800278c <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 800277c:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002788:	47a0      	blx	r4
 800278a:	4603      	mov	r3, r0
}
 800278c:	4618      	mov	r0, r3
 800278e:	373c      	adds	r7, #60	@ 0x3c
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}

08002794 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b08f      	sub	sp, #60	@ 0x3c
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	460b      	mov	r3, r1
 80027a2:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	637b      	str	r3, [r7, #52]	@ 0x34
    OD_size_t countWritten = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80027ae:	f107 0214 	add.w	r2, r7, #20
 80027b2:	7af9      	ldrb	r1, [r7, #11]
 80027b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f7ff fea6 	bl	8002508 <OD_getSub>
 80027bc:	4603      	mov	r3, r0
 80027be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if (ret != ODR_OK) return ret;
 80027c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <OD_set_value+0x3c>
 80027ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027ce:	e00e      	b.n	80027ee <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 80027d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <OD_set_value+0x4a>
 80027da:	230b      	movs	r3, #11
 80027dc:	e007      	b.n	80027ee <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 80027de:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80027ea:	47a0      	blx	r4
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	373c      	adds	r7, #60	@ 0x3c
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}

080027f6 <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b08e      	sub	sp, #56	@ 0x38
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	460b      	mov	r3, r1
 8002804:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 800280c:	f107 0214 	add.w	r2, r7, #20
 8002810:	7af9      	ldrb	r1, [r7, #11]
 8002812:	2301      	movs	r3, #1
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff fe77 	bl	8002508 <OD_getSub>
 800281a:	4603      	mov	r3, r0
 800281c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8002820:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002824:	2b00      	cmp	r3, #0
 8002826:	d116      	bne.n	8002856 <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8002828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <OD_getPtr+0x42>
 8002830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8002838:	2309      	movs	r3, #9
 800283a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800283e:	e00a      	b.n	8002856 <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <OD_getPtr+0x60>
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d002      	beq.n	8002856 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8002850:	230b      	movs	r3, #11
 8002852:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <OD_getPtr+0x6e>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002862:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8002864:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <OD_getPtr+0x7c>
 800286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	e000      	b.n	8002874 <OD_getPtr+0x7e>
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3738      	adds	r7, #56	@ 0x38
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	81fb      	strh	r3, [r7, #14]
 80028a8:	89fb      	ldrh	r3, [r7, #14]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	2304      	movs	r3, #4
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <OD_getIndex+0x14>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	e000      	b.n	8002906 <OD_getIndex+0x16>
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <OD_extension_init>:
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <OD_extension_init+0x14>
 8002922:	2305      	movs	r3, #5
 8002924:	e003      	b.n	800292e <OD_extension_init+0x1c>
    entry->extension = extension;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <OD_get_u8>:
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af02      	add	r7, sp, #8
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	460b      	mov	r3, r1
 8002948:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800294a:	7af9      	ldrb	r1, [r7, #11]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff fee7 	bl	8002728 <OD_get_value>
 800295a:	4603      	mov	r3, r0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <OD_get_u16>:
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002974:	7af9      	ldrb	r1, [r7, #11]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2302      	movs	r3, #2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff fed2 	bl	8002728 <OD_get_value>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <OD_get_u32>:
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af02      	add	r7, sp, #8
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	460b      	mov	r3, r1
 800299c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800299e:	7af9      	ldrb	r1, [r7, #11]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2304      	movs	r3, #4
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff febd 	bl	8002728 <OD_get_value>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <OD_write_dummy+0x1a>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <OD_read_dummy+0x20>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <OD_read_dummy+0x20>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002a00:	2309      	movs	r3, #9
 8002a02:	e010      	b.n	8002a26 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d902      	bls.n	8002a14 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	2100      	movs	r1, #0
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f00f fe2d 	bl	8012678 <memset>

    *countRead = count;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b092      	sub	sp, #72	@ 0x48
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8002a56:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002a5a:	08db      	lsrs	r3, r3, #3
 8002a5c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8002a60:	79fa      	ldrb	r2, [r7, #7]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	3310      	adds	r3, #16
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002a72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d901      	bls.n	8002a7e <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	e090      	b.n	8002ba0 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002a7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a82:	2b1f      	cmp	r3, #31
 8002a84:	d81a      	bhi.n	8002abc <PDOconfigMap+0x8c>
 8002a86:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d116      	bne.n	8002abc <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a90:	63bb      	str	r3, [r7, #56]	@ 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8002a92:	2214      	movs	r2, #20
 8002a94:	2100      	movs	r1, #0
 8002a96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002a98:	f00f fdee 	bl	8012678 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8002a9c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa2:	60da      	str	r2, [r3, #12]
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aaa:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8002aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aae:	4a3e      	ldr	r2, [pc, #248]	@ (8002ba8 <PDOconfigMap+0x178>)
 8002ab0:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 8002ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab4:	4a3d      	ldr	r2, [pc, #244]	@ (8002bac <PDOconfigMap+0x17c>)
 8002ab6:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e071      	b.n	8002ba0 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8002abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002ac4:	f7ff fcc4 	bl	8002450 <OD_find>
 8002ac8:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002aca:	f107 0214 	add.w	r2, r7, #20
 8002ace:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002ad6:	f7ff fd17 	bl	8002508 <OD_getSub>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 8002ae0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <PDOconfigMap+0xbe>
        return odRet;
 8002ae8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002aec:	e058      	b.n	8002ba0 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <PDOconfigMap+0xc8>
 8002af4:	2308      	movs	r3, #8
 8002af6:	e000      	b.n	8002afa <PDOconfigMap+0xca>
 8002af8:	2304      	movs	r3, #4
 8002afa:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8002afe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002b02:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002b06:	4013      	ands	r3, r2
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 8002b0e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d201      	bcs.n	8002b28 <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002b24:	2306      	movs	r3, #6
 8002b26:	e03b      	b.n	8002ba0 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	f107 0414 	add.w	r4, r7, #20
 8002b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8002b3c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b42:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d129      	bne.n	8002b9e <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8002b4a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002b4e:	2b1f      	cmp	r3, #31
 8002b50:	d81f      	bhi.n	8002b92 <PDOconfigMap+0x162>
 8002b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01b      	beq.n	8002b92 <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 8002b66:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 8002b68:	3308      	adds	r3, #8
 8002b6a:	440b      	add	r3, r1
 8002b6c:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	323c      	adds	r2, #60	@ 0x3c
 8002b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 8002b76:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	2201      	movs	r2, #1
 8002b80:	409a      	lsls	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	b2d1      	uxtb	r1, r2
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	460a      	mov	r2, r1
 8002b8c:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 8002b90:	e005      	b.n	8002b9e <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002b92:	79fa      	ldrb	r2, [r7, #7]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	323c      	adds	r2, #60	@ 0x3c
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3748      	adds	r7, #72	@ 0x48
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba8:	080029e1 	.word	0x080029e1
 8002bac:	080029b9 	.word	0x080029b9

08002bb0 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	@ 0x30
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002bc6:	f107 021b 	add.w	r2, r7, #27
 8002bca:	2301      	movs	r3, #1
 8002bcc:	2100      	movs	r1, #0
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff feb3 	bl	800293a <OD_get_u8>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002bda:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00c      	beq.n	8002bfc <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fe81 	bl	80028f0 <OD_getIndex>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002bf6:	f06f 030b 	mvn.w	r3, #11
 8002bfa:	e082      	b.n	8002d02 <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c02:	e05e      	b.n	8002cc2 <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002c04:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	3310      	adds	r3, #16
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4413      	add	r3, r2
 8002c16:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8002c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c20:	3301      	adds	r3, #1
 8002c22:	b2d9      	uxtb	r1, r3
 8002c24:	f107 0214 	add.w	r2, r7, #20
 8002c28:	2301      	movs	r3, #1
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff feaf 	bl	800298e <OD_get_u32>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002c36:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002c3a:	2b0e      	cmp	r3, #14
 8002c3c:	d03b      	beq.n	8002cb6 <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8002c3e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00f      	beq.n	8002c66 <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 8002c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fe4f 	bl	80028f0 <OD_getIndex>
 8002c52:	4603      	mov	r3, r0
 8002c54:	021a      	lsls	r2, r3, #8
 8002c56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5e:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002c60:	f06f 030b 	mvn.w	r3, #11
 8002c64:	e04d      	b.n	8002d02 <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8002c66:	6979      	ldr	r1, [r7, #20]
 8002c68:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f7ff fedc 	bl	8002a30 <PDOconfigMap>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 8002c7e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	22ff      	movs	r2, #255	@ 0xff
 8002c90:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <PDO_initMapping+0xf0>
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9e:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002ca0:	7efb      	ldrb	r3, [r7, #27]
 8002ca2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d206      	bcs.n	8002cb8 <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb0:	4413      	add	r3, r2
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb4:	e000      	b.n	8002cb8 <PDO_initMapping+0x108>
            continue;
 8002cb6:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cc6:	2b07      	cmp	r3, #7
 8002cc8:	d99c      	bls.n	8002c04 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d805      	bhi.n	8002cdc <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <PDO_initMapping+0x13a>
 8002cd6:	7efb      	ldrb	r3, [r7, #27]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <PDO_initMapping+0x13a>
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 8002cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002cfa:	7efa      	ldrb	r2, [r7, #27]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3728      	adds	r7, #40	@ 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b08e      	sub	sp, #56	@ 0x38
 8002d0e:	af02      	add	r7, sp, #8
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <OD_write_PDO_mapping+0x28>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <OD_write_PDO_mapping+0x28>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	7c5b      	ldrb	r3, [r3, #17]
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d901      	bls.n	8002d36 <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 8002d32:	2309      	movs	r3, #9
 8002d34:	e086      	b.n	8002e44 <OD_write_PDO_mapping+0x13a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <OD_write_PDO_mapping+0x4a>
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	7b5b      	ldrb	r3, [r3, #13]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <OD_write_PDO_mapping+0x4e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	7c5b      	ldrb	r3, [r3, #17]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002d54:	2302      	movs	r3, #2
 8002d56:	e075      	b.n	8002e44 <OD_write_PDO_mapping+0x13a>
    }

    if (stream->subIndex == 0) {
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	7c5b      	ldrb	r3, [r3, #17]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d14d      	bne.n	8002dfc <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002d60:	68b8      	ldr	r0, [r7, #8]
 8002d62:	f7ff fd8b 	bl	800287c <CO_getUint8>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        size_t pdoDataLength = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002d70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d901      	bls.n	8002d7c <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 8002d78:	2307      	movs	r3, #7
 8002d7a:	e063      	b.n	8002e44 <OD_write_PDO_mapping+0x13a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d82:	e01e      	b.n	8002dc2 <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002d84:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	3310      	adds	r3, #16
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	4413      	add	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d901      	bls.n	8002db0 <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002dac:	2306      	movs	r3, #6
 8002dae:	e049      	b.n	8002e44 <OD_write_PDO_mapping+0x13a>
            }
            pdoDataLength += mappedLength;
 8002db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4413      	add	r3, r2
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002db8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002dc6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d3da      	bcc.n	8002d84 <OD_write_PDO_mapping+0x7a>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d901      	bls.n	8002dd8 <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 8002dd4:	2307      	movs	r3, #7
 8002dd6:	e035      	b.n	8002e44 <OD_write_PDO_mapping+0x13a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 8002dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <OD_write_PDO_mapping+0xe0>
 8002dde:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 8002de6:	230f      	movs	r3, #15
 8002de8:	e02c      	b.n	8002e44 <OD_write_PDO_mapping+0x13a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8002df8:	735a      	strb	r2, [r3, #13]
 8002dfa:	e01c      	b.n	8002e36 <OD_write_PDO_mapping+0x12c>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 8002dfc:	68b8      	ldr	r0, [r7, #8]
 8002dfe:	f7ff fd5a 	bl	80028b6 <CO_getUint32>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	7c5b      	ldrb	r3, [r3, #17]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e1e:	f7ff fe07 	bl	8002a30 <PDOconfigMap>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8002e28:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <OD_write_PDO_mapping+0x12c>
            return odRet;
 8002e30:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002e34:	e006      	b.n	8002e44 <OD_write_PDO_mapping+0x13a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff fa8d 	bl	800235c <OD_writeOriginal>
 8002e42:	4603      	mov	r3, r0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3730      	adds	r7, #48	@ 0x30
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff fa23 	bl	80022ac <OD_readOriginal>
 8002e66:	4603      	mov	r3, r0
 8002e68:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8002e6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d134      	bne.n	8002edc <OD_read_PDO_commParam+0x90>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	7c5b      	ldrb	r3, [r3, #17]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d130      	bne.n	8002edc <OD_read_PDO_commParam+0x90>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d12c      	bne.n	8002edc <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002e88:	68b8      	ldr	r0, [r7, #8]
 8002e8a:	f7ff fd14 	bl	80028b6 <CO_getUint32>
 8002e8e:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e98:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 8002e9a:	8a7b      	ldrh	r3, [r7, #18]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d011      	beq.n	8002ec4 <OD_read_PDO_commParam+0x78>
 8002ea0:	8a7a      	ldrh	r2, [r7, #18]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002eae:	400b      	ands	r3, r1
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	f8b2 2122 	ldrh.w	r2, [r2, #290]	@ 0x122
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <OD_read_PDO_commParam+0x88>
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ed2:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8002ed4:	69f9      	ldr	r1, [r7, #28]
 8002ed6:	68b8      	ldr	r0, [r7, #8]
 8002ed8:	f7ff fcfb 	bl	80028d2 <CO_setUint32>
    }

    return returnCode;
 8002edc:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	791b      	ldrb	r3, [r3, #4]
 8002efe:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	3305      	adds	r3, #5
 8002f04:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8002f0c:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03e      	beq.n	8002f94 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	7b1b      	ldrb	r3, [r3, #12]
 8002f1a:	7cfa      	ldrb	r2, [r7, #19]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d334      	bcc.n	8002f8a <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	7b1b      	ldrb	r3, [r3, #12]
 8002f24:	7cfa      	ldrb	r2, [r7, #19]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d105      	bne.n	8002f36 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 8002f2a:	7ffb      	ldrb	r3, [r7, #31]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d107      	bne.n	8002f40 <CO_PDO_receive+0x58>
 8002f30:	230b      	movs	r3, #11
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e004      	b.n	8002f40 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <CO_PDO_receive+0x58>
 8002f3c:	230d      	movs	r3, #13
 8002f3e:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <CO_PDO_receive+0x80>
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 8002f64:	2301      	movs	r3, #1
 8002f66:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 8002f68:	7fbb      	ldrb	r3, [r7, #30]
 8002f6a:	332a      	adds	r3, #42	@ 0x2a
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4413      	add	r3, r2
 8002f72:	2208      	movs	r2, #8
 8002f74:	68f9      	ldr	r1, [r7, #12]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00f fc0d 	bl	8012796 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002f7c:	7fba      	ldrb	r2, [r7, #30]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3252      	adds	r2, #82	@ 0x52
 8002f82:	2101      	movs	r1, #1
 8002f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f88:	e004      	b.n	8002f94 <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002f8a:	7ffb      	ldrb	r3, [r7, #31]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002f90:	230c      	movs	r3, #12
 8002f92:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	7ffa      	ldrb	r2, [r7, #31]
 8002f98:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
}
 8002f9c:	bf00      	nop
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b092      	sub	sp, #72	@ 0x48
 8002fa8:	af04      	add	r7, sp, #16
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <OD_write_14xx+0x26>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <OD_write_14xx+0x26>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <OD_write_14xx+0x26>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d901      	bls.n	8002fce <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002fca:	2309      	movs	r3, #9
 8002fcc:	e0ff      	b.n	80031ce <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	633b      	str	r3, [r7, #48]	@ 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f00f fbd8 	bl	8012796 <memcpy>

    switch (stream->subIndex) {
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	7c5b      	ldrb	r3, [r3, #17]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	f000 80d4 	beq.w	8003198 <OD_write_14xx+0x1f4>
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	f300 80e4 	bgt.w	80031be <OD_write_14xx+0x21a>
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d003      	beq.n	8003002 <OD_write_14xx+0x5e>
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	f000 80a5 	beq.w	800314a <OD_write_14xx+0x1a6>
 8003000:	e0dd      	b.n	80031be <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8003002:	68b8      	ldr	r0, [r7, #8]
 8003004:	f7ff fc57 	bl	80028b6 <CO_getUint32>
 8003008:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003012:	86fb      	strh	r3, [r7, #54]	@ 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	43db      	mvns	r3, r3
 8003018:	0fdb      	lsrs	r3, r3, #31
 800301a:	b2db      	uxtb	r3, r3
 800301c:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	4b6d      	ldr	r3, [pc, #436]	@ (80031d8 <OD_write_14xx+0x234>)
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d13d      	bne.n	80030a4 <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <OD_write_14xx+0x9e>
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <OD_write_14xx+0x9e>
 8003036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003038:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 800303c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800303e:	429a      	cmp	r2, r3
 8003040:	d130      	bne.n	80030a4 <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d026      	beq.n	8003096 <OD_write_14xx+0xf2>
 8003048:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800304a:	2b7f      	cmp	r3, #127	@ 0x7f
 800304c:	d92a      	bls.n	80030a4 <OD_write_14xx+0x100>
 800304e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003054:	d903      	bls.n	800305e <OD_write_14xx+0xba>
 8003056:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003058:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800305c:	d922      	bls.n	80030a4 <OD_write_14xx+0x100>
 800305e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003060:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8003064:	d903      	bls.n	800306e <OD_write_14xx+0xca>
 8003066:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003068:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800306c:	d31a      	bcc.n	80030a4 <OD_write_14xx+0x100>
 800306e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003070:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003074:	d903      	bls.n	800307e <OD_write_14xx+0xda>
 8003076:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003078:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 800307c:	d312      	bcc.n	80030a4 <OD_write_14xx+0x100>
 800307e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003080:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003084:	d303      	bcc.n	800308e <OD_write_14xx+0xea>
 8003086:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003088:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800308c:	d30a      	bcc.n	80030a4 <OD_write_14xx+0x100>
 800308e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003090:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003094:	d806      	bhi.n	80030a4 <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <OD_write_14xx+0x104>
 800309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309e:	7b5b      	ldrb	r3, [r3, #13]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 80030a4:	230f      	movs	r3, #15
 80030a6:	e092      	b.n	80031ce <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d105      	bne.n	80030be <OD_write_14xx+0x11a>
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 80030b8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d07e      	beq.n	80031bc <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 80030be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c0:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 80030c4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d108      	bne.n	80030dc <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80030d0:	f107 0310 	add.w	r3, r7, #16
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fbfb 	bl	80028d2 <CO_setUint32>
            }
            if (!valid) {
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <OD_write_14xx+0x142>
                CAN_ID = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 80030e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e8:	6858      	ldr	r0, [r3, #4]
 80030ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ec:	f8b3 1120 	ldrh.w	r1, [r3, #288]	@ 0x120
 80030f0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80030f2:	4b3a      	ldr	r3, [pc, #232]	@ (80031dc <OD_write_14xx+0x238>)
 80030f4:	9302      	str	r3, [sp, #8]
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003102:	f004 fe21 	bl	8007d48 <CO_CANrxBufferInit>
 8003106:	4603      	mov	r3, r0
 8003108:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <OD_write_14xx+0x184>
 8003110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <OD_write_14xx+0x184>
                PDO->valid = true;
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	2201      	movs	r2, #1
 800311c:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 800311e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003120:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003122:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 8003126:	e049      	b.n	80031bc <OD_write_14xx+0x218>
                PDO->valid = false;
 8003128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 800312e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003130:	2200      	movs	r2, #0
 8003132:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
                if (ret != CO_ERROR_NO) {
 800313e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d03a      	beq.n	80031bc <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 8003146:	2309      	movs	r3, #9
 8003148:	e041      	b.n	80031ce <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800314a:	68b8      	ldr	r0, [r7, #8]
 800314c:	f7ff fb96 	bl	800287c <CO_getUint8>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800315a:	2bf0      	cmp	r3, #240	@ 0xf0
 800315c:	d905      	bls.n	800316a <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 800315e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003162:	2bfd      	cmp	r3, #253	@ 0xfd
 8003164:	d801      	bhi.n	800316a <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 8003166:	230f      	movs	r3, #15
 8003168:	e031      	b.n	80031ce <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800316a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800316e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003170:	bf94      	ite	ls
 8003172:	2301      	movls	r3, #1
 8003174:	2300      	movhi	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	429a      	cmp	r2, r3
 8003184:	d003      	beq.n	800318e <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	2200      	movs	r2, #0
 800318a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        }

        RPDO->synchronous = synchronous;
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 8003196:	e012      	b.n	80031be <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8003198:	68b8      	ldr	r0, [r7, #8]
 800319a:	f7ff fb7d 	bl	8002898 <CO_getUint16>
 800319e:	4603      	mov	r3, r0
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 80031a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031a8:	fb03 f202 	mul.w	r2, r3, r2
 80031ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        RPDO->timeoutTimer = 0;
 80031b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        break;
 80031ba:	e000      	b.n	80031be <OD_write_14xx+0x21a>
        break;
 80031bc:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80031be:	f107 0110 	add.w	r1, r7, #16
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff f8c8 	bl	800235c <OD_writeOriginal>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3738      	adds	r7, #56	@ 0x38
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	3ffff800 	.word	0x3ffff800
 80031dc:	08002ee9 	.word	0x08002ee9

080031e0 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b090      	sub	sp, #64	@ 0x40
 80031e4:	af04      	add	r7, sp, #16
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <CO_RPDO_init+0x36>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <CO_RPDO_init+0x36>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <CO_RPDO_init+0x36>
 8003204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d005      	beq.n	8003216 <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 800320a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <CO_RPDO_init+0x36>
 8003210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e118      	b.n	800344e <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 800321c:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8003220:	2100      	movs	r1, #0
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f00f fa28 	bl	8012678 <memset>

    /* Configure object variables */
    PDO->em = em;
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003232:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 8003238:	f107 031c 	add.w	r3, r7, #28
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2301      	movs	r3, #1
 8003244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800324a:	f7ff fcb1 	bl	8002bb0 <PDO_initMapping>
 800324e:	4603      	mov	r3, r0
 8003250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8003254:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <CO_RPDO_init+0x82>
        return ret;
 800325c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003260:	e0f5      	b.n	800344e <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 8003266:	f107 0218 	add.w	r2, r7, #24
 800326a:	2301      	movs	r3, #1
 800326c:	2101      	movs	r1, #1
 800326e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003270:	f7ff fb8d 	bl	800298e <OD_get_u32>
 8003274:	4603      	mov	r3, r0
 8003276:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800327a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8003282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 8003288:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800328a:	f7ff fb31 	bl	80028f0 <OD_getIndex>
 800328e:	4603      	mov	r3, r0
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003298:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800329a:	f06f 030b 	mvn.w	r3, #11
 800329e:	e0d6      	b.n	800344e <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	0fdb      	lsrs	r3, r3, #31
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80032b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <CO_RPDO_init+0xf6>
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	7b5b      	ldrb	r3, [r3, #13]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <CO_RPDO_init+0xe8>
 80032c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <CO_RPDO_init+0xf6>
        valid = false;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <CO_RPDO_init+0xf6>
 80032d2:	2301      	movs	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d001      	beq.n	80032ea <CO_RPDO_init+0x10a>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	e000      	b.n	80032ec <CO_RPDO_init+0x10c>
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80032f2:	221a      	movs	r2, #26
 80032f4:	2101      	movs	r1, #1
 80032f6:	f7fe f9c7 	bl	8001688 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80032fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8003304:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <CO_RPDO_init+0x13c>
 800330a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800330c:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800330e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003312:	400b      	ands	r3, r1
 8003314:	429a      	cmp	r2, r3
 8003316:	d101      	bne.n	800331c <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8003318:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800331a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    ret = CO_CANrxBufferInit(
 800331c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800331e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8003322:	4b4d      	ldr	r3, [pc, #308]	@ (8003458 <CO_RPDO_init+0x278>)
 8003324:	9302      	str	r3, [sp, #8]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2300      	movs	r3, #0
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003332:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003334:	f004 fd08 	bl	8007d48 <CO_CANrxBufferInit>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 800333e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <CO_RPDO_init+0x16c>
        return ret;
 8003346:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800334a:	e080      	b.n	800344e <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003350:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003352:	23fe      	movs	r3, #254	@ 0xfe
 8003354:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 8003356:	f107 0217 	add.w	r2, r7, #23
 800335a:	2301      	movs	r3, #1
 800335c:	2102      	movs	r1, #2
 800335e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003360:	f7ff faeb 	bl	800293a <OD_get_u8>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800336a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8003372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 8003378:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800337a:	f7ff fab9 	bl	80028f0 <OD_getIndex>
 800337e:	4603      	mov	r3, r0
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	f043 0202 	orr.w	r2, r3, #2
 8003386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003388:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800338a:	f06f 030b 	mvn.w	r3, #11
 800338e:	e05e      	b.n	800344e <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2bf0      	cmp	r3, #240	@ 0xf0
 800339c:	bf94      	ite	ls
 800339e:	2301      	movls	r3, #1
 80033a0:	2300      	movhi	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 80033b0:	f107 0214 	add.w	r2, r7, #20
 80033b4:	2301      	movs	r3, #1
 80033b6:	2105      	movs	r1, #5
 80033b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033ba:	f7ff fad3 	bl	8002964 <OD_get_u16>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 80033c4:	8abb      	ldrh	r3, [r7, #20]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033cc:	fb03 f202 	mul.w	r2, r3, r2
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	2201      	movs	r2, #1
 80033da:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    PDO->OD = OD;
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033ec:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80033f4:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    PDO->configuredCanId = CAN_ID;
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80033fc:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	4a14      	ldr	r2, [pc, #80]	@ (800345c <CO_RPDO_init+0x27c>)
 800340c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	4a13      	ldr	r2, [pc, #76]	@ (8003460 <CO_RPDO_init+0x280>)
 8003414:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	4a10      	ldr	r2, [pc, #64]	@ (8003464 <CO_RPDO_init+0x284>)
 8003424:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	4a0f      	ldr	r2, [pc, #60]	@ (8003468 <CO_RPDO_init+0x288>)
 800342c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003436:	4619      	mov	r1, r3
 8003438:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800343a:	f7ff fa6a 	bl	8002912 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003444:	4619      	mov	r1, r3
 8003446:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003448:	f7ff fa63 	bl	8002912 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3730      	adds	r7, #48	@ 0x30
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	08002ee9 	.word	0x08002ee9
 800345c:	08002e4d 	.word	0x08002e4d
 8003460:	08002fa5 	.word	0x08002fa5
 8003464:	080022ad 	.word	0x080022ad
 8003468:	08002d0b 	.word	0x08002d0b

0800346c <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b097      	sub	sp, #92	@ 0x5c
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (PDO->valid && NMTisOperational
 800347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 810c 	beq.w	80036a0 <CO_RPDO_process+0x234>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8108 	beq.w	80036a0 <CO_RPDO_process+0x234>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8003490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <CO_RPDO_process+0x36>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 80ff 	bne.w	80036a0 <CO_RPDO_process+0x234>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80034a8:	2b0a      	cmp	r3, #10
 80034aa:	d928      	bls.n	80034fe <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80034b2:	2b0b      	cmp	r3, #11
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	633b      	str	r3, [r7, #48]	@ 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	d102      	bne.n	80034ce <CO_RPDO_process+0x62>
 80034c8:	f248 2310 	movw	r3, #33296	@ 0x8210
 80034cc:	e001      	b.n	80034d2 <CO_RPDO_process+0x66>
 80034ce:	f248 2320 	movw	r3, #33312	@ 0x8220
 80034d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 80034d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d6:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 80034d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034da:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 80034dc:	461a      	mov	r2, r3
 80034de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80034e0:	9200      	str	r2, [sp, #0]
 80034e2:	2204      	movs	r2, #4
 80034e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034e6:	f7fe f8cf 	bl	8001688 <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <CO_RPDO_process+0xbe>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <CO_RPDO_process+0xbe>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <CO_RPDO_process+0xbe>
            bufNo = 1;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 800352a:	2300      	movs	r3, #0
 800352c:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 800352e:	e065      	b.n	80035fc <CO_RPDO_process+0x190>
            rpdoReceived = true;
 8003530:	2301      	movs	r3, #1
 8003532:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8003534:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003538:	332a      	adds	r3, #42	@ 0x2a
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8003542:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3252      	adds	r2, #82	@ 0x52
 800354a:	2100      	movs	r1, #0
 800354c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003556:	e04b      	b.n	80035f0 <CO_RPDO_process+0x184>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8003558:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	3310      	adds	r3, #16
 8003566:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003568:	4413      	add	r3, r2
 800356a:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	330c      	adds	r3, #12
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8003580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003582:	2b08      	cmp	r3, #8
 8003584:	d901      	bls.n	800358a <CO_RPDO_process+0x11e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8003586:	2308      	movs	r3, #8
 8003588:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 800358a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800358e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003590:	429a      	cmp	r2, r3
 8003592:	d912      	bls.n	80035ba <CO_RPDO_process+0x14e>
                    memset(buf, 0, sizeof(buf));
 8003594:	f107 0318 	add.w	r3, r7, #24
 8003598:	2208      	movs	r2, #8
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f00f f86b 	bl	8012678 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 80035a2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80035a6:	f107 0318 	add.w	r3, r7, #24
 80035aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00f f8f2 	bl	8012796 <memcpy>
                    dataOD = buf;
 80035b2:	f107 0318 	add.w	r3, r7, #24
 80035b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035b8:	e001      	b.n	80035be <CO_RPDO_process+0x152>
                }
                else {
                    dataOD = dataRPDO;
 80035ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035bc:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 80035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c6:	699c      	ldr	r4, [r3, #24]
 80035c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035d2:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 80035d4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 80035dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e2:	4413      	add	r3, r2
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80035e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80035ea:	3301      	adds	r3, #1
 80035ec:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f2:	7b5b      	ldrb	r3, [r3, #13]
 80035f4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3ad      	bcc.n	8003558 <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 80035fc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3252      	adds	r2, #82	@ 0x52
 8003604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d191      	bne.n	8003530 <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d058      	beq.n	80036c8 <CO_RPDO_process+0x25c>
            if (rpdoReceived) {
 8003616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003618:	2b00      	cmp	r3, #0
 800361a:	d017      	beq.n	800364c <CO_RPDO_process+0x1e0>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003628:	429a      	cmp	r2, r3
 800362a:	d90a      	bls.n	8003642 <CO_RPDO_process+0x1d6>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 800362c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	2217      	movs	r2, #23
 800363c:	2100      	movs	r1, #0
 800363e:	f7fe f823 	bl	8001688 <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    ) {
 800364a:	e03d      	b.n	80036c8 <CO_RPDO_process+0x25c>
            }
            else if (RPDO->timeoutTimer > 0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003652:	2b00      	cmp	r3, #0
 8003654:	d038      	beq.n	80036c8 <CO_RPDO_process+0x25c>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003662:	429a      	cmp	r2, r3
 8003664:	d230      	bcs.n	80036c8 <CO_RPDO_process+0x25c>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	441a      	add	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8003682:	429a      	cmp	r2, r3
 8003684:	d920      	bls.n	80036c8 <CO_RPDO_process+0x25c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8003686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	f248 2350 	movw	r3, #33360	@ 0x8250
 8003696:	2217      	movs	r2, #23
 8003698:	2101      	movs	r1, #1
 800369a:	f7fd fff5 	bl	8001688 <CO_error>
    ) {
 800369e:	e013      	b.n	80036c8 <CO_RPDO_process+0x25c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 80036a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <CO_RPDO_process+0x242>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <CO_RPDO_process+0x25e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 80036c6:	e000      	b.n	80036ca <CO_RPDO_process+0x25e>
    ) {
 80036c8:	bf00      	nop
}
 80036ca:	bf00      	nop
 80036cc:	3754      	adds	r7, #84	@ 0x54
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd90      	pop	{r4, r7, pc}
	...

080036d4 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b093      	sub	sp, #76	@ 0x4c
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <OD_write_18xx+0x26>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <OD_write_18xx+0x26>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <OD_write_18xx+0x26>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d901      	bls.n	80036fe <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 80036fa:	2309      	movs	r3, #9
 80036fc:	e136      	b.n	800396c <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003706:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	4618      	mov	r0, r3
 8003712:	f00f f840 	bl	8012796 <memcpy>

    switch (stream->subIndex) {
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	7c5b      	ldrb	r3, [r3, #17]
 800371a:	3b01      	subs	r3, #1
 800371c:	2b05      	cmp	r3, #5
 800371e:	f200 811d 	bhi.w	800395c <OD_write_18xx+0x288>
 8003722:	a201      	add	r2, pc, #4	@ (adr r2, 8003728 <OD_write_18xx+0x54>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003741 	.word	0x08003741
 800372c:	08003877 	.word	0x08003877
 8003730:	080038dd 	.word	0x080038dd
 8003734:	0800395d 	.word	0x0800395d
 8003738:	0800390b 	.word	0x0800390b
 800373c:	0800392f 	.word	0x0800392f
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8003740:	68b8      	ldr	r0, [r7, #8]
 8003742:	f7ff f8b8 	bl	80028b6 <CO_getUint32>
 8003746:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003750:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	43db      	mvns	r3, r3
 8003756:	0fdb      	lsrs	r3, r3, #31
 8003758:	b2db      	uxtb	r3, r3
 800375a:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	4b85      	ldr	r3, [pc, #532]	@ (8003974 <OD_write_18xx+0x2a0>)
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d13d      	bne.n	80037e2 <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <OD_write_18xx+0xac>
 800376c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <OD_write_18xx+0xac>
 8003774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003776:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 800377a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800377c:	429a      	cmp	r2, r3
 800377e:	d130      	bne.n	80037e2 <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d026      	beq.n	80037d4 <OD_write_18xx+0x100>
 8003786:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003788:	2b7f      	cmp	r3, #127	@ 0x7f
 800378a:	d92a      	bls.n	80037e2 <OD_write_18xx+0x10e>
 800378c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800378e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003792:	d903      	bls.n	800379c <OD_write_18xx+0xc8>
 8003794:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003796:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800379a:	d922      	bls.n	80037e2 <OD_write_18xx+0x10e>
 800379c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800379e:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80037a2:	d903      	bls.n	80037ac <OD_write_18xx+0xd8>
 80037a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037aa:	d31a      	bcc.n	80037e2 <OD_write_18xx+0x10e>
 80037ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037ae:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037b2:	d903      	bls.n	80037bc <OD_write_18xx+0xe8>
 80037b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037b6:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80037ba:	d312      	bcc.n	80037e2 <OD_write_18xx+0x10e>
 80037bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037be:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80037c2:	d303      	bcc.n	80037cc <OD_write_18xx+0xf8>
 80037c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037ca:	d30a      	bcc.n	80037e2 <OD_write_18xx+0x10e>
 80037cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80037ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037d2:	d806      	bhi.n	80037e2 <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <OD_write_18xx+0x112>
 80037da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037dc:	7b5b      	ldrb	r3, [r3, #13]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 80037e2:	230f      	movs	r3, #15
 80037e4:	e0c2      	b.n	800396c <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 80037e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d106      	bne.n	80037fe <OD_write_18xx+0x12a>
 80037f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f2:	f8b3 3124 	ldrh.w	r3, [r3, #292]	@ 0x124
 80037f6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f000 80ae 	beq.w	800395a <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 80037fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003800:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 8003804:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003806:	429a      	cmp	r2, r3
 8003808:	d108      	bne.n	800381c <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f85b 	bl	80028d2 <CO_setUint32>
            }
            if (!valid) {
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <OD_write_18xx+0x152>
                CAN_ID = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8003826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003828:	6858      	ldr	r0, [r3, #4]
 800382a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382c:	f8b3 1120 	ldrh.w	r1, [r3, #288]	@ 0x120
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003832:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8003834:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003836:	f892 214c 	ldrb.w	r2, [r2, #332]	@ 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 800383a:	2af0      	cmp	r2, #240	@ 0xf0
 800383c:	bf94      	ite	ls
 800383e:	2201      	movls	r2, #1
 8003840:	2200      	movhi	r2, #0
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	4614      	mov	r4, r2
 8003846:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003848:	9401      	str	r4, [sp, #4]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	f004 fad9 	bl	8007e04 <CO_CANtxBufferInit>
 8003852:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 800385a:	2309      	movs	r3, #9
 800385c:	e086      	b.n	800396c <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 800385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
            PDO->valid = valid;
 8003866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 800386c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003870:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
        }
        break;
 8003874:	e071      	b.n	800395a <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8003876:	68b8      	ldr	r0, [r7, #8]
 8003878:	f7ff f800 	bl	800287c <CO_getUint8>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003886:	2bf0      	cmp	r3, #240	@ 0xf0
 8003888:	d905      	bls.n	8003896 <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 800388a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800388e:	2bfd      	cmp	r3, #253	@ 0xfd
 8003890:	d801      	bhi.n	8003896 <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 8003892:	230f      	movs	r3, #15
 8003894:	e06a      	b.n	800396c <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8003896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800389a:	2bf0      	cmp	r3, #240	@ 0xf0
 800389c:	bf94      	ite	ls
 800389e:	2301      	movls	r3, #1
 80038a0:	2300      	movhi	r3, #0
 80038a2:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 80038a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80038aa:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 80038ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ae:	22ff      	movs	r2, #255	@ 0xff
 80038b0:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80038ba:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        TPDO->sendRequest = true;
 80038be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c0:	2201      	movs	r2, #1
 80038c2:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 80038c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 80038ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d0:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80038d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
#endif
        break;
 80038da:	e03f      	b.n	800395c <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 80038dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 80038e4:	230f      	movs	r3, #15
 80038e6:	e041      	b.n	800396c <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 80038e8:	68b8      	ldr	r0, [r7, #8]
 80038ea:	f7fe ffd5 	bl	8002898 <CO_getUint16>
 80038ee:	4603      	mov	r3, r0
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 80038f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f4:	2264      	movs	r2, #100	@ 0x64
 80038f6:	fb03 f202 	mul.w	r2, r3, r2
 80038fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        TPDO->inhibitTimer = 0;
 8003900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003902:	2200      	movs	r2, #0
 8003904:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        break;
 8003908:	e028      	b.n	800395c <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 800390a:	68b8      	ldr	r0, [r7, #8]
 800390c:	f7fe ffc4 	bl	8002898 <CO_getUint16>
 8003910:	4603      	mov	r3, r0
 8003912:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800391a:	fb03 f202 	mul.w	r2, r3, r2
 800391e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003920:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        TPDO->eventTimer = 0;
 8003924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        break;
 800392c:	e016      	b.n	800395c <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 800392e:	68b8      	ldr	r0, [r7, #8]
 8003930:	f7fe ffa4 	bl	800287c <CO_getUint8>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        if (PDO->valid || syncStartValue > 240) {
 800393a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <OD_write_18xx+0x276>
 8003942:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003946:	2bf0      	cmp	r3, #240	@ 0xf0
 8003948:	d901      	bls.n	800394e <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 800394a:	230f      	movs	r3, #15
 800394c:	e00e      	b.n	800396c <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 800394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003950:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003954:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
        break;
 8003958:	e000      	b.n	800395c <OD_write_18xx+0x288>
        break;
 800395a:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 800395c:	f107 0114 	add.w	r1, r7, #20
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7fe fcf9 	bl	800235c <OD_writeOriginal>
 800396a:	4603      	mov	r3, r0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3744      	adds	r7, #68	@ 0x44
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	3ffff800 	.word	0x3ffff800

08003978 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08e      	sub	sp, #56	@ 0x38
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00e      	beq.n	80039ae <CO_TPDO_init+0x36>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <CO_TPDO_init+0x36>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <CO_TPDO_init+0x36>
 800399c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 80039a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <CO_TPDO_init+0x36>
 80039a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	e14f      	b.n	8003c54 <CO_TPDO_init+0x2dc>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 80039b4:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80039b8:	2100      	movs	r1, #0
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f00e fe5c 	bl	8012678 <memset>

    /* Configure object variables */
    PDO->em = em;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ca:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 80039d0:	f107 031c 	add.w	r3, r7, #28
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2300      	movs	r3, #0
 80039dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039e2:	f7ff f8e5 	bl	8002bb0 <PDO_initMapping>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 80039ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <CO_TPDO_init+0x82>
        return ret;
 80039f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80039f8:	e12c      	b.n	8003c54 <CO_TPDO_init+0x2dc>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80039fa:	23fe      	movs	r3, #254	@ 0xfe
 80039fc:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 80039fe:	f107 021b 	add.w	r2, r7, #27
 8003a02:	2301      	movs	r3, #1
 8003a04:	2102      	movs	r1, #2
 8003a06:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003a08:	f7fe ff97 	bl	800293a <OD_get_u8>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8003a12:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00e      	beq.n	8003a38 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8003a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8003a20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003a22:	f7fe ff65 	bl	80028f0 <OD_getIndex>
 8003a26:	4603      	mov	r3, r0
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	f043 0202 	orr.w	r2, r3, #2
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a30:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003a32:	f06f 030b 	mvn.w	r3, #11
 8003a36:	e10d      	b.n	8003c54 <CO_TPDO_init+0x2dc>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003a38:	7efb      	ldrb	r3, [r7, #27]
 8003a3a:	2bfd      	cmp	r3, #253	@ 0xfd
 8003a3c:	d804      	bhi.n	8003a48 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003a3e:	7efb      	ldrb	r3, [r7, #27]
 8003a40:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a42:	d901      	bls.n	8003a48 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003a44:	23fe      	movs	r3, #254	@ 0xfe
 8003a46:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8003a48:	7efa      	ldrb	r2, [r7, #27]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
    TPDO->sendRequest = true;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003a5c:	f107 0214 	add.w	r2, r7, #20
 8003a60:	2301      	movs	r3, #1
 8003a62:	2101      	movs	r1, #1
 8003a64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003a66:	f7fe ff92 	bl	800298e <OD_get_u32>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8003a70:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8003a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8003a7e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003a80:	f7fe ff36 	bl	80028f0 <OD_getIndex>
 8003a84:	4603      	mov	r3, r0
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a8e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003a90:	f06f 030b 	mvn.w	r3, #11
 8003a94:	e0de      	b.n	8003c54 <CO_TPDO_init+0x2dc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	0fdb      	lsrs	r3, r3, #31
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa8:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <CO_TPDO_init+0x154>
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	7b5b      	ldrb	r3, [r3, #13]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <CO_TPDO_init+0x146>
 8003ab8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <CO_TPDO_init+0x154>
        valid = false;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <CO_TPDO_init+0x154>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00e      	beq.n	8003af0 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d001      	beq.n	8003ae0 <CO_TPDO_init+0x168>
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	e000      	b.n	8003ae2 <CO_TPDO_init+0x16a>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8003ae8:	221a      	movs	r2, #26
 8003aea:	2101      	movs	r1, #1
 8003aec:	f7fd fdcc 	bl	8001688 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8003af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8003afa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <CO_TPDO_init+0x19a>
 8003b00:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003b02:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8003b04:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003b08:	400b      	ands	r3, r1
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d101      	bne.n	8003b12 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8003b0e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003b10:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	f892 214c 	ldrb.w	r2, [r2, #332]	@ 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8003b1c:	2af0      	cmp	r2, #240	@ 0xf0
 8003b1e:	bf94      	ite	ls
 8003b20:	2201      	movls	r2, #1
 8003b22:	2200      	movhi	r2, #0
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	4610      	mov	r0, r2
 8003b28:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003b2a:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8003b2e:	9001      	str	r0, [sp, #4]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003b36:	f004 f965 	bl	8007e04 <CO_CANtxBufferInit>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b50:	e080      	b.n	8003c54 <CO_TPDO_init+0x2dc>
    }

    PDO->valid = valid;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b56:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003b60:	f107 0212 	add.w	r2, r7, #18
 8003b64:	2301      	movs	r3, #1
 8003b66:	2103      	movs	r1, #3
 8003b68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003b6a:	f7fe fefb 	bl	8002964 <OD_get_u16>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8003b74:	f107 0210 	add.w	r2, r7, #16
 8003b78:	2301      	movs	r3, #1
 8003b7a:	2105      	movs	r1, #5
 8003b7c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003b7e:	f7fe fef1 	bl	8002964 <OD_get_u16>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 8003b88:	8a7b      	ldrh	r3, [r7, #18]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2364      	movs	r3, #100	@ 0x64
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 8003b9a:	8a3b      	ldrh	r3, [r7, #16]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	2106      	movs	r1, #6
 8003bc0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003bc2:	f7fe feba 	bl	800293a <OD_get_u8>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    TPDO->SYNC = SYNC;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    TPDO->syncCounter = 255;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	22ff      	movs	r2, #255	@ 0xff
 8003bd8:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    PDO->OD = OD;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003bf2:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003bfa:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
    PDO->configuredCanId = CAN_ID;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003c02:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	4a12      	ldr	r2, [pc, #72]	@ (8003c5c <CO_TPDO_init+0x2e4>)
 8003c12:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	4a11      	ldr	r2, [pc, #68]	@ (8003c60 <CO_TPDO_init+0x2e8>)
 8003c1a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	4a0e      	ldr	r2, [pc, #56]	@ (8003c64 <CO_TPDO_init+0x2ec>)
 8003c2a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	4a0d      	ldr	r2, [pc, #52]	@ (8003c68 <CO_TPDO_init+0x2f0>)
 8003c32:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003c40:	f7fe fe67 	bl	8002912 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003c4e:	f7fe fe60 	bl	8002912 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3730      	adds	r7, #48	@ 0x30
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	08002e4d 	.word	0x08002e4d
 8003c60:	080036d5 	.word	0x080036d5
 8003c64:	080022ad 	.word	0x080022ad
 8003c68:	08002d0b 	.word	0x08002d0b

08003c6c <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b091      	sub	sp, #68	@ 0x44
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c7e:	3305      	adds	r3, #5
 8003c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <CO_TPDOsend+0x2a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003c92:	2bfd      	cmp	r3, #253	@ 0xfd
 8003c94:	d901      	bls.n	8003c9a <CO_TPDOsend+0x2e>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <CO_TPDOsend+0x30>
 8003c9a:	2300      	movs	r3, #0
    bool_t eventDriven =
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003ca4:	e062      	b.n	8003d6c <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8003ca6:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	3310      	adds	r3, #16
 8003cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb6:	4413      	add	r3, r2
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
        OD_stream_t *stream = &OD_IO->stream;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 8003cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d901      	bls.n	8003cd4 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003cd4:	7ffb      	ldrb	r3, [r7, #31]
 8003cd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d90a      	bls.n	8003cf2 <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f00e fcc7 	bl	8012678 <memset>
            dataTPDOCopy = buf;
 8003cea:	f107 0310 	add.w	r3, r7, #16
 8003cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf0:	e001      	b.n	8003cf6 <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	695c      	ldr	r4, [r3, #20]
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d08:	6a38      	ldr	r0, [r7, #32]
 8003d0a:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003d0c:	7ffa      	ldrb	r2, [r7, #31]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d906      	bls.n	8003d28 <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 8003d1a:	7ffa      	ldrb	r2, [r7, #31]
 8003d1c:	f107 0310 	add.w	r3, r7, #16
 8003d20:	4619      	mov	r1, r3
 8003d22:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003d24:	f00e fd37 	bl	8012796 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003d28:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8003d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2e:	323c      	adds	r2, #60	@ 0x3c
 8003d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d34:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <CO_TPDOsend+0xee>
 8003d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003d52:	4313      	orrs	r3, r2
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 8003d5a:	7ffb      	ldrb	r3, [r7, #31]
 8003d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d5e:	4413      	add	r3, r2
 8003d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003d62:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003d66:	3301      	adds	r3, #1
 8003d68:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8003d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6e:	7b5b      	ldrb	r3, [r3, #13]
 8003d70:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d396      	bcc.n	8003ca6 <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f004 f8a7 	bl	8007ef8 <CO_CANsend>
 8003daa:	4603      	mov	r3, r0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3744      	adds	r7, #68	@ 0x44
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd90      	pop	{r4, r7, pc}

08003db4 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80dc 	beq.w	8003f88 <CO_TPDO_process+0x1d4>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80d8 	beq.w	8003f88 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003de8:	2bfd      	cmp	r3, #253	@ 0xfd
 8003dea:	d946      	bls.n	8003e7a <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d018      	beq.n	8003e28 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d205      	bcs.n	8003e0e <CO_TPDO_process+0x5a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	e000      	b.n	8003e10 <CO_TPDO_process+0x5c>
 8003e0e:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
                if (TPDO->eventTimer == 0) {
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d123      	bne.n	8003e7a <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003e32:	2300      	movs	r3, #0
 8003e34:	77fb      	strb	r3, [r7, #31]
 8003e36:	e01b      	b.n	8003e70 <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003e38:	7ffa      	ldrb	r2, [r7, #31]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	323c      	adds	r2, #60	@ 0x3c
 8003e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e42:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00f      	beq.n	8003e6a <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	7ffb      	ldrb	r3, [r7, #31]
 8003e50:	69b9      	ldr	r1, [r7, #24]
 8003e52:	440b      	add	r3, r1
 8003e54:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003e58:	4013      	ands	r3, r2
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
                            break;
 8003e68:	e007      	b.n	8003e7a <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	7b5b      	ldrb	r3, [r3, #13]
 8003e74:	7ffa      	ldrb	r2, [r7, #31]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d3de      	bcc.n	8003e38 <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003e80:	2bfd      	cmp	r3, #253	@ 0xfd
 8003e82:	d91d      	bls.n	8003ec0 <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d205      	bcs.n	8003e9c <CO_TPDO_process+0xe8>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	e000      	b.n	8003e9e <CO_TPDO_process+0xea>
 8003e9c:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d07f      	beq.n	8003fae <CO_TPDO_process+0x1fa>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d17a      	bne.n	8003fae <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff fed7 	bl	8003c6c <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003ebe:	e076      	b.n	8003fae <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d071      	beq.n	8003fae <CO_TPDO_process+0x1fa>
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d06e      	beq.n	8003fae <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d064      	beq.n	8003fae <CO_TPDO_process+0x1fa>
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fec1 	bl	8003c6c <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003eea:	e060      	b.n	8003fae <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8003ef2:	2bff      	cmp	r3, #255	@ 0xff
 8003ef4:	d119      	bne.n	8003f2a <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003efc:	7c5b      	ldrb	r3, [r3, #17]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	22fe      	movs	r2, #254	@ 0xfe
 8003f10:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
 8003f14:	e009      	b.n	8003f2a <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8003f30:	2bfe      	cmp	r3, #254	@ 0xfe
 8003f32:	d112      	bne.n	8003f5a <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003f3a:	7c9a      	ldrb	r2, [r3, #18]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d133      	bne.n	8003fae <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 214c 	ldrb.w	r2, [r3, #332]	@ 0x14c
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
                        CO_TPDOsend(TPDO);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff fe8a 	bl	8003c6c <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003f58:	e029      	b.n	8003fae <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d11c      	bne.n	8003fae <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 214c 	ldrb.w	r2, [r3, #332]	@ 0x14c
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
                    CO_TPDOsend(TPDO);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff fe73 	bl	8003c6c <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003f86:	e012      	b.n	8003fae <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	22ff      	movs	r2, #255	@ 0xff
 8003fa8:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
#endif
    }
}
 8003fac:	e000      	b.n	8003fb0 <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003fae:	bf00      	nop
}
 8003fb0:	bf00      	nop
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	73fb      	strb	r3, [r7, #15]
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <OD_getIndex+0x14>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	e000      	b.n	8004006 <OD_getIndex+0x16>
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <OD_mappable+0x1e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7c1b      	ldrb	r3, [r3, #16]
 8004024:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <OD_mappable+0x1e>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <OD_mappable+0x20>
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <OD_extension_init>:
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <OD_extension_init+0x14>
 800404e:	2305      	movs	r3, #5
 8004050:	e003      	b.n	800405a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <OD_get_u8>:
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af02      	add	r7, sp, #8
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	460b      	mov	r3, r1
 8004074:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004076:	7af9      	ldrb	r1, [r7, #11]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2301      	movs	r3, #1
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7fe fb51 	bl	8002728 <OD_get_value>
 8004086:	4603      	mov	r3, r0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <OD_get_u32>:
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	460b      	mov	r3, r1
 800409e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80040a0:	7af9      	ldrb	r1, [r7, #11]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2304      	movs	r3, #4
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f7fe fb3c 	bl	8002728 <OD_get_value>
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af02      	add	r7, sp, #8
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	460b      	mov	r3, r1
 80040c8:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 80040ca:	1d3a      	adds	r2, r7, #4
 80040cc:	7af9      	ldrb	r1, [r7, #11]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2304      	movs	r3, #4
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7fe fb5d 	bl	8002794 <OD_set_value>
 80040da:	4603      	mov	r3, r0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	791b      	ldrb	r3, [r3, #4]
 80040f6:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	3305      	adds	r3, #5
 80040fc:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d115      	bne.n	8004130 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b80      	cmp	r3, #128	@ 0x80
 800410a:	d103      	bne.n	8004114 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2200      	movs	r2, #0
 8004110:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8004112:	e00d      	b.n	8004130 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	333c      	adds	r3, #60	@ 0x3c
 8004120:	7cfa      	ldrb	r2, [r7, #19]
 8004122:	68f9      	ldr	r1, [r7, #12]
 8004124:	4618      	mov	r0, r3
 8004126:	f00e fb36 	bl	8012796 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2201      	movs	r2, #1
 800412e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af04      	add	r7, sp, #16
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4611      	mov	r1, r2
 8004144:	461a      	mov	r2, r3
 8004146:	460b      	mov	r3, r1
 8004148:	80fb      	strh	r3, [r7, #6]
 800414a:	4613      	mov	r3, r2
 800414c:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004152:	6a3a      	ldr	r2, [r7, #32]
 8004154:	429a      	cmp	r2, r3
 8004156:	d106      	bne.n	8004166 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415e:	429a      	cmp	r2, r3
 8004160:	d101      	bne.n	8004166 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8004162:	2300      	movs	r3, #0
 8004164:	e04e      	b.n	8004204 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	64da      	str	r2, [r3, #76]	@ 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004170:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db02      	blt.n	800417e <CO_SDOserver_init_canRxTx+0x46>
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	b29b      	uxth	r3, r3
 800417c:	e000      	b.n	8004180 <CO_SDOserver_init_canRxTx+0x48>
 800417e:	2300      	movs	r3, #0
 8004180:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	db02      	blt.n	800418e <CO_SDOserver_init_canRxTx+0x56>
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	b29b      	uxth	r3, r3
 800418c:	e000      	b.n	8004190 <CO_SDOserver_init_canRxTx+0x58>
 800418e:	2300      	movs	r3, #0
 8004190:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8004192:	8afb      	ldrh	r3, [r7, #22]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <CO_SDOserver_init_canRxTx+0x6e>
 8004198:	8abb      	ldrh	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	611a      	str	r2, [r3, #16]
 80041a4:	e006      	b.n	80041b4 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80041b4:	8afa      	ldrh	r2, [r7, #22]
 80041b6:	88f9      	ldrh	r1, [r7, #6]
 80041b8:	4b14      	ldr	r3, [pc, #80]	@ (800420c <CO_SDOserver_init_canRxTx+0xd4>)
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80041c8:	68b8      	ldr	r0, [r7, #8]
 80041ca:	f003 fdbd 	bl	8007d48 <CO_CANrxBufferInit>
 80041ce:	4603      	mov	r3, r0
 80041d0:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	8aba      	ldrh	r2, [r7, #20]
 80041d8:	88b9      	ldrh	r1, [r7, #4]
 80041da:	2300      	movs	r3, #0
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	2308      	movs	r3, #8
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2300      	movs	r3, #0
 80041e4:	f003 fe0e 	bl	8007e04 <CO_CANtxBufferInit>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d104      	bne.n	8004200 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80041f6:	23ff      	movs	r3, #255	@ 0xff
 80041f8:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8004200:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	080040e5 	.word	0x080040e5

08004210 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b08f      	sub	sp, #60	@ 0x3c
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <OD_write_1201_additional+0x20>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <OD_write_1201_additional+0x20>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8004230:	2309      	movs	r3, #9
 8004232:	e0f9      	b.n	8004428 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	7c5b      	ldrb	r3, [r3, #17]
 800423e:	2b03      	cmp	r3, #3
 8004240:	f200 80e8 	bhi.w	8004414 <OD_write_1201_additional+0x204>
 8004244:	a201      	add	r2, pc, #4	@ (adr r2, 800424c <OD_write_1201_additional+0x3c>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	0800425d 	.word	0x0800425d
 8004250:	08004261 	.word	0x08004261
 8004254:	08004325 	.word	0x08004325
 8004258:	080043eb 	.word	0x080043eb
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 800425c:	2304      	movs	r3, #4
 800425e:	e0e3      	b.n	8004428 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f7ff feb7 	bl	8003fd4 <CO_getUint32>
 8004266:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004270:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8004272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004276:	b29b      	uxth	r3, r3
 8004278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427c:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	43db      	mvns	r3, r3
 8004282:	0fdb      	lsrs	r3, r3, #31
 8004284:	b2db      	uxtb	r3, r3
 8004286:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4b69      	ldr	r3, [pc, #420]	@ (8004430 <OD_write_1201_additional+0x220>)
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d134      	bne.n	80042fc <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <OD_write_1201_additional+0x98>
 8004298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <OD_write_1201_additional+0x98>
 80042a0:	8afa      	ldrh	r2, [r7, #22]
 80042a2:	8abb      	ldrh	r3, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d129      	bne.n	80042fc <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d028      	beq.n	8004300 <OD_write_1201_additional+0xf0>
 80042ae:	8afb      	ldrh	r3, [r7, #22]
 80042b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80042b2:	d923      	bls.n	80042fc <OD_write_1201_additional+0xec>
 80042b4:	8afb      	ldrh	r3, [r7, #22]
 80042b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ba:	d903      	bls.n	80042c4 <OD_write_1201_additional+0xb4>
 80042bc:	8afb      	ldrh	r3, [r7, #22]
 80042be:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80042c2:	d91b      	bls.n	80042fc <OD_write_1201_additional+0xec>
 80042c4:	8afb      	ldrh	r3, [r7, #22]
 80042c6:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80042ca:	d903      	bls.n	80042d4 <OD_write_1201_additional+0xc4>
 80042cc:	8afb      	ldrh	r3, [r7, #22]
 80042ce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80042d2:	d313      	bcc.n	80042fc <OD_write_1201_additional+0xec>
 80042d4:	8afb      	ldrh	r3, [r7, #22]
 80042d6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80042da:	d903      	bls.n	80042e4 <OD_write_1201_additional+0xd4>
 80042dc:	8afb      	ldrh	r3, [r7, #22]
 80042de:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80042e2:	d30b      	bcc.n	80042fc <OD_write_1201_additional+0xec>
 80042e4:	8afb      	ldrh	r3, [r7, #22]
 80042e6:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80042ea:	d303      	bcc.n	80042f4 <OD_write_1201_additional+0xe4>
 80042ec:	8afb      	ldrh	r3, [r7, #22]
 80042ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042f2:	d303      	bcc.n	80042fc <OD_write_1201_additional+0xec>
 80042f4:	8afb      	ldrh	r3, [r7, #22]
 80042f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042fa:	d901      	bls.n	8004300 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 80042fc:	230f      	movs	r3, #15
 80042fe:	e093      	b.n	8004428 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8004300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004302:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004306:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800430a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430c:	f8b3 004a 	ldrh.w	r0, [r3, #74]	@ 0x4a
 8004310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	4603      	mov	r3, r0
 800431c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800431e:	f7ff ff0b 	bl	8004138 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8004322:	e07a      	b.n	800441a <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8004324:	68b8      	ldr	r0, [r7, #8]
 8004326:	f7ff fe55 	bl	8003fd4 <CO_getUint32>
 800432a:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	b29b      	uxth	r3, r3
 8004330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004334:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433a:	b29b      	uxth	r3, r3
 800433c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004340:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	43db      	mvns	r3, r3
 8004346:	0fdb      	lsrs	r3, r3, #31
 8004348:	b2db      	uxtb	r3, r3
 800434a:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 800434c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434e:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <OD_write_1201_additional+0x220>)
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d134      	bne.n	80043c0 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <OD_write_1201_additional+0x15c>
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <OD_write_1201_additional+0x15c>
 8004364:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004366:	8c3b      	ldrh	r3, [r7, #32]
 8004368:	429a      	cmp	r2, r3
 800436a:	d129      	bne.n	80043c0 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d028      	beq.n	80043c4 <OD_write_1201_additional+0x1b4>
 8004372:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004374:	2b7f      	cmp	r3, #127	@ 0x7f
 8004376:	d923      	bls.n	80043c0 <OD_write_1201_additional+0x1b0>
 8004378:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800437a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800437e:	d903      	bls.n	8004388 <OD_write_1201_additional+0x178>
 8004380:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004382:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004386:	d91b      	bls.n	80043c0 <OD_write_1201_additional+0x1b0>
 8004388:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800438a:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800438e:	d903      	bls.n	8004398 <OD_write_1201_additional+0x188>
 8004390:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004392:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004396:	d313      	bcc.n	80043c0 <OD_write_1201_additional+0x1b0>
 8004398:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800439a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800439e:	d903      	bls.n	80043a8 <OD_write_1201_additional+0x198>
 80043a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043a2:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80043a6:	d30b      	bcc.n	80043c0 <OD_write_1201_additional+0x1b0>
 80043a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043aa:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80043ae:	d303      	bcc.n	80043b8 <OD_write_1201_additional+0x1a8>
 80043b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043b6:	d303      	bcc.n	80043c0 <OD_write_1201_additional+0x1b0>
 80043b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043be:	d901      	bls.n	80043c4 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 80043c0:	230f      	movs	r3, #15
 80043c2:	e031      	b.n	8004428 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 80043c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80043c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ca:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	f8b3 404a 	ldrh.w	r4, [r3, #74]	@ 0x4a
 80043d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043da:	9201      	str	r2, [sp, #4]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4623      	mov	r3, r4
 80043e0:	4602      	mov	r2, r0
 80043e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043e4:	f7ff fea8 	bl	8004138 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 80043e8:	e017      	b.n	800441a <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80043f0:	230b      	movs	r3, #11
 80043f2:	e019      	b.n	8004428 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80043f4:	68b8      	ldr	r0, [r7, #8]
 80043f6:	f7ff fddf 	bl	8003fb8 <CO_getUint8>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if (nodeId < 1 || nodeId > 127) {
 8004400:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <OD_write_1201_additional+0x200>
 8004408:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800440c:	2b00      	cmp	r3, #0
 800440e:	da03      	bge.n	8004418 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8004410:	230f      	movs	r3, #15
 8004412:	e009      	b.n	8004428 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8004414:	230e      	movs	r3, #14
 8004416:	e007      	b.n	8004428 <OD_write_1201_additional+0x218>
            break;
 8004418:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7fd ff9b 	bl	800235c <OD_writeOriginal>
 8004426:	4603      	mov	r3, r0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3734      	adds	r7, #52	@ 0x34
 800442c:	46bd      	mov	sp, r7
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	3ffff800 	.word	0x3ffff800

08004434 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	@ 0x30
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <CO_SDOserver_init+0x26>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <CO_SDOserver_init+0x26>
 800444e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <CO_SDOserver_init+0x26>
 8004454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	e0f5      	b.n	800464c <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 800446c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800446e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	675a      	str	r2, [r3, #116]	@ 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d117      	bne.n	80044b6 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <CO_SDOserver_init+0x60>
 800448c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004490:	2b00      	cmp	r3, #0
 8004492:	da02      	bge.n	800449a <CO_SDOserver_init+0x66>
 8004494:	f04f 33ff 	mov.w	r3, #4294967295
 8004498:	e0d8      	b.n	800464c <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80044a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 80044ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	611a      	str	r2, [r3, #16]
 80044b4:	e0a4      	b.n	8004600 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fd9a 	bl	8003ff0 <OD_getIndex>
 80044bc:	4603      	mov	r3, r0
 80044be:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 80044c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044c2:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 80044c6:	d123      	bne.n	8004510 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <CO_SDOserver_init+0xa2>
 80044ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	da02      	bge.n	80044dc <CO_SDOserver_init+0xa8>
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295
 80044da:	e0b7      	b.n	800464c <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80044e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 80044ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80044f6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80044f8:	2301      	movs	r3, #1
 80044fa:	2101      	movs	r1, #1
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff fddc 	bl	80040ba <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8004502:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004504:	2301      	movs	r3, #1
 8004506:	2102      	movs	r1, #2
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fdd6 	bl	80040ba <OD_set_u32>
 800450e:	e077      	b.n	8004600 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8004510:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004512:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8004516:	d96f      	bls.n	80045f8 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8004518:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800451a:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 800451e:	d26b      	bcs.n	80045f8 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8004520:	f107 021d 	add.w	r2, r7, #29
 8004524:	2301      	movs	r3, #1
 8004526:	2100      	movs	r1, #0
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff fd9c 	bl	8004066 <OD_get_u8>
 800452e:	4603      	mov	r3, r0
 8004530:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8004534:	f107 0218 	add.w	r2, r7, #24
 8004538:	2301      	movs	r3, #1
 800453a:	2101      	movs	r1, #1
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fda7 	bl	8004090 <OD_get_u32>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8004548:	f107 0214 	add.w	r2, r7, #20
 800454c:	2301      	movs	r3, #1
 800454e:	2102      	movs	r1, #2
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fd9d 	bl	8004090 <OD_get_u32>
 8004556:	4603      	mov	r3, r0
 8004558:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 800455a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <CO_SDOserver_init+0x14a>
 8004562:	7f7b      	ldrb	r3, [r7, #29]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d002      	beq.n	800456e <CO_SDOserver_init+0x13a>
 8004568:	7f7b      	ldrb	r3, [r7, #29]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d107      	bne.n	800457e <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 800456e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <CO_SDOserver_init+0x14a>
 8004576:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 800457e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <CO_SDOserver_init+0x156>
 8004584:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004588:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 800458a:	f06f 030b 	mvn.w	r3, #11
 800458e:	e05d      	b.n	800464c <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	db05      	blt.n	80045a2 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 800459a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800459e:	b29b      	uxth	r3, r3
 80045a0:	e000      	b.n	80045a4 <CO_SDOserver_init+0x170>
 80045a2:	2300      	movs	r3, #0
 80045a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	db05      	blt.n	80045b8 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80045b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	e000      	b.n	80045ba <CO_SDOserver_init+0x186>
 80045b8:	2300      	movs	r3, #0
 80045ba:	84bb      	strh	r3, [r7, #36]	@ 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	655a      	str	r2, [r3, #84]	@ 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a23      	ldr	r2, [pc, #140]	@ (8004654 <CO_SDOserver_init+0x220>)
 80045c6:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a23      	ldr	r2, [pc, #140]	@ (8004658 <CO_SDOserver_init+0x224>)
 80045cc:	65da      	str	r2, [r3, #92]	@ 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3354      	adds	r3, #84	@ 0x54
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff fd32 	bl	800403e <OD_extension_init>
 80045da:	4603      	mov	r3, r0
 80045dc:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 80045de:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 80045e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <CO_SDOserver_init+0x1be>
 80045ec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80045ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f0:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80045f2:	f06f 030b 	mvn.w	r3, #11
 80045f6:	e029      	b.n	800464c <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	e026      	b.n	800464c <CO_SDOserver_init+0x218>
        ) {
 80045fe:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	639a      	str	r2, [r3, #56]	@ 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800460a:	645a      	str	r2, [r3, #68]	@ 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8004610:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800461a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	64da      	str	r2, [r3, #76]	@ 0x4c
    SDO->COB_IDServerToClient = 0;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800462e:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8004630:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004632:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004634:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8004638:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4603      	mov	r3, r0
 8004640:	460a      	mov	r2, r1
 8004642:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fd77 	bl	8004138 <CO_SDOserver_init_canRxTx>
 800464a:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 800464c:	4618      	mov	r0, r3
 800464e:	3728      	adds	r7, #40	@ 0x28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	080022ad 	.word	0x080022ad
 8004658:	08004211 	.word	0x08004211

0800465c <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b08d      	sub	sp, #52	@ 0x34
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	460b      	mov	r3, r1
 800466c:	71fb      	strb	r3, [r7, #7]
 800466e:	4613      	mov	r3, r2
 8004670:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (SDO->finished) {
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467e:	2b00      	cmp	r3, #0
 8004680:	d07b      	beq.n	800477a <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004686:	2b00      	cmp	r3, #0
 8004688:	d015      	beq.n	80046b6 <validateAndWriteToOD+0x5a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004692:	429a      	cmp	r2, r3
 8004694:	d00f      	beq.n	80046b6 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800469e:	429a      	cmp	r2, r3
 80046a0:	d901      	bls.n	80046a6 <validateAndWriteToOD+0x4a>
 80046a2:	4a77      	ldr	r2, [pc, #476]	@ (8004880 <validateAndWriteToOD+0x224>)
 80046a4:	e000      	b.n	80046a8 <validateAndWriteToOD+0x4c>
 80046a6:	4a77      	ldr	r2, [pc, #476]	@ (8004884 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	751a      	strb	r2, [r3, #20]
            return false;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e0df      	b.n	8004876 <validateAndWriteToOD+0x21a>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	da3c      	bge.n	8004742 <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <validateAndWriteToOD+0x7c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d934      	bls.n	8004742 <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046de:	3302      	adds	r3, #2
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d82e      	bhi.n	8004742 <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            SDO->sizeTran++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	669a      	str	r2, [r3, #104]	@ 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <validateAndWriteToOD+0xba>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004712:	429a      	cmp	r2, r3
 8004714:	d910      	bls.n	8004738 <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800471c:	1c59      	adds	r1, r3, #1
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	2200      	movs	r2, #0
 800472a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                SDO->sizeTran++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	669a      	str	r2, [r3, #104]	@ 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	621a      	str	r2, [r3, #32]
 8004740:	e02d      	b.n	800479e <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8004742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]
 8004750:	e025      	b.n	800479e <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004758:	429a      	cmp	r2, r3
 800475a:	d020      	beq.n	800479e <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004762:	429a      	cmp	r2, r3
 8004764:	d201      	bcs.n	800476a <validateAndWriteToOD+0x10e>
 8004766:	4a46      	ldr	r2, [pc, #280]	@ (8004880 <validateAndWriteToOD+0x224>)
 8004768:	e000      	b.n	800476c <validateAndWriteToOD+0x110>
 800476a:	4a46      	ldr	r2, [pc, #280]	@ (8004884 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	751a      	strb	r2, [r3, #20]
            return false;
 8004776:	2300      	movs	r3, #0
 8004778:	e07d      	b.n	8004876 <validateAndWriteToOD+0x21a>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <validateAndWriteToOD+0x142>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800478a:	429a      	cmp	r2, r3
 800478c:	d907      	bls.n	800479e <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4a3b      	ldr	r2, [pc, #236]	@ (8004880 <validateAndWriteToOD+0x224>)
 8004792:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	751a      	strb	r2, [r3, #20]
            return false;
 800479a:	2300      	movs	r3, #0
 800479c:	e06b      	b.n	8004876 <validateAndWriteToOD+0x21a>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3318      	adds	r3, #24
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fc33 	bl	8004012 <OD_mappable>
 80047ac:	6278      	str	r0, [r7, #36]	@ 0x24

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <validateAndWriteToOD+0x16a>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047b8:	f3ef 8210 	mrs	r2, PRIMASK
 80047bc:	61fa      	str	r2, [r7, #28]
  return(result);
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80047c2:	b672      	cpsid	i
}
 80047c4:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f103 0018 	add.w	r0, r3, #24
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	47a0      	blx	r4
 80047e2:	4603      	mov	r3, r0
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <validateAndWriteToOD+0x1a2>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f383 8810 	msr	PRIMASK, r3
}
 80047fc:	bf00      	nop

    SDO->bufOffsetWr = 0;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004806:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800480a:	2b00      	cmp	r3, #0
 800480c:	d011      	beq.n	8004832 <validateAndWriteToOD+0x1d6>
 800480e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d00c      	beq.n	8004832 <validateAndWriteToOD+0x1d6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004818:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800481c:	4618      	mov	r0, r3
 800481e:	f7fd ff65 	bl	80026ec <OD_getSDOabCode>
 8004822:	4602      	mov	r2, r0
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	751a      	strb	r2, [r3, #20]
        return false;
 800482e:	2300      	movs	r3, #0
 8004830:	e021      	b.n	8004876 <validateAndWriteToOD+0x21a>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <validateAndWriteToOD+0x1f8>
 800483a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004842:	d107      	bne.n	8004854 <validateAndWriteToOD+0x1f8>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a0f      	ldr	r2, [pc, #60]	@ (8004884 <validateAndWriteToOD+0x228>)
 8004848:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	751a      	strb	r2, [r3, #20]
        return false;
 8004850:	2300      	movs	r3, #0
 8004852:	e010      	b.n	8004876 <validateAndWriteToOD+0x21a>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <validateAndWriteToOD+0x218>
 800485c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <validateAndWriteToOD+0x218>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a06      	ldr	r2, [pc, #24]	@ (8004880 <validateAndWriteToOD+0x224>)
 8004868:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	751a      	strb	r2, [r3, #20]
        return false;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <validateAndWriteToOD+0x21a>
    }

    return true;
 8004874:	2301      	movs	r3, #1
}
 8004876:	4618      	mov	r0, r3
 8004878:	3734      	adds	r7, #52	@ 0x34
 800487a:	46bd      	mov	sp, r7
 800487c:	bd90      	pop	{r4, r7, pc}
 800487e:	bf00      	nop
 8004880:	06070012 	.word	0x06070012
 8004884:	06070013 	.word	0x06070013

08004888 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b08f      	sub	sp, #60	@ 0x3c
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (!SDO->finished && countRemain < countMinimum) {
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 80b1 	bne.w	8004a12 <readFromOd+0x18a>
 80048b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	f080 80ac 	bcs.w	8004a12 <readFromOd+0x18a>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048cc:	4413      	add	r3, r2
 80048ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d0:	4619      	mov	r1, r3
 80048d2:	f00d feb7 	bl	8012644 <memmove>
        SDO->bufOffsetRd = 0;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        SDO->bufOffsetWr = countRemain;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 80048e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e8:	f1c3 0320 	rsb	r3, r3, #32
 80048ec:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 80048f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fa:	4413      	add	r3, r2
 80048fc:	627b      	str	r3, [r7, #36]	@ 0x24
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3318      	adds	r3, #24
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fb85 	bl	8004012 <OD_mappable>
 8004908:	6238      	str	r0, [r7, #32]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <readFromOd+0x9a>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004914:	f3ef 8210 	mrs	r2, PRIMASK
 8004918:	61fa      	str	r2, [r7, #28]
  return(result);
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800491e:	b672      	cpsid	i
}
 8004920:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f103 0018 	add.w	r0, r3, #24
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004934:	47a0      	blx	r4
 8004936:	4603      	mov	r3, r0
 8004938:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <readFromOd+0xca>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004948:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f383 8810 	msr	PRIMASK, r3
}
 8004950:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004952:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8004956:	2b00      	cmp	r3, #0
 8004958:	d011      	beq.n	800497e <readFromOd+0xf6>
 800495a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d00c      	beq.n	800497e <readFromOd+0xf6>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004964:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8004968:	4618      	mov	r0, r3
 800496a:	f7fd febf 	bl	80026ec <OD_getSDOabCode>
 800496e:	4602      	mov	r2, r0
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	751a      	strb	r2, [r3, #20]
            return false;
 800497a:	2300      	movs	r3, #0
 800497c:	e04a      	b.n	8004a14 <readFromOd+0x18c>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d022      	beq.n	80049ca <readFromOd+0x142>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800498a:	b25b      	sxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	da1c      	bge.n	80049ca <readFromOd+0x142>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004994:	4413      	add	r3, r2
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 800499a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800499c:	f7fb fc88 	bl	80002b0 <strlen>
 80049a0:	6338      	str	r0, [r7, #48]	@ 0x30
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <readFromOd+0x124>
 80049a8:	2301      	movs	r3, #1
 80049aa:	633b      	str	r3, [r7, #48]	@ 0x30
            if (countStr < countRd) {
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d20a      	bcs.n	80049ca <readFromOd+0x142>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	441a      	add	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ce:	441a      	add	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <readFromOd+0x162>
 80049e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d110      	bne.n	8004a0c <readFromOd+0x184>
            SDO->finished = false;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	671a      	str	r2, [r3, #112]	@ 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d90a      	bls.n	8004a12 <readFromOd+0x18a>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a07      	ldr	r2, [pc, #28]	@ (8004a1c <readFromOd+0x194>)
 8004a00:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	751a      	strb	r2, [r3, #20]
                return false;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e003      	b.n	8004a14 <readFromOd+0x18c>
            }
        }
        else {
            SDO->finished = true;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	671a      	str	r2, [r3, #112]	@ 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8004a12:	2301      	movs	r3, #1
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	373c      	adds	r7, #60	@ 0x3c
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}
 8004a1c:	06040047 	.word	0x06040047

08004a20 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b09b      	sub	sp, #108	@ 0x6c
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d103      	bne.n	8004a3c <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8004a34:	f06f 0301 	mvn.w	r3, #1
 8004a38:	f000 bcfa 	b.w	8005430 <CO_SDOserver_process+0xa10>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf14      	ite	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	2300      	moveq	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	657b      	str	r3, [r7, #84]	@ 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <CO_SDOserver_process+0x56>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	7d1b      	ldrb	r3, [r3, #20]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <CO_SDOserver_process+0x56>
 8004a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004a74:	e2d1      	b.n	800501a <CO_SDOserver_process+0x5fa>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <CO_SDOserver_process+0x64>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004a96:	e2c0      	b.n	800501a <CO_SDOserver_process+0x5fa>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8004a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 82bd 	beq.w	800501a <CO_SDOserver_process+0x5fa>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	7d1b      	ldrb	r3, [r3, #20]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 80ce 	bne.w	8004c48 <CO_SDOserver_process+0x228>
            bool_t upload = false;
 8004aac:	2300      	movs	r3, #0
 8004aae:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d103      	bne.n	8004ac6 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2211      	movs	r2, #17
 8004ac2:	751a      	strb	r2, [r3, #20]
 8004ac4:	e00f      	b.n	8004ae6 <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d105      	bne.n	8004adc <CO_SDOserver_process+0xbc>
                upload = true;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2221      	movs	r2, #33	@ 0x21
 8004ad8:	751a      	strb	r2, [r3, #20]
 8004ada:	e004      	b.n	8004ae6 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004adc:	4ba5      	ldr	r3, [pc, #660]	@ (8004d74 <CO_SDOserver_process+0x354>)
 8004ade:	62bb      	str	r3, [r7, #40]	@ 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d162      	bne.n	8004bb2 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004af2:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 8004af4:	b21a      	sxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afc:	b21b      	sxth	r3, r3
 8004afe:	4313      	orrs	r3, r2
 8004b00:	b21b      	sxth	r3, r3
 8004b02:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	869a      	strh	r2, [r3, #52]	@ 0x34
                SDO->subIndex = SDO->CANrxData[3];
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7fd fc96 	bl	8002450 <OD_find>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 1036 	ldrb.w	r1, [r3, #54]	@ 0x36
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f103 0218 	add.w	r2, r3, #24
 8004b30:	2300      	movs	r3, #0
 8004b32:	f7fd fce9 	bl	8002508 <OD_getSub>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8004b3c:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004b44:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fd fdcf 	bl	80026ec <OD_getSDOabCode>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	751a      	strb	r2, [r3, #20]
 8004b58:	e02b      	b.n	8004bb2 <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8004b68:	4b83      	ldr	r3, [pc, #524]	@ (8004d78 <CO_SDOserver_process+0x358>)
 8004b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	751a      	strb	r2, [r3, #20]
 8004b72:	e01e      	b.n	8004bb2 <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8004b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00c      	beq.n	8004b94 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8004b88:	4b7c      	ldr	r3, [pc, #496]	@ (8004d7c <CO_SDOserver_process+0x35c>)
 8004b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	751a      	strb	r2, [r3, #20]
 8004b92:	e00e      	b.n	8004bb2 <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8004b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8004ba8:	4b75      	ldr	r3, [pc, #468]	@ (8004d80 <CO_SDOserver_process+0x360>)
 8004baa:	62bb      	str	r3, [r7, #40]	@ 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8004bb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d047      	beq.n	8004c48 <CO_SDOserver_process+0x228>
 8004bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d144      	bne.n	8004c48 <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran = 0;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	669a      	str	r2, [r3, #104]	@ 0x68
                SDO->finished = false;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	671a      	str	r2, [r3, #112]	@ 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8004bde:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004be2:	2300      	movs	r3, #0
 8004be4:	2207      	movs	r2, #7
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fe4e 	bl	8004888 <readFromOd>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d02a      	beq.n	8004c48 <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01a      	beq.n	8004c30 <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1a      	ldr	r2, [r3, #32]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	665a      	str	r2, [r3, #100]	@ 0x64

                        if (SDO->sizeInd == 0) {
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d105      	bne.n	8004c16 <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	665a      	str	r2, [r3, #100]	@ 0x64
 8004c14:	e018      	b.n	8004c48 <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d011      	beq.n	8004c48 <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004c24:	4b57      	ldr	r3, [pc, #348]	@ (8004d84 <CO_SDOserver_process+0x364>)
 8004c26:	62bb      	str	r3, [r7, #40]	@ 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	751a      	strb	r2, [r3, #20]
 8004c2e:	e00b      	b.n	8004c48 <CO_SDOserver_process+0x228>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c36:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	db02      	blt.n	8004c42 <CO_SDOserver_process+0x222>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	e000      	b.n	8004c44 <CO_SDOserver_process+0x224>
 8004c42:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	6653      	str	r3, [r2, #100]	@ 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	7d1b      	ldrb	r3, [r3, #20]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 81db 	beq.w	800500a <CO_SDOserver_process+0x5ea>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	7d1b      	ldrb	r3, [r3, #20]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	f000 81d5 	beq.w	800500a <CO_SDOserver_process+0x5ea>
        switch (SDO->state) {
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	7d1b      	ldrb	r3, [r3, #20]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	3b11      	subs	r3, #17
 8004c68:	2b12      	cmp	r3, #18
 8004c6a:	f200 81be 	bhi.w	8004fea <CO_SDOserver_process+0x5ca>
 8004c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c74 <CO_SDOserver_process+0x254>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004cc1 	.word	0x08004cc1
 8004c78:	08004feb 	.word	0x08004feb
 8004c7c:	08004ea3 	.word	0x08004ea3
 8004c80:	08004feb 	.word	0x08004feb
 8004c84:	08004feb 	.word	0x08004feb
 8004c88:	08004feb 	.word	0x08004feb
 8004c8c:	08004feb 	.word	0x08004feb
 8004c90:	08004feb 	.word	0x08004feb
 8004c94:	08004feb 	.word	0x08004feb
 8004c98:	08004feb 	.word	0x08004feb
 8004c9c:	08004feb 	.word	0x08004feb
 8004ca0:	08004feb 	.word	0x08004feb
 8004ca4:	08004feb 	.word	0x08004feb
 8004ca8:	08004feb 	.word	0x08004feb
 8004cac:	08004feb 	.word	0x08004feb
 8004cb0:	08004feb 	.word	0x08004feb
 8004cb4:	08004f99 	.word	0x08004f99
 8004cb8:	08004feb 	.word	0x08004feb
 8004cbc:	08004fa1 	.word	0x08004fa1
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 80af 	beq.w	8004e2e <CO_SDOserver_process+0x40e>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                if (SDO->CANrxData[0] & 0x01)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cfc:	e007      	b.n	8004d0e <CO_SDOserver_process+0x2ee>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8004cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d004      	beq.n	8004d0e <CO_SDOserver_process+0x2ee>
 8004d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d801      	bhi.n	8004d0e <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 8004d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8004d0e:	2300      	movs	r3, #0
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	2300      	movs	r3, #0
 8004d14:	84bb      	strh	r3, [r7, #36]	@ 0x24
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8004d1c:	f107 0320 	add.w	r3, r7, #32
 8004d20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d22:	4618      	mov	r0, r3
 8004d24:	f00d fd37 	bl	8012796 <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d2e:	b25b      	sxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	da17      	bge.n	8004d64 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8004d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <CO_SDOserver_process+0x322>
 8004d3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d210      	bcs.n	8004d64 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	643b      	str	r3, [r7, #64]	@ 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 8004d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <CO_SDOserver_process+0x334>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <CO_SDOserver_process+0x336>
 8004d54:	2302      	movs	r3, #2
 8004d56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d58:	4413      	add	r3, r2
 8004d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d60:	621a      	str	r2, [r3, #32]
                ) {
 8004d62:	e021      	b.n	8004da8 <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 8004d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10e      	bne.n	8004d88 <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d6e:	621a      	str	r2, [r3, #32]
 8004d70:	e01a      	b.n	8004da8 <CO_SDOserver_process+0x388>
 8004d72:	bf00      	nop
 8004d74:	05040001 	.word	0x05040001
 8004d78:	06010000 	.word	0x06010000
 8004d7c:	06010001 	.word	0x06010001
 8004d80:	06010002 	.word	0x06010002
 8004d84:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8004d88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d00b      	beq.n	8004da8 <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004d90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d901      	bls.n	8004d9c <CO_SDOserver_process+0x37c>
 8004d98:	4b97      	ldr	r3, [pc, #604]	@ (8004ff8 <CO_SDOserver_process+0x5d8>)
 8004d9a:	e000      	b.n	8004d9e <CO_SDOserver_process+0x37e>
 8004d9c:	4b97      	ldr	r3, [pc, #604]	@ (8004ffc <CO_SDOserver_process+0x5dc>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8004d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	751a      	strb	r2, [r3, #20]
                    break;
 8004da6:	e130      	b.n	800500a <CO_SDOserver_process+0x5ea>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3318      	adds	r3, #24
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff f92e 	bl	8004012 <OD_mappable>
 8004db6:	63f8      	str	r0, [r7, #60]	@ 0x3c

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8004db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <CO_SDOserver_process+0x3b0>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dc2:	f3ef 8210 	mrs	r2, PRIMASK
 8004dc6:	633a      	str	r2, [r7, #48]	@ 0x30
  return(result);
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dca:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004dcc:	b672      	cpsid	i
}
 8004dce:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f103 0018 	add.w	r0, r3, #24
 8004dda:	f107 031c 	add.w	r3, r7, #28
 8004dde:	f107 0120 	add.w	r1, r7, #32
 8004de2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004de4:	47a0      	blx	r4
 8004de6:	4603      	mov	r3, r0
 8004de8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8004dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <CO_SDOserver_process+0x3e2>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfc:	f383 8810 	msr	PRIMASK, r3
}
 8004e00:	bf00      	nop

                if (odRet != ODR_OK) {
 8004e02:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <CO_SDOserver_process+0x400>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004e0a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd fc6c 	bl	80026ec <OD_getSDOabCode>
 8004e14:	4603      	mov	r3, r0
 8004e16:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	751a      	strb	r2, [r3, #20]
                    break;
 8004e1e:	e0f4      	b.n	800500a <CO_SDOserver_process+0x5ea>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2212      	movs	r2, #18
 8004e24:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	671a      	str	r2, [r3, #112]	@ 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8004e2c:	e0ed      	b.n	800500a <CO_SDOserver_process+0x5ea>
                if (SDO->CANrxData[0] & 0x01) {
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d028      	beq.n	8004e8e <CO_SDOserver_process+0x46e>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	64bb      	str	r3, [r7, #72]	@ 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3340      	adds	r3, #64	@ 0x40
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
                    SDO->sizeInd = CO_SWAP_32(size);
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	665a      	str	r2, [r3, #100]	@ 0x64
                    if (sizeInOd > 0) {
 8004e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d01e      	beq.n	8004e94 <CO_SDOserver_process+0x474>
                        if (SDO->sizeInd > sizeInOd) {
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d205      	bcs.n	8004e6c <CO_SDOserver_process+0x44c>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004e60:	4b65      	ldr	r3, [pc, #404]	@ (8004ff8 <CO_SDOserver_process+0x5d8>)
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	751a      	strb	r2, [r3, #20]
                            break;
 8004e6a:	e0ce      	b.n	800500a <CO_SDOserver_process+0x5ea>
                        else if (SDO->sizeInd < sizeInOd
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d90e      	bls.n	8004e94 <CO_SDOserver_process+0x474>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e7c:	b25b      	sxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	db08      	blt.n	8004e94 <CO_SDOserver_process+0x474>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8004e82:	4b5e      	ldr	r3, [pc, #376]	@ (8004ffc <CO_SDOserver_process+0x5dc>)
 8004e84:	62bb      	str	r3, [r7, #40]	@ 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	751a      	strb	r2, [r3, #20]
                            break;
 8004e8c:	e0bd      	b.n	800500a <CO_SDOserver_process+0x5ea>
                    SDO->sizeInd = 0;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	665a      	str	r2, [r3, #100]	@ 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2212      	movs	r2, #18
 8004e98:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	671a      	str	r2, [r3, #112]	@ 0x70
            break;
 8004ea0:	e0b3      	b.n	800500a <CO_SDOserver_process+0x5ea>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d16d      	bne.n	8004f8c <CO_SDOserver_process+0x56c>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	671a      	str	r2, [r3, #112]	@ 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                if (toggle != SDO->toggle) {
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8004ede:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d005      	beq.n	8004ef2 <CO_SDOserver_process+0x4d2>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004ee6:	4b46      	ldr	r3, [pc, #280]	@ (8005000 <CO_SDOserver_process+0x5e0>)
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	751a      	strb	r2, [r3, #20]
                    break;
 8004ef0:	e08b      	b.n	800500a <CO_SDOserver_process+0x5ea>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f10:	18d0      	adds	r0, r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	333d      	adds	r3, #61	@ 0x3d
 8004f16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f00d fc3c 	bl	8012796 <memcpy>
                SDO->bufOffsetWr += count;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                SDO->sizeTran += count;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	669a      	str	r2, [r3, #104]	@ 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <CO_SDOserver_process+0x53a>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d905      	bls.n	8004f5a <CO_SDOserver_process+0x53a>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <CO_SDOserver_process+0x5d8>)
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	751a      	strb	r2, [r3, #20]
                    break;
 8004f58:	e057      	b.n	800500a <CO_SDOserver_process+0x5ea>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <CO_SDOserver_process+0x550>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f68:	f1c3 0320 	rsb	r3, r3, #32
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d809      	bhi.n	8004f84 <CO_SDOserver_process+0x564>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8004f70:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004f74:	2300      	movs	r3, #0
 8004f76:	2200      	movs	r2, #0
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff fb6f 	bl	800465c <validateAndWriteToOD>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d041      	beq.n	8005008 <CO_SDOserver_process+0x5e8>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2214      	movs	r2, #20
 8004f88:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004f8a:	e03e      	b.n	800500a <CO_SDOserver_process+0x5ea>
                abortCode = CO_SDO_AB_CMD;
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005004 <CO_SDOserver_process+0x5e4>)
 8004f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	751a      	strb	r2, [r3, #20]
            break;
 8004f96:	e038      	b.n	800500a <CO_SDOserver_process+0x5ea>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2222      	movs	r2, #34	@ 0x22
 8004f9c:	751a      	strb	r2, [r3, #20]
            break;
 8004f9e:	e034      	b.n	800500a <CO_SDOserver_process+0x5ea>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fa6:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8004faa:	2b60      	cmp	r3, #96	@ 0x60
 8004fac:	d117      	bne.n	8004fde <CO_SDOserver_process+0x5be>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
                if (toggle != SDO->toggle) {
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8004fc2:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d005      	beq.n	8004fd6 <CO_SDOserver_process+0x5b6>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <CO_SDOserver_process+0x5e0>)
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	751a      	strb	r2, [r3, #20]
                    break;
 8004fd4:	e019      	b.n	800500a <CO_SDOserver_process+0x5ea>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2224      	movs	r2, #36	@ 0x24
 8004fda:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004fdc:	e015      	b.n	800500a <CO_SDOserver_process+0x5ea>
                abortCode = CO_SDO_AB_CMD;
 8004fde:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <CO_SDOserver_process+0x5e4>)
 8004fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	751a      	strb	r2, [r3, #20]
            break;
 8004fe8:	e00f      	b.n	800500a <CO_SDOserver_process+0x5ea>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <CO_SDOserver_process+0x5e4>)
 8004fec:	62bb      	str	r3, [r7, #40]	@ 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	751a      	strb	r2, [r3, #20]
 8004ff4:	e009      	b.n	800500a <CO_SDOserver_process+0x5ea>
 8004ff6:	bf00      	nop
 8004ff8:	06070012 	.word	0x06070012
 8004ffc:	06070013 	.word	0x06070013
 8005000:	05030000 	.word	0x05030000
 8005004:	05040001 	.word	0x05040001
                        break;
 8005008:	bf00      	nop
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
        timeDifference_us = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	639a      	str	r2, [r3, #56]	@ 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 800501a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800501e:	2b01      	cmp	r3, #1
 8005020:	d11e      	bne.n	8005060 <CO_SDOserver_process+0x640>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800502a:	429a      	cmp	r2, r3
 800502c:	d205      	bcs.n	800503a <CO_SDOserver_process+0x61a>
            SDO->timeoutTimer += timeDifference_us;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	441a      	add	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	679a      	str	r2, [r3, #120]	@ 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005042:	429a      	cmp	r2, r3
 8005044:	d304      	bcc.n	8005050 <CO_SDOserver_process+0x630>
            abortCode = CO_SDO_AB_TIMEOUT;
 8005046:	4b9c      	ldr	r3, [pc, #624]	@ (80052b8 <CO_SDOserver_process+0x898>)
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
            SDO->state = CO_SDO_ST_ABORT;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <CO_SDOserver_process+0x640>
            ret = CO_SDO_RT_transmittBufferFull;
 800505a:	2304      	movs	r3, #4
 800505c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8005060:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005064:	2b01      	cmp	r3, #1
 8005066:	f040 81ab 	bne.w	80053c0 <CO_SDOserver_process+0x9a0>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	3305      	adds	r3, #5
 8005070:	2208      	movs	r2, #8
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f00d faff 	bl	8012678 <memset>

        switch (SDO->state) {
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	7d1b      	ldrb	r3, [r3, #20]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	3b12      	subs	r3, #18
 8005082:	2b12      	cmp	r3, #18
 8005084:	f200 8199 	bhi.w	80053ba <CO_SDOserver_process+0x99a>
 8005088:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <CO_SDOserver_process+0x670>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050dd 	.word	0x080050dd
 8005094:	080053bb 	.word	0x080053bb
 8005098:	0800515f 	.word	0x0800515f
 800509c:	080053bb 	.word	0x080053bb
 80050a0:	080053bb 	.word	0x080053bb
 80050a4:	080053bb 	.word	0x080053bb
 80050a8:	080053bb 	.word	0x080053bb
 80050ac:	080053bb 	.word	0x080053bb
 80050b0:	080053bb 	.word	0x080053bb
 80050b4:	080053bb 	.word	0x080053bb
 80050b8:	080053bb 	.word	0x080053bb
 80050bc:	080053bb 	.word	0x080053bb
 80050c0:	080053bb 	.word	0x080053bb
 80050c4:	080053bb 	.word	0x080053bb
 80050c8:	080053bb 	.word	0x080053bb
 80050cc:	080053bb 	.word	0x080053bb
 80050d0:	080051bb 	.word	0x080051bb
 80050d4:	080053bb 	.word	0x080053bb
 80050d8:	08005289 	.word	0x08005289
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2260      	movs	r2, #96	@ 0x60
 80050e2:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80050f4:	0a1b      	lsrs	r3, r3, #8
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800510a:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f002 feeb 	bl	8007ef8 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	2b00      	cmp	r3, #0
 8005128:	d006      	beq.n	8005138 <CO_SDOserver_process+0x718>
                SDO->state = CO_SDO_ST_IDLE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8005130:	2300      	movs	r3, #0
 8005132:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 8005136:	e143      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
                SDO->toggle = 0x00;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
                SDO->sizeTran = 0;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	669a      	str	r2, [r3, #104]	@ 0x68
                SDO->bufOffsetWr = 0;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
                SDO->bufOffsetRd = 0;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2213      	movs	r2, #19
 800515a:	751a      	strb	r2, [r3, #20]
            break;
 800515c:	e130      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 206c 	ldrb.w	r2, [r3, #108]	@ 0x6c
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f042 0220 	orr.w	r2, r2, #32
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <CO_SDOserver_process+0x75e>
 800517a:	2210      	movs	r2, #16
 800517c:	e000      	b.n	8005180 <CO_SDOserver_process+0x760>
 800517e:	2200      	movs	r2, #0
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	679a      	str	r2, [r3, #120]	@ 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f002 feae 	bl	8007ef8 <CO_CANsend>
            if (SDO->finished) {
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d006      	beq.n	80051b2 <CO_SDOserver_process+0x792>
                SDO->state = CO_SDO_ST_IDLE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80051aa:	2300      	movs	r3, #0
 80051ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 80051b0:	e106      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2213      	movs	r2, #19
 80051b6:	751a      	strb	r2, [r3, #20]
            break;
 80051b8:	e102      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d024      	beq.n	800520c <CO_SDOserver_process+0x7ec>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d820      	bhi.n	800520c <CO_SDOserver_process+0x7ec>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f1c3 0304 	rsb	r3, r3, #4
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f103 0009 	add.w	r0, r3, #9
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f103 017c 	add.w	r1, r3, #124	@ 0x7c
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051f8:	461a      	mov	r2, r3
 80051fa:	f00d facc 	bl	8012796 <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800520a:	e020      	b.n	800524e <CO_SDOserver_process+0x82e>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00e      	beq.n	8005232 <CO_SDOserver_process+0x812>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005218:	637b      	str	r3, [r7, #52]	@ 0x34
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 800521a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521c:	617b      	str	r3, [r7, #20]
                    SDO->CANtxBuff->data[0] = 0x41;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2241      	movs	r2, #65	@ 0x41
 8005224:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	3309      	adds	r3, #9
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e003      	b.n	800523a <CO_SDOserver_process+0x81a>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2240      	movs	r2, #64	@ 0x40
 8005238:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
                SDO->timeoutTimer = 0;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	679a      	str	r2, [r3, #120]	@ 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2223      	movs	r2, #35	@ 0x23
 800524c:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8005274:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f002 fe39 	bl	8007ef8 <CO_CANsend>
            break;
 8005286:	e09b      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 8005288:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800528c:	2300      	movs	r3, #0
 800528e:	2207      	movs	r2, #7
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7ff faf9 	bl	8004888 <readFromOd>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8090 	beq.w	80053be <CO_SDOserver_process+0x99e>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	f892 206c 	ldrb.w	r2, [r2, #108]	@ 0x6c
 80052a8:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <CO_SDOserver_process+0x89c>
 80052b4:	2210      	movs	r2, #16
 80052b6:	e002      	b.n	80052be <CO_SDOserver_process+0x89e>
 80052b8:	05040000 	.word	0x05040000
 80052bc:	2200      	movs	r2, #0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	65bb      	str	r3, [r7, #88]	@ 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 80052d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052d6:	2b06      	cmp	r3, #6
 80052d8:	d906      	bls.n	80052e8 <CO_SDOserver_process+0x8c8>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01b      	beq.n	800531a <CO_SDOserver_process+0x8fa>
 80052e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052e4:	2b07      	cmp	r3, #7
 80052e6:	d118      	bne.n	800531a <CO_SDOserver_process+0x8fa>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	795a      	ldrb	r2, [r3, #5]
 80052ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f1c3 0307 	rsb	r3, r3, #7
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8005312:	2300      	movs	r3, #0
 8005314:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005318:	e007      	b.n	800532a <CO_SDOserver_process+0x90a>
            }
            else {
                SDO->timeoutTimer = 0;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	679a      	str	r2, [r3, #120]	@ 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2223      	movs	r2, #35	@ 0x23
 8005324:	751a      	strb	r2, [r3, #20]
                count = 7;
 8005326:	2307      	movs	r3, #7
 8005328:	65bb      	str	r3, [r7, #88]	@ 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	1d98      	adds	r0, r3, #6
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800533c:	4413      	add	r3, r2
 800533e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005340:	4619      	mov	r1, r3
 8005342:	f00d fa28 	bl	8012796 <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800534c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800534e:	441a      	add	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            SDO->sizeTran += count;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800535a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800535c:	441a      	add	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	669a      	str	r2, [r3, #104]	@ 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01e      	beq.n	80053a8 <CO_SDOserver_process+0x988>
                if (SDO->sizeTran > SDO->sizeInd) {
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005372:	429a      	cmp	r2, r3
 8005374:	d905      	bls.n	8005382 <CO_SDOserver_process+0x962>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8005376:	4b30      	ldr	r3, [pc, #192]	@ (8005438 <CO_SDOserver_process+0xa18>)
 8005378:	62bb      	str	r3, [r7, #40]	@ 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	751a      	strb	r2, [r3, #20]
                    break;
 8005380:	e01e      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 8005382:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10e      	bne.n	80053a8 <CO_SDOserver_process+0x988>
                         && SDO->sizeTran < SDO->sizeInd
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005392:	429a      	cmp	r2, r3
 8005394:	d208      	bcs.n	80053a8 <CO_SDOserver_process+0x988>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8005396:	4b29      	ldr	r3, [pc, #164]	@ (800543c <CO_SDOserver_process+0xa1c>)
 8005398:	62bb      	str	r3, [r7, #40]	@ 0x28
                    ret = CO_SDO_RT_waitingResponse;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	751a      	strb	r2, [r3, #20]
                    break;
 80053a6:	e00b      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f002 fda0 	bl	8007ef8 <CO_CANsend>
            break;
 80053b8:	e002      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 80053ba:	bf00      	nop
 80053bc:	e000      	b.n	80053c0 <CO_SDOserver_process+0x9a0>
                break;
 80053be:	bf00      	nop
        }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 80053c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d131      	bne.n	800542c <CO_SDOserver_process+0xa0c>
        if (SDO->state == CO_SDO_ST_ABORT) {
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	7d1b      	ldrb	r3, [r3, #20]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d12c      	bne.n	800542c <CO_SDOserver_process+0xa0c>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 80053d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d4:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2280      	movs	r2, #128	@ 0x80
 80053dc:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8005404:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	3309      	adds	r3, #9
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f002 fd6c 	bl	8007ef8 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8005426:	23f6      	movs	r3, #246	@ 0xf6
 8005428:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 800542c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8005430:	4618      	mov	r0, r3
 8005432:	376c      	adds	r7, #108	@ 0x6c
 8005434:	46bd      	mov	sp, r7
 8005436:	bd90      	pop	{r4, r7, pc}
 8005438:	06070012 	.word	0x06070012
 800543c:	06070013 	.word	0x06070013

08005440 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <OD_getIndex+0x14>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	e000      	b.n	800548e <OD_getIndex+0x16>
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <OD_extension_init>:
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <OD_extension_init+0x14>
 80054aa:	2305      	movs	r3, #5
 80054ac:	e003      	b.n	80054b6 <OD_extension_init+0x1c>
    entry->extension = extension;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <OD_get_u8>:
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b086      	sub	sp, #24
 80054c6:	af02      	add	r7, sp, #8
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	460b      	mov	r3, r1
 80054d0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80054d2:	7af9      	ldrb	r1, [r7, #11]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2301      	movs	r3, #1
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7fd f923 	bl	8002728 <OD_get_value>
 80054e2:	4603      	mov	r3, r0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <OD_get_u32>:
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	460b      	mov	r3, r1
 80054fa:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80054fc:	7af9      	ldrb	r1, [r7, #11]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	2304      	movs	r3, #4
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7fd f90e 	bl	8002728 <OD_get_value>
 800550c:	4603      	mov	r3, r0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7c9b      	ldrb	r3, [r3, #18]
 8005522:	3301      	adds	r3, #1
 8005524:	b2da      	uxtb	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	749a      	strb	r2, [r3, #18]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7c9a      	ldrb	r2, [r3, #18]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	7c5b      	ldrb	r3, [r3, #17]
 8005532:	429a      	cmp	r2, r3
 8005534:	d902      	bls.n	800553c <CO_SYNCsend+0x26>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	7c92      	ldrb	r2, [r2, #18]
 800555e:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f002 fcc4 	bl	8007ef8 <CO_CANsend>
 8005570:	4603      	mov	r3, r0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	791b      	ldrb	r3, [r3, #4]
 800558c:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	7c5b      	ldrb	r3, [r3, #17]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10c      	bne.n	80055b4 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 80055a0:	2301      	movs	r3, #1
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e019      	b.n	80055da <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	721a      	strb	r2, [r3, #8]
 80055b2:	e012      	b.n	80055da <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d109      	bne.n	80055ce <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3305      	adds	r3, #5
 80055be:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	781a      	ldrb	r2, [r3, #0]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 80055c8:	2301      	movs	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e005      	b.n	80055da <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00c      	beq.n	80055fa <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2201      	movs	r2, #1
 80055f8:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b08f      	sub	sp, #60	@ 0x3c
 800560c:	af04      	add	r7, sp, #16
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00c      	beq.n	8005636 <OD_write_1005+0x2e>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	7c5b      	ldrb	r3, [r3, #17]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d108      	bne.n	8005636 <OD_write_1005+0x2e>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d102      	bne.n	8005636 <OD_write_1005+0x2e>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005636:	2309      	movs	r3, #9
 8005638:	e0a3      	b.n	8005782 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8005640:	68b8      	ldr	r0, [r7, #8]
 8005642:	f7ff ff0b 	bl	800545c <CO_getUint32>
 8005646:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005650:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	bf14      	ite	ne
 800565c:	2301      	movne	r3, #1
 800565e:	2300      	moveq	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	4b49      	ldr	r3, [pc, #292]	@ (800578c <OD_write_1005+0x184>)
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d133      	bne.n	80056d6 <OD_write_1005+0xce>
 800566e:	8bfb      	ldrh	r3, [r7, #30]
 8005670:	2b7f      	cmp	r3, #127	@ 0x7f
 8005672:	d930      	bls.n	80056d6 <OD_write_1005+0xce>
 8005674:	8bfb      	ldrh	r3, [r7, #30]
 8005676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800567a:	d903      	bls.n	8005684 <OD_write_1005+0x7c>
 800567c:	8bfb      	ldrh	r3, [r7, #30]
 800567e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8005682:	d928      	bls.n	80056d6 <OD_write_1005+0xce>
 8005684:	8bfb      	ldrh	r3, [r7, #30]
 8005686:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800568a:	d903      	bls.n	8005694 <OD_write_1005+0x8c>
 800568c:	8bfb      	ldrh	r3, [r7, #30]
 800568e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005692:	d320      	bcc.n	80056d6 <OD_write_1005+0xce>
 8005694:	8bfb      	ldrh	r3, [r7, #30]
 8005696:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800569a:	d903      	bls.n	80056a4 <OD_write_1005+0x9c>
 800569c:	8bfb      	ldrh	r3, [r7, #30]
 800569e:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80056a2:	d318      	bcc.n	80056d6 <OD_write_1005+0xce>
 80056a4:	8bfb      	ldrh	r3, [r7, #30]
 80056a6:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80056aa:	d303      	bcc.n	80056b4 <OD_write_1005+0xac>
 80056ac:	8bfb      	ldrh	r3, [r7, #30]
 80056ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056b2:	d310      	bcc.n	80056d6 <OD_write_1005+0xce>
 80056b4:	8bfb      	ldrh	r3, [r7, #30]
 80056b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056ba:	d80c      	bhi.n	80056d6 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <OD_write_1005+0xd2>
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <OD_write_1005+0xd2>
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056d0:	8bfa      	ldrh	r2, [r7, #30]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d001      	beq.n	80056da <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 80056d6:	230f      	movs	r3, #15
 80056d8:	e053      	b.n	8005782 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80056e0:	8bfa      	ldrh	r2, [r7, #30]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d03a      	beq.n	800575c <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 80056ee:	8bfa      	ldrh	r2, [r7, #30]
 80056f0:	4b27      	ldr	r3, [pc, #156]	@ (8005790 <OD_write_1005+0x188>)
 80056f2:	9302      	str	r3, [sp, #8]
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	2300      	movs	r3, #0
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005700:	f002 fb22 	bl	8007d48 <CO_CANrxBufferInit>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8005708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8005710:	2309      	movs	r3, #9
 8005712:	e036      	b.n	8005782 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461c      	mov	r4, r3
 800572e:	8bfa      	ldrh	r2, [r7, #30]
 8005730:	2300      	movs	r3, #0
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	9400      	str	r4, [sp, #0]
 8005736:	2300      	movs	r3, #0
 8005738:	f002 fb64 	bl	8007e04 <CO_CANtxBufferInit>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	629a      	str	r2, [r3, #40]	@ 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	2200      	movs	r2, #0
 800574e:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 8005750:	2309      	movs	r3, #9
 8005752:	e016      	b.n	8005782 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	8bfa      	ldrh	r2, [r7, #30]
 8005758:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	2200      	movs	r2, #0
 800576c:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	2200      	movs	r2, #0
 8005772:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7fc fdee 	bl	800235c <OD_writeOriginal>
 8005780:	4603      	mov	r3, r0
}
 8005782:	4618      	mov	r0, r3
 8005784:	372c      	adds	r7, #44	@ 0x2c
 8005786:	46bd      	mov	sp, r7
 8005788:	bd90      	pop	{r4, r7, pc}
 800578a:	bf00      	nop
 800578c:	bffff800 	.word	0xbffff800
 8005790:	0800557b 	.word	0x0800557b

08005794 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b089      	sub	sp, #36	@ 0x24
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <OD_write_1019+0x2e>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	7c5b      	ldrb	r3, [r3, #17]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d108      	bne.n	80057c2 <OD_write_1019+0x2e>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d102      	bne.n	80057c2 <OD_write_1019+0x2e>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80057c2:	2309      	movs	r3, #9
 80057c4:	e041      	b.n	800584a <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 80057cc:	68b8      	ldr	r0, [r7, #8]
 80057ce:	f7ff fe37 	bl	8005440 <CO_getUint8>
 80057d2:	4603      	mov	r3, r0
 80057d4:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d002      	beq.n	80057e2 <OD_write_1019+0x4e>
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	2bf0      	cmp	r3, #240	@ 0xf0
 80057e0:	d901      	bls.n	80057e6 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 80057e2:	230f      	movs	r3, #15
 80057e4:	e031      	b.n	800584a <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80057f0:	2317      	movs	r3, #23
 80057f2:	e02a      	b.n	800584a <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f8b3 104c 	ldrh.w	r1, [r3, #76]	@ 0x4c
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf14      	ite	ne
 800580a:	2301      	movne	r3, #1
 800580c:	2300      	moveq	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461c      	mov	r4, r3
 8005812:	2300      	movs	r3, #0
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	9400      	str	r4, [sp, #0]
 8005818:	2300      	movs	r3, #0
 800581a:	f002 faf3 	bl	8007e04 <CO_CANtxBufferInit>
 800581e:	4602      	mov	r2, r0
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	629a      	str	r2, [r3, #40]	@ 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2200      	movs	r2, #0
 8005830:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 8005832:	2309      	movs	r3, #9
 8005834:	e009      	b.n	800584a <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	7cfa      	ldrb	r2, [r7, #19]
 800583a:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7fc fd8a 	bl	800235c <OD_writeOriginal>
 8005848:	4603      	mov	r3, r0
}
 800584a:	4618      	mov	r0, r3
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd90      	pop	{r4, r7, pc}
	...

08005854 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	@ 0x30
 8005858:	af04      	add	r7, sp, #16
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <CO_SYNC_init+0x32>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <CO_SYNC_init+0x32>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <CO_SYNC_init+0x32>
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	e0fe      	b.n	8005a8a <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 800588c:	2260      	movs	r2, #96	@ 0x60
 800588e:	2100      	movs	r1, #0
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f00c fef1 	bl	8012678 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8005896:	2380      	movs	r3, #128	@ 0x80
 8005898:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 800589a:	f107 0218 	add.w	r2, r7, #24
 800589e:	2301      	movs	r3, #1
 80058a0:	2100      	movs	r1, #0
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff fe22 	bl	80054ec <OD_get_u32>
 80058a8:	4603      	mov	r3, r0
 80058aa:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80058ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00c      	beq.n	80058ce <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 80058b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d006      	beq.n	80058c8 <CO_SYNC_init+0x74>
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fddc 	bl	8005478 <OD_getIndex>
 80058c0:	4603      	mov	r3, r0
 80058c2:	461a      	mov	r2, r3
 80058c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80058c8:	f06f 030b 	mvn.w	r3, #11
 80058cc:	e0dd      	b.n	8005a8a <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	635a      	str	r2, [r3, #52]	@ 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005a94 <CO_SYNC_init+0x240>)
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005a98 <CO_SYNC_init+0x244>)
 80058de:	63da      	str	r2, [r3, #60]	@ 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3334      	adds	r3, #52	@ 0x34
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fdd7 	bl	800549a <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 80058ec:	2300      	movs	r3, #0
 80058ee:	2204      	movs	r2, #4
 80058f0:	2100      	movs	r1, #0
 80058f2:	6838      	ldr	r0, [r7, #0]
 80058f4:	f7fc ff7f 	bl	80027f6 <OD_getPtr>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10c      	bne.n	8005920 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8005906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <CO_SYNC_init+0xc6>
 800590c:	6838      	ldr	r0, [r7, #0]
 800590e:	f7ff fdb3 	bl	8005478 <OD_getIndex>
 8005912:	4603      	mov	r3, r0
 8005914:	461a      	mov	r2, r3
 8005916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005918:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800591a:	f06f 030b 	mvn.w	r3, #11
 800591e:	e0b4      	b.n	8005a8a <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8005920:	2300      	movs	r3, #0
 8005922:	2204      	movs	r2, #4
 8005924:	2100      	movs	r1, #0
 8005926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005928:	f7fc ff65 	bl	80027f6 <OD_getPtr>
 800592c:	4602      	mov	r2, r0
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8005932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <CO_SYNC_init+0x106>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10c      	bne.n	800595a <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8005940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d006      	beq.n	8005954 <CO_SYNC_init+0x100>
 8005946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005948:	f7ff fd96 	bl	8005478 <OD_getIndex>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005952:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005954:	f06f 030b 	mvn.w	r3, #11
 8005958:	e097      	b.n	8005a8a <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 800595e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d033      	beq.n	80059cc <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8005964:	f107 0217 	add.w	r2, r7, #23
 8005968:	2301      	movs	r3, #1
 800596a:	2100      	movs	r1, #0
 800596c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800596e:	f7ff fda8 	bl	80054c2 <OD_get_u8>
 8005972:	4603      	mov	r3, r0
 8005974:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8005976:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 800597e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d006      	beq.n	8005992 <CO_SYNC_init+0x13e>
 8005984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005986:	f7ff fd77 	bl	8005478 <OD_getIndex>
 800598a:	4603      	mov	r3, r0
 800598c:	461a      	mov	r2, r3
 800598e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005990:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8005992:	f06f 030b 	mvn.w	r3, #11
 8005996:	e078      	b.n	8005a8a <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d102      	bne.n	80059a4 <CO_SYNC_init+0x150>
 800599e:	2302      	movs	r3, #2
 80059a0:	75fb      	strb	r3, [r7, #23]
 80059a2:	e004      	b.n	80059ae <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	2bf0      	cmp	r3, #240	@ 0xf0
 80059a8:	d901      	bls.n	80059ae <CO_SYNC_init+0x15a>
 80059aa:	23f0      	movs	r3, #240	@ 0xf0
 80059ac:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a37      	ldr	r2, [pc, #220]	@ (8005a94 <CO_SYNC_init+0x240>)
 80059b8:	655a      	str	r2, [r3, #84]	@ 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a37      	ldr	r2, [pc, #220]	@ (8005a9c <CO_SYNC_init+0x248>)
 80059be:	659a      	str	r2, [r3, #88]	@ 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3350      	adds	r3, #80	@ 0x50
 80059c4:	4619      	mov	r1, r3
 80059c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059c8:	f7ff fd67 	bl	800549a <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 80059cc:	7dfa      	ldrb	r2, [r7, #23]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bf14      	ite	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	2300      	moveq	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    SYNC->CANdevRx = CANdevRx;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a02:	62da      	str	r2, [r3, #44]	@ 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005a08:	861a      	strh	r2, [r3, #48]	@ 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a0e:	649a      	str	r2, [r3, #72]	@ 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8005a14:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8005a24:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa0 <CO_SYNC_init+0x24c>)
 8005a26:	9302      	str	r3, [sp, #8]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a36:	f002 f987 	bl	8007d48 <CO_CANrxBufferInit>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8005a3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <CO_SYNC_init+0x1f8>
        return ret;
 8005a46:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005a4a:	e01e      	b.n	8005a8a <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	4618      	mov	r0, r3
 8005a64:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8005a66:	2300      	movs	r3, #0
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	9000      	str	r0, [sp, #0]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a70:	f002 f9c8 	bl	8007e04 <CO_CANtxBufferInit>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	629a      	str	r2, [r3, #40]	@ 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005a82:	f04f 33ff 	mov.w	r3, #4294967295
 8005a86:	e000      	b.n	8005a8a <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	080022ad 	.word	0x080022ad
 8005a98:	08005609 	.word	0x08005609
 8005a9c:	08005795 	.word	0x08005795
 8005aa0:	0800557b 	.word	0x0800557b

08005aa4 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	@ 0x28
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8088 	beq.w	8005bce <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d902      	bls.n	8005ad8 <CO_SYNC_process+0x34>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <CO_SYNC_process+0x5c>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	e000      	b.n	8005b02 <CO_SYNC_process+0x5e>
 8005b00:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8005b02:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d031      	beq.n	8005b6e <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d828      	bhi.n	8005b6e <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fcf8 	bl	8005516 <CO_SYNCsend>
 8005b26:	e022      	b.n	8005b6e <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	7c1b      	ldrb	r3, [r3, #16]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d11e      	bne.n	8005b6e <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4413      	add	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d202      	bcs.n	8005b48 <CO_SYNC_process+0xa4>
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d20d      	bcs.n	8005b6e <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8005b60:	2218      	movs	r2, #24
 8005b62:	2101      	movs	r1, #1
 8005b64:	f7fb fd90 	bl	8001688 <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d015      	beq.n	8005ba2 <CO_SYNC_process+0xfe>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d010      	beq.n	8005ba2 <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d909      	bls.n	8005ba2 <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8005b96:	2302      	movs	r3, #2
 8005b98:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	615a      	str	r2, [r3, #20]
 8005ba0:	e002      	b.n	8005ba8 <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	7a1b      	ldrb	r3, [r3, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01a      	beq.n	8005be6 <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	7a1b      	ldrb	r3, [r3, #8]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	f248 2340 	movw	r3, #33344	@ 0x8240
 8005bbe:	2219      	movs	r2, #25
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	f7fb fd61 	bl	8001688 <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	721a      	strb	r2, [r3, #8]
 8005bcc:	e00b      	b.n	8005be6 <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8005be6:	7ffb      	ldrb	r3, [r7, #31]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10f      	bne.n	8005c0c <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	7c1b      	ldrb	r3, [r3, #16]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d108      	bne.n	8005c06 <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2218      	movs	r2, #24
 8005c00:	2100      	movs	r1, #0
 8005c02:	f7fb fd41 	bl	8001688 <CO_error>
        }
        SYNC->timeoutError = 1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8005c0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	81fb      	strh	r3, [r7, #14]
 8005c26:	89fb      	ldrh	r3, [r7, #14]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <OD_getIndex+0x14>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	e000      	b.n	8005c66 <OD_getIndex+0x16>
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <OD_extension_init>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <OD_extension_init+0x14>
 8005c82:	2305      	movs	r3, #5
 8005c84:	e003      	b.n	8005c8e <OD_extension_init+0x1c>
    entry->extension = extension;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <OD_get_u32>:
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	af02      	add	r7, sp, #8
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005caa:	7af9      	ldrb	r1, [r7, #11]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7fc fd37 	bl	8002728 <OD_get_value>
 8005cba:	4603      	mov	r3, r0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	791b      	ldrb	r3, [r3, #4]
 8005cd6:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	3305      	adds	r3, #5
 8005cdc:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005cde:	7cfb      	ldrb	r3, [r7, #19]
 8005ce0:	2b06      	cmp	r3, #6
 8005ce2:	d108      	bne.n	8005cf6 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2206      	movs	r2, #6
 8005ce8:	68f9      	ldr	r1, [r7, #12]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f00c fd53 	bl	8012796 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8005cf6:	bf00      	nop
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00c      	beq.n	8005d2e <OD_write_1012+0x2e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	7c5b      	ldrb	r3, [r3, #17]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <OD_write_1012+0x2e>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d102      	bne.n	8005d2e <OD_write_1012+0x2e>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005d2e:	2309      	movs	r3, #9
 8005d30:	e051      	b.n	8005dd6 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005d38:	68b8      	ldr	r0, [r7, #8]
 8005d3a:	f7ff ff7b 	bl	8005c34 <CO_getUint32>
 8005d3e:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d48:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4b24      	ldr	r3, [pc, #144]	@ (8005de0 <OD_write_1012+0xe0>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d126      	bne.n	8005da2 <OD_write_1012+0xa2>
 8005d54:	8afb      	ldrh	r3, [r7, #22]
 8005d56:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d58:	d923      	bls.n	8005da2 <OD_write_1012+0xa2>
 8005d5a:	8afb      	ldrh	r3, [r7, #22]
 8005d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d60:	d903      	bls.n	8005d6a <OD_write_1012+0x6a>
 8005d62:	8afb      	ldrh	r3, [r7, #22]
 8005d64:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8005d68:	d91b      	bls.n	8005da2 <OD_write_1012+0xa2>
 8005d6a:	8afb      	ldrh	r3, [r7, #22]
 8005d6c:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8005d70:	d903      	bls.n	8005d7a <OD_write_1012+0x7a>
 8005d72:	8afb      	ldrh	r3, [r7, #22]
 8005d74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d78:	d313      	bcc.n	8005da2 <OD_write_1012+0xa2>
 8005d7a:	8afb      	ldrh	r3, [r7, #22]
 8005d7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d80:	d903      	bls.n	8005d8a <OD_write_1012+0x8a>
 8005d82:	8afb      	ldrh	r3, [r7, #22]
 8005d84:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8005d88:	d30b      	bcc.n	8005da2 <OD_write_1012+0xa2>
 8005d8a:	8afb      	ldrh	r3, [r7, #22]
 8005d8c:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8005d90:	d303      	bcc.n	8005d9a <OD_write_1012+0x9a>
 8005d92:	8afb      	ldrh	r3, [r7, #22]
 8005d94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d98:	d303      	bcc.n	8005da2 <OD_write_1012+0xa2>
 8005d9a:	8afb      	ldrh	r3, [r7, #22]
 8005d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005da0:	d901      	bls.n	8005da6 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8005da2:	230f      	movs	r3, #15
 8005da4:	e017      	b.n	8005dd6 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	0fdb      	lsrs	r3, r3, #31
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf14      	ite	ne
 8005dbc:	2301      	movne	r3, #1
 8005dbe:	2300      	moveq	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7fc fac4 	bl	800235c <OD_writeOriginal>
 8005dd4:	4603      	mov	r3, r0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	3ffff800 	.word	0x3ffff800

08005de4 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08c      	sub	sp, #48	@ 0x30
 8005de8:	af04      	add	r7, sp, #16
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <CO_TIME_init+0x20>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <CO_TIME_init+0x20>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
 8005e08:	e061      	b.n	8005ece <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8005e0a:	222c      	movs	r2, #44	@ 0x2c
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f00c fc32 	bl	8012678 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8005e14:	f107 0214 	add.w	r2, r7, #20
 8005e18:	2301      	movs	r3, #1
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	68b8      	ldr	r0, [r7, #8]
 8005e1e:	f7ff ff3c 	bl	8005c9a <OD_get_u32>
 8005e22:	4603      	mov	r3, r0
 8005e24:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8005e26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <CO_TIME_init+0x5e>
 8005e34:	68b8      	ldr	r0, [r7, #8]
 8005e36:	f7ff ff0b 	bl	8005c50 <OD_getIndex>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005e42:	f06f 030b 	mvn.w	r3, #11
 8005e46:	e042      	b.n	8005ece <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a21      	ldr	r2, [pc, #132]	@ (8005ed8 <CO_TIME_init+0xf4>)
 8005e52:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a21      	ldr	r2, [pc, #132]	@ (8005edc <CO_TIME_init+0xf8>)
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	331c      	adds	r3, #28
 8005e5e:	4619      	mov	r1, r3
 8005e60:	68b8      	ldr	r0, [r7, #8]
 8005e62:	f7ff ff06 	bl	8005c72 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e6e:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	0fdb      	lsrs	r3, r3, #31
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bf14      	ite	ne
 8005e86:	2301      	movne	r3, #1
 8005e88:	2300      	moveq	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005ea0:	8bba      	ldrh	r2, [r7, #28]
 8005ea2:	8879      	ldrh	r1, [r7, #2]
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <CO_TIME_init+0xfc>)
 8005ea6:	9302      	str	r3, [sp, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	2300      	movs	r3, #0
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f001 ff47 	bl	8007d48 <CO_CANrxBufferInit>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8005ebe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <CO_TIME_init+0xe8>
            return ret;
 8005ec6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005eca:	e000      	b.n	8005ece <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	080022ad 	.word	0x080022ad
 8005edc:	08005d01 	.word	0x08005d01
 8005ee0:	08005cc5 	.word	0x08005cc5

08005ee4 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	@ 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d024      	beq.n	8005f44 <CO_TIME_process+0x60>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01f      	beq.n	8005f4a <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fe91 	bl	8005c34 <CO_getUint32>
 8005f12:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fe7c 	bl	8005c16 <CO_getUint16>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8bfa      	ldrh	r2, [r7, #30]
 8005f30:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005f42:	e002      	b.n	8005f4a <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d132      	bne.n	8005fba <CO_TIME_process+0xd6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02f      	beq.n	8005fba <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	89db      	ldrh	r3, [r3, #14]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4413      	add	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4a16      	ldr	r2, [pc, #88]	@ (8005fc4 <CO_TIME_process+0xe0>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	099b      	lsrs	r3, r3, #6
 8005f70:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4b13      	ldr	r3, [pc, #76]	@ (8005fc4 <CO_TIME_process+0xe0>)
 8005f76:	fba3 1302 	umull	r1, r3, r3, r2
 8005f7a:	099b      	lsrs	r3, r3, #6
 8005f7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	441a      	add	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005fc8 <CO_TIME_process+0xe4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d90b      	bls.n	8005fba <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <CO_TIME_process+0xe8>)
 8005fa8:	4413      	add	r3, r2
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	899b      	ldrh	r3, [r3, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3728      	adds	r7, #40	@ 0x28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	10624dd3 	.word	0x10624dd3
 8005fc8:	05265bff 	.word	0x05265bff
 8005fcc:	fad9a400 	.word	0xfad9a400

08005fd0 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d102      	bne.n	8005fe8 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe6:	e006      	b.n	8005ff6 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005fe8:	220c      	movs	r2, #12
 8005fea:	2100      	movs	r1, #0
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f00c fb43 	bl	8012678 <memset>

    return ret;
 8005ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8006000:	b480      	push	{r7}
 8006002:	b089      	sub	sp, #36	@ 0x24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8006018:	2300      	movs	r3, #0
 800601a:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 8006028:	e112      	b.n	8006250 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	7a5b      	ldrb	r3, [r3, #9]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	613b      	str	r3, [r7, #16]

        tick = true;
 800603e:	2301      	movs	r3, #1
 8006040:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 800604a:	3b50      	subs	r3, #80	@ 0x50
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	791b      	ldrb	r3, [r3, #4]
 8006054:	3301      	adds	r3, #1
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	711a      	strb	r2, [r3, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	791b      	ldrb	r3, [r3, #4]
 8006060:	2b03      	cmp	r3, #3
 8006062:	f240 80dd 	bls.w	8006220 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	77bb      	strb	r3, [r7, #30]
 8006070:	7fbb      	ldrb	r3, [r7, #30]
 8006072:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	7a5b      	ldrb	r3, [r3, #9]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <CO_LEDs_process+0x8a>
 8006080:	7ffb      	ldrb	r3, [r7, #31]
 8006082:	f043 0302 	orr.w	r3, r3, #2
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e003      	b.n	8006092 <CO_LEDs_process+0x92>
            else                                    gr |= CO_LED_blink;
 800608a:	7fbb      	ldrb	r3, [r7, #30]
 800608c:	f043 0302 	orr.w	r3, r3, #2
 8006090:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	795b      	ldrb	r3, [r3, #5]
 8006096:	3301      	adds	r3, #1
 8006098:	b2da      	uxtb	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	715a      	strb	r2, [r3, #5]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	795b      	ldrb	r3, [r3, #5]
 80060a2:	2b06      	cmp	r3, #6
 80060a4:	d010      	beq.n	80060c8 <CO_LEDs_process+0xc8>
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	dc12      	bgt.n	80060d0 <CO_LEDs_process+0xd0>
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d002      	beq.n	80060b4 <CO_LEDs_process+0xb4>
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d005      	beq.n	80060be <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 80060b2:	e00d      	b.n	80060d0 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 80060b4:	7ffb      	ldrb	r3, [r7, #31]
 80060b6:	f043 0304 	orr.w	r3, r3, #4
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e009      	b.n	80060d2 <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 80060be:	7fbb      	ldrb	r3, [r7, #30]
 80060c0:	f043 0304 	orr.w	r3, r3, #4
 80060c4:	77bb      	strb	r3, [r7, #30]
 80060c6:	e004      	b.n	80060d2 <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	715a      	strb	r2, [r3, #5]
 80060ce:	e000      	b.n	80060d2 <CO_LEDs_process+0xd2>
                default: break;
 80060d0:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	799b      	ldrb	r3, [r3, #6]
 80060d6:	3301      	adds	r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	719a      	strb	r2, [r3, #6]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	799b      	ldrb	r3, [r3, #6]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	2b07      	cmp	r3, #7
 80060e6:	d821      	bhi.n	800612c <CO_LEDs_process+0x12c>
 80060e8:	a201      	add	r2, pc, #4	@ (adr r2, 80060f0 <CO_LEDs_process+0xf0>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006111 	.word	0x08006111
 80060f4:	0800611b 	.word	0x0800611b
 80060f8:	08006111 	.word	0x08006111
 80060fc:	0800611b 	.word	0x0800611b
 8006100:	0800612d 	.word	0x0800612d
 8006104:	0800612d 	.word	0x0800612d
 8006108:	0800612d 	.word	0x0800612d
 800610c:	08006125 	.word	0x08006125
                case 1: case 3: rd |= CO_LED_flash_2; break;
 8006110:	7ffb      	ldrb	r3, [r7, #31]
 8006112:	f043 0308 	orr.w	r3, r3, #8
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e009      	b.n	800612e <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 800611a:	7fbb      	ldrb	r3, [r7, #30]
 800611c:	f043 0308 	orr.w	r3, r3, #8
 8006120:	77bb      	strb	r3, [r7, #30]
 8006122:	e004      	b.n	800612e <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	719a      	strb	r2, [r3, #6]
 800612a:	e000      	b.n	800612e <CO_LEDs_process+0x12e>
                default: break;
 800612c:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	79db      	ldrb	r3, [r3, #7]
 8006132:	3301      	adds	r3, #1
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	71da      	strb	r2, [r3, #7]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	79db      	ldrb	r3, [r3, #7]
 800613e:	2b0a      	cmp	r3, #10
 8006140:	bf8c      	ite	hi
 8006142:	2201      	movhi	r2, #1
 8006144:	2200      	movls	r2, #0
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	2a00      	cmp	r2, #0
 800614a:	d12c      	bne.n	80061a6 <CO_LEDs_process+0x1a6>
 800614c:	2201      	movs	r2, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	f003 0254 	and.w	r2, r3, #84	@ 0x54
 8006156:	2a00      	cmp	r2, #0
 8006158:	bf14      	ite	ne
 800615a:	2201      	movne	r2, #1
 800615c:	2200      	moveq	r2, #0
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	2a00      	cmp	r2, #0
 8006162:	d117      	bne.n	8006194 <CO_LEDs_process+0x194>
 8006164:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 8006168:	2a00      	cmp	r2, #0
 800616a:	bf14      	ite	ne
 800616c:	2201      	movne	r2, #1
 800616e:	2200      	moveq	r2, #0
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	2a00      	cmp	r2, #0
 8006174:	d109      	bne.n	800618a <CO_LEDs_process+0x18a>
 8006176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800617a:	2b00      	cmp	r3, #0
 800617c:	bf14      	ite	ne
 800617e:	2301      	movne	r3, #1
 8006180:	2300      	moveq	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <CO_LEDs_process+0x19e>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: break;
 8006188:	e00d      	b.n	80061a6 <CO_LEDs_process+0x1a6>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 800618a:	7ffb      	ldrb	r3, [r7, #31]
 800618c:	f043 0310 	orr.w	r3, r3, #16
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e009      	b.n	80061a8 <CO_LEDs_process+0x1a8>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8006194:	7fbb      	ldrb	r3, [r7, #30]
 8006196:	f043 0310 	orr.w	r3, r3, #16
 800619a:	77bb      	strb	r3, [r7, #30]
 800619c:	e004      	b.n	80061a8 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	71da      	strb	r2, [r3, #7]
 80061a4:	e000      	b.n	80061a8 <CO_LEDs_process+0x1a8>
                default: break;
 80061a6:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	7a1b      	ldrb	r3, [r3, #8]
 80061ac:	3301      	adds	r3, #1
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	721a      	strb	r2, [r3, #8]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	7a1b      	ldrb	r3, [r3, #8]
 80061b8:	2b0c      	cmp	r3, #12
 80061ba:	bf8c      	ite	hi
 80061bc:	2201      	movhi	r2, #1
 80061be:	2200      	movls	r2, #0
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	2a00      	cmp	r2, #0
 80061c4:	d137      	bne.n	8006236 <CO_LEDs_process+0x236>
 80061c6:	2201      	movs	r2, #1
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	bf14      	ite	ne
 80061d4:	2201      	movne	r2, #1
 80061d6:	2200      	moveq	r2, #0
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	2a00      	cmp	r2, #0
 80061dc:	d117      	bne.n	800620e <CO_LEDs_process+0x20e>
 80061de:	f003 02aa 	and.w	r2, r3, #170	@ 0xaa
 80061e2:	2a00      	cmp	r2, #0
 80061e4:	bf14      	ite	ne
 80061e6:	2201      	movne	r2, #1
 80061e8:	2200      	moveq	r2, #0
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	2a00      	cmp	r2, #0
 80061ee:	d109      	bne.n	8006204 <CO_LEDs_process+0x204>
 80061f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf14      	ite	ne
 80061f8:	2301      	movne	r3, #1
 80061fa:	2300      	moveq	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <CO_LEDs_process+0x218>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: break;
 8006202:	e018      	b.n	8006236 <CO_LEDs_process+0x236>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 8006204:	7ffb      	ldrb	r3, [r7, #31]
 8006206:	f043 0320 	orr.w	r3, r3, #32
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e014      	b.n	8006238 <CO_LEDs_process+0x238>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 800620e:	7fbb      	ldrb	r3, [r7, #30]
 8006210:	f043 0320 	orr.w	r3, r3, #32
 8006214:	77bb      	strb	r3, [r7, #30]
 8006216:	e00f      	b.n	8006238 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	721a      	strb	r2, [r3, #8]
 800621e:	e00b      	b.n	8006238 <CO_LEDs_process+0x238>
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	7a5b      	ldrb	r3, [r3, #9]
 8006224:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006228:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	7a9b      	ldrb	r3, [r3, #10]
 800622e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006232:	77bb      	strb	r3, [r7, #30]
 8006234:	e000      	b.n	8006238 <CO_LEDs_process+0x238>
                default: break;
 8006236:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <CO_LEDs_process+0x248>
 800623e:	7ffb      	ldrb	r3, [r7, #31]
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e003      	b.n	8006250 <CO_LEDs_process+0x250>
        else               gr |= CO_LED_flicker;
 8006248:	7fbb      	ldrb	r3, [r7, #30]
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8006258:	4293      	cmp	r3, r2
 800625a:	f63f aee6 	bhi.w	800602a <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d077      	beq.n	8006354 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <CO_LEDs_process+0x270>
 800626a:	2301      	movs	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
 800626e:	e032      	b.n	80062d6 <CO_LEDs_process+0x2d6>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8006270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <CO_LEDs_process+0x282>
 8006278:	7ffb      	ldrb	r3, [r7, #31]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	75fb      	strb	r3, [r7, #23]
 8006280:	e029      	b.n	80062d6 <CO_LEDs_process+0x2d6>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <CO_LEDs_process+0x292>
 8006288:	7ffb      	ldrb	r3, [r7, #31]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	75fb      	strb	r3, [r7, #23]
 8006290:	e021      	b.n	80062d6 <CO_LEDs_process+0x2d6>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 8006292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <CO_LEDs_process+0x2a2>
 8006298:	7ffb      	ldrb	r3, [r7, #31]
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	75fb      	strb	r3, [r7, #23]
 80062a0:	e019      	b.n	80062d6 <CO_LEDs_process+0x2d6>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 80062a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d004      	beq.n	80062b2 <CO_LEDs_process+0x2b2>
 80062a8:	7ffb      	ldrb	r3, [r7, #31]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	75fb      	strb	r3, [r7, #23]
 80062b0:	e011      	b.n	80062d6 <CO_LEDs_process+0x2d6>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 80062b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <CO_LEDs_process+0x2c2>
 80062b8:	7ffb      	ldrb	r3, [r7, #31]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	75fb      	strb	r3, [r7, #23]
 80062c0:	e009      	b.n	80062d6 <CO_LEDs_process+0x2d6>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 80062c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <CO_LEDs_process+0x2d2>
 80062c8:	7ffb      	ldrb	r3, [r7, #31]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	75fb      	strb	r3, [r7, #23]
 80062d0:	e001      	b.n	80062d6 <CO_LEDs_process+0x2d6>
        else                                        rd_co = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <CO_LEDs_process+0x2e6>
 80062dc:	7fbb      	ldrb	r3, [r7, #30]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	75bb      	strb	r3, [r7, #22]
 80062e4:	e022      	b.n	800632c <CO_LEDs_process+0x32c>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 80062e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <CO_LEDs_process+0x2f6>
 80062ec:	7fbb      	ldrb	r3, [r7, #30]
 80062ee:	f003 0310 	and.w	r3, r3, #16
 80062f2:	75bb      	strb	r3, [r7, #22]
 80062f4:	e01a      	b.n	800632c <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 80062f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d104      	bne.n	8006308 <CO_LEDs_process+0x308>
 80062fe:	7fbb      	ldrb	r3, [r7, #30]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	75bb      	strb	r3, [r7, #22]
 8006306:	e011      	b.n	800632c <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8006308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630c:	2b7f      	cmp	r3, #127	@ 0x7f
 800630e:	d104      	bne.n	800631a <CO_LEDs_process+0x31a>
 8006310:	7fbb      	ldrb	r3, [r7, #30]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	75bb      	strb	r3, [r7, #22]
 8006318:	e008      	b.n	800632c <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 800631a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631e:	2b05      	cmp	r3, #5
 8006320:	d102      	bne.n	8006328 <CO_LEDs_process+0x328>
 8006322:	2301      	movs	r3, #1
 8006324:	75bb      	strb	r3, [r7, #22]
 8006326:	e001      	b.n	800632c <CO_LEDs_process+0x32c>
        else                                        gr_co = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <CO_LEDs_process+0x33a>
 8006332:	7ffb      	ldrb	r3, [r7, #31]
 8006334:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006338:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 800633a:	7dbb      	ldrb	r3, [r7, #22]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <CO_LEDs_process+0x348>
 8006340:	7fbb      	ldrb	r3, [r7, #30]
 8006342:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006346:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	7ffa      	ldrb	r2, [r7, #31]
 800634c:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	7fba      	ldrb	r2, [r7, #30]
 8006352:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8006354:	bf00      	nop
 8006356:	3724      	adds	r7, #36	@ 0x24
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b090      	sub	sp, #64	@ 0x40
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	791b      	ldrb	r3, [r3, #4]
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8006376:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800637a:	2b08      	cmp	r3, #8
 800637c:	f040 814c 	bne.w	8006618 <CO_LSSslave_receive+0x2b8>
 8006380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 8147 	bne.w	8006618 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 800638a:	2300      	movs	r3, #0
 800638c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	3305      	adds	r3, #5
 8006392:	62fb      	str	r3, [r7, #44]	@ 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8006394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 800639c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d12c      	bne.n	80063fe <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 80063a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 80063aa:	7ffb      	ldrb	r3, [r7, #31]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <CO_LSSslave_receive+0x56>
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d020      	beq.n	80063f6 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 80063b4:	e12a      	b.n	800660c <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 80063b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b8:	7c1b      	ldrb	r3, [r3, #16]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d110      	bne.n	80063e0 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 80063c4:	2bff      	cmp	r3, #255	@ 0xff
 80063c6:	d10b      	bne.n	80063e0 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 80063c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063cc:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80063ce:	2bff      	cmp	r3, #255	@ 0xff
 80063d0:	d006      	beq.n	80063e0 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 80063d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80063d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 80063dc:	2301      	movs	r3, #1
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	2200      	movs	r2, #0
 80063e4:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 80063e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e8:	3314      	adds	r3, #20
 80063ea:	2210      	movs	r2, #16
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f00c f942 	bl	8012678 <memset>
                    break;
 80063f4:	e10a      	b.n	800660c <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80063f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f8:	2201      	movs	r2, #1
 80063fa:	741a      	strb	r2, [r3, #16]
                    break;
 80063fc:	e106      	b.n	800660c <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80063fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006400:	7c1b      	ldrb	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 80ee 	bne.w	80065e4 <CO_LSSslave_receive+0x284>
            switch (cs) {
 8006408:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800640c:	3b40      	subs	r3, #64	@ 0x40
 800640e:	2b11      	cmp	r3, #17
 8006410:	f200 80f7 	bhi.w	8006602 <CO_LSSslave_receive+0x2a2>
 8006414:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <CO_LSSslave_receive+0xbc>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006465 	.word	0x08006465
 8006420:	08006475 	.word	0x08006475
 8006424:	08006485 	.word	0x08006485
 8006428:	08006495 	.word	0x08006495
 800642c:	08006603 	.word	0x08006603
 8006430:	08006603 	.word	0x08006603
 8006434:	08006603 	.word	0x08006603
 8006438:	08006603 	.word	0x08006603
 800643c:	08006603 	.word	0x08006603
 8006440:	08006603 	.word	0x08006603
 8006444:	08006603 	.word	0x08006603
 8006448:	08006603 	.word	0x08006603
 800644c:	08006603 	.word	0x08006603
 8006450:	08006603 	.word	0x08006603
 8006454:	08006603 	.word	0x08006603
 8006458:	08006603 	.word	0x08006603
 800645c:	08006603 	.word	0x08006603
 8006460:	080064f1 	.word	0x080064f1
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006466:	3301      	adds	r3, #1
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006470:	615a      	str	r2, [r3, #20]
                break;
 8006472:	e0cb      	b.n	800660c <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006476:	3301      	adds	r3, #1
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006480:	619a      	str	r2, [r3, #24]
                break;
 8006482:	e0c3      	b.n	800660c <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	3301      	adds	r3, #1
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006490:	61da      	str	r2, [r3, #28]
                break;
 8006492:	e0bb      	b.n	800660c <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	3301      	adds	r3, #1
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a0:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 80064a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	f040 80ab 	bne.w	8006606 <CO_LSSslave_receive+0x2a6>
 80064b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	f040 80a4 	bne.w	8006606 <CO_LSSslave_receive+0x2a6>
 80064be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	f040 809d 	bne.w	8006606 <CO_LSSslave_receive+0x2a6>
 80064cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	f040 8096 	bne.w	8006606 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80064da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064dc:	2201      	movs	r2, #1
 80064de:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 80064e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80064e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                    request_LSSslave_process = true;
 80064ea:	2301      	movs	r3, #1
 80064ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
                break;
 80064ee:	e08a      	b.n	8006606 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80064f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2bff      	cmp	r3, #255	@ 0xff
 80064f8:	f040 8087 	bne.w	800660a <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80064fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8006502:	2bff      	cmp	r3, #255	@ 0xff
 8006504:	f040 8081 	bne.w	800660a <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8006508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650a:	795b      	ldrb	r3, [r3, #5]
 800650c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                    uint8_t lssSub = data[6];
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006512:	799b      	ldrb	r3, [r3, #6]
 8006514:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    uint8_t lssNext = data[7];
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	79db      	ldrb	r3, [r3, #7]
 800651c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 8006520:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006524:	2b1f      	cmp	r3, #31
 8006526:	d903      	bls.n	8006530 <CO_LSSslave_receive+0x1d0>
 8006528:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800652c:	2b80      	cmp	r3, #128	@ 0x80
 800652e:	d16d      	bne.n	800660c <CO_LSSslave_receive+0x2ac>
 8006530:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006534:	2b03      	cmp	r3, #3
 8006536:	d869      	bhi.n	800660c <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8006538:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800653c:	2b03      	cmp	r3, #3
 800653e:	d865      	bhi.n	800660c <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8006540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006542:	3301      	adds	r3, #1
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
                    ack = false;
 800654c:	2300      	movs	r3, #0
 800654e:	63bb      	str	r3, [r7, #56]	@ 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8006550:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006554:	2b80      	cmp	r3, #128	@ 0x80
 8006556:	d10d      	bne.n	8006574 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8006558:	2301      	movs	r3, #1
 800655a:	63bb      	str	r3, [r7, #56]	@ 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800655c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8006564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006566:	3324      	adds	r3, #36	@ 0x24
 8006568:	2210      	movs	r2, #16
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f00c f883 	bl	8012678 <memset>
 8006572:	e02c      	b.n	80065ce <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8006574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006576:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800657a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800657e:	429a      	cmp	r2, r3
 8006580:	d125      	bne.n	80065ce <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8006582:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006586:	f04f 32ff 	mov.w	r2, #4294967295
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8006590:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8006594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006596:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	405a      	eors	r2, r3
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d113      	bne.n	80065ce <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 80065a6:	2301      	movs	r3, #1
 80065a8:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = lssNext;
 80065aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80065b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 80065b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d108      	bne.n	80065ce <CO_LSSslave_receive+0x26e>
 80065bc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80065c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d202      	bcs.n	80065ce <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80065c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ca:	2201      	movs	r2, #1
 80065cc:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01a      	beq.n	800660a <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 80065d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80065da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 80065de:	2301      	movs	r3, #1
 80065e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                    }
                }
                break;
 80065e2:	e012      	b.n	800660a <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 80065e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e6:	3349      	adds	r3, #73	@ 0x49
 80065e8:	2208      	movs	r2, #8
 80065ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065ec:	4618      	mov	r0, r3
 80065ee:	f00c f8d2 	bl	8012796 <memcpy>
            LSSslave->service = cs;
 80065f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80065f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 80065fc:	2301      	movs	r3, #1
 80065fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006600:	e004      	b.n	800660c <CO_LSSslave_receive+0x2ac>
                break;
 8006602:	bf00      	nop
 8006604:	e002      	b.n	800660c <CO_LSSslave_receive+0x2ac>
                break;
 8006606:	bf00      	nop
 8006608:	e000      	b.n	800660c <CO_LSSslave_receive+0x2ac>
                break;
 800660a:	bf00      	nop
        }

        if (request_LSSslave_process) {
 800660c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	2201      	movs	r2, #1
 8006616:	645a      	str	r2, [r3, #68]	@ 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8006618:	bf00      	nop
 800661a:	3740      	adds	r7, #64	@ 0x40
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	@ 0x28
 8006624:	af04      	add	r7, sp, #16
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d018      	beq.n	800666a <CO_LSSslave_init+0x4a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d015      	beq.n	800666a <CO_LSSslave_init+0x4a>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d012      	beq.n	800666a <CO_LSSslave_init+0x4a>
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00f      	beq.n	800666a <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8006654:	2b00      	cmp	r3, #0
 8006656:	d004      	beq.n	8006662 <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	b25b      	sxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	da06      	bge.n	8006670 <CO_LSSslave_init+0x50>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2bff      	cmp	r3, #255	@ 0xff
 8006668:	d002      	beq.n	8006670 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800666a:	f04f 33ff 	mov.w	r3, #4294967295
 800666e:	e046      	b.n	80066fe <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8006670:	2274      	movs	r2, #116	@ 0x74
 8006672:	2100      	movs	r1, #0
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f00b ffff 	bl	8012678 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2210      	movs	r2, #16
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	4618      	mov	r0, r3
 8006682:	f00c f888 	bl	8012796 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 80066b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80066b2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80066b4:	4b14      	ldr	r3, [pc, #80]	@ (8006708 <CO_LSSslave_init+0xe8>)
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	2300      	movs	r3, #0
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80066c4:	6a38      	ldr	r0, [r7, #32]
 80066c6:	f001 fb3f 	bl	8007d48 <CO_CANrxBufferInit>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 80066d4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80066d6:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80066d8:	2300      	movs	r3, #0
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	2308      	movs	r3, #8
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	2300      	movs	r3, #0
 80066e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066e4:	f001 fb8e 	bl	8007e04 <CO_CANtxBufferInit>
 80066e8:	4602      	mov	r2, r0
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	671a      	str	r2, [r3, #112]	@ 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80066f6:	23ff      	movs	r3, #255	@ 0xff
 80066f8:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 80066fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	08006361 	.word	0x08006361

0800670c <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b08c      	sub	sp, #48	@ 0x30
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8006714:	2300      	movs	r3, #0
 8006716:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8202 	beq.w	8006b26 <CO_LSSslave_process+0x41a>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8006722:	2300      	movs	r3, #0
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672a:	3305      	adds	r3, #5
 800672c:	2208      	movs	r2, #8
 800672e:	2100      	movs	r1, #0
 8006730:	4618      	mov	r0, r3
 8006732:	f00b ffa1 	bl	8012678 <memset>

        switch (LSSslave->service) {
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800673c:	3b04      	subs	r3, #4
 800673e:	2b5a      	cmp	r3, #90	@ 0x5a
 8006740:	f200 81dc 	bhi.w	8006afc <CO_LSSslave_process+0x3f0>
 8006744:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <CO_LSSslave_process+0x40>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	080068b9 	.word	0x080068b9
 8006750:	08006afd 	.word	0x08006afd
 8006754:	08006afd 	.word	0x08006afd
 8006758:	08006afd 	.word	0x08006afd
 800675c:	08006afd 	.word	0x08006afd
 8006760:	08006afd 	.word	0x08006afd
 8006764:	08006afd 	.word	0x08006afd
 8006768:	08006afd 	.word	0x08006afd
 800676c:	08006afd 	.word	0x08006afd
 8006770:	08006afd 	.word	0x08006afd
 8006774:	08006afd 	.word	0x08006afd
 8006778:	08006afd 	.word	0x08006afd
 800677c:	08006afd 	.word	0x08006afd
 8006780:	080068cd 	.word	0x080068cd
 8006784:	08006afd 	.word	0x08006afd
 8006788:	0800691b 	.word	0x0800691b
 800678c:	08006afd 	.word	0x08006afd
 8006790:	080069b7 	.word	0x080069b7
 8006794:	08006afd 	.word	0x08006afd
 8006798:	080069f3 	.word	0x080069f3
 800679c:	08006afd 	.word	0x08006afd
 80067a0:	08006afd 	.word	0x08006afd
 80067a4:	08006afd 	.word	0x08006afd
 80067a8:	08006afd 	.word	0x08006afd
 80067ac:	08006afd 	.word	0x08006afd
 80067b0:	08006afd 	.word	0x08006afd
 80067b4:	08006afd 	.word	0x08006afd
 80067b8:	08006afd 	.word	0x08006afd
 80067bc:	08006afd 	.word	0x08006afd
 80067c0:	08006afd 	.word	0x08006afd
 80067c4:	08006afd 	.word	0x08006afd
 80067c8:	08006afd 	.word	0x08006afd
 80067cc:	08006afd 	.word	0x08006afd
 80067d0:	08006afd 	.word	0x08006afd
 80067d4:	08006afd 	.word	0x08006afd
 80067d8:	08006afd 	.word	0x08006afd
 80067dc:	08006afd 	.word	0x08006afd
 80067e0:	08006afd 	.word	0x08006afd
 80067e4:	08006afd 	.word	0x08006afd
 80067e8:	08006afd 	.word	0x08006afd
 80067ec:	08006afd 	.word	0x08006afd
 80067f0:	08006afd 	.word	0x08006afd
 80067f4:	08006afd 	.word	0x08006afd
 80067f8:	08006afd 	.word	0x08006afd
 80067fc:	08006afd 	.word	0x08006afd
 8006800:	08006afd 	.word	0x08006afd
 8006804:	08006afd 	.word	0x08006afd
 8006808:	08006afd 	.word	0x08006afd
 800680c:	08006afd 	.word	0x08006afd
 8006810:	08006afd 	.word	0x08006afd
 8006814:	08006afd 	.word	0x08006afd
 8006818:	08006afd 	.word	0x08006afd
 800681c:	08006afd 	.word	0x08006afd
 8006820:	08006afd 	.word	0x08006afd
 8006824:	08006afd 	.word	0x08006afd
 8006828:	08006afd 	.word	0x08006afd
 800682c:	08006afd 	.word	0x08006afd
 8006830:	08006afd 	.word	0x08006afd
 8006834:	08006afd 	.word	0x08006afd
 8006838:	08006afd 	.word	0x08006afd
 800683c:	08006afd 	.word	0x08006afd
 8006840:	08006afd 	.word	0x08006afd
 8006844:	08006afd 	.word	0x08006afd
 8006848:	080068bf 	.word	0x080068bf
 800684c:	08006afd 	.word	0x08006afd
 8006850:	08006afd 	.word	0x08006afd
 8006854:	08006afd 	.word	0x08006afd
 8006858:	08006afd 	.word	0x08006afd
 800685c:	08006afd 	.word	0x08006afd
 8006860:	08006afd 	.word	0x08006afd
 8006864:	08006afd 	.word	0x08006afd
 8006868:	08006afd 	.word	0x08006afd
 800686c:	08006afd 	.word	0x08006afd
 8006870:	08006afd 	.word	0x08006afd
 8006874:	08006afd 	.word	0x08006afd
 8006878:	08006afd 	.word	0x08006afd
 800687c:	08006afd 	.word	0x08006afd
 8006880:	08006aef 	.word	0x08006aef
 8006884:	08006afd 	.word	0x08006afd
 8006888:	08006afd 	.word	0x08006afd
 800688c:	08006afd 	.word	0x08006afd
 8006890:	08006afd 	.word	0x08006afd
 8006894:	08006afd 	.word	0x08006afd
 8006898:	08006afd 	.word	0x08006afd
 800689c:	08006afd 	.word	0x08006afd
 80068a0:	08006afd 	.word	0x08006afd
 80068a4:	08006a49 	.word	0x08006a49
 80068a8:	08006a6b 	.word	0x08006a6b
 80068ac:	08006a8d 	.word	0x08006a8d
 80068b0:	08006aaf 	.word	0x08006aaf
 80068b4:	08006ad1 	.word	0x08006ad1
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 80068b8:	2301      	movs	r3, #1
 80068ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80068bc:	e125      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c2:	2244      	movs	r2, #68	@ 0x44
 80068c4:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 80068c6:	2301      	movs	r3, #1
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80068ca:	e11e      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80068d2:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 80068da:	7cfb      	ldrb	r3, [r7, #19]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <CO_LSSslave_process+0x1dc>
 80068e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da02      	bge.n	80068ee <CO_LSSslave_process+0x1e2>
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	2bff      	cmp	r3, #255	@ 0xff
 80068ec:	d104      	bne.n	80068f8 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f2:	7cfa      	ldrb	r2, [r7, #19]
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e002      	b.n	80068fe <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006908:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006912:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006914:	2301      	movs	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006918:	e0f7      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80ee 	beq.w	8006b00 <CO_LSSslave_process+0x3f4>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800692a:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006932:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006940:	7f7b      	ldrb	r3, [r7, #29]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d121      	bne.n	800698a <CO_LSSslave_process+0x27e>
 8006946:	7f3b      	ldrb	r3, [r7, #28]
 8006948:	2b05      	cmp	r3, #5
 800694a:	d01e      	beq.n	800698a <CO_LSSslave_process+0x27e>
 800694c:	7f3b      	ldrb	r3, [r7, #28]
 800694e:	2b09      	cmp	r3, #9
 8006950:	d81b      	bhi.n	800698a <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8006952:	7f3b      	ldrb	r3, [r7, #28]
 8006954:	4a76      	ldr	r2, [pc, #472]	@ (8006b30 <CO_LSSslave_process+0x424>)
 8006956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800695a:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006964:	8b79      	ldrh	r1, [r7, #26]
 8006966:	4610      	mov	r0, r2
 8006968:	4798      	blx	r3
 800696a:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	8b7a      	ldrh	r2, [r7, #26]
 8006978:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800697a:	e009      	b.n	8006990 <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 800697c:	23ff      	movs	r3, #255	@ 0xff
 800697e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006988:	e002      	b.n	8006990 <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800699a:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80069a4:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80069ae:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 80069b0:	2301      	movs	r3, #1
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80069b4:	e0a9      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80a2 	beq.w	8006b04 <CO_LSSslave_process+0x3f8>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 809f 	beq.w	8006b08 <CO_LSSslave_process+0x3fc>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80069da:	461a      	mov	r2, r3
 80069dc:	8bfb      	ldrh	r3, [r7, #30]
 80069de:	4313      	orrs	r3, r2
 80069e0:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80069ea:	8bf9      	ldrh	r1, [r7, #30]
 80069ec:	4610      	mov	r0, r2
 80069ee:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 80069f0:	e08a      	b.n	8006b08 <CO_LSSslave_process+0x3fc>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <CO_LSSslave_process+0x2fc>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e011      	b.n	8006a2c <CO_LSSslave_process+0x320>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6e90      	ldr	r0, [r2, #104]	@ 0x68
                                               *LSSslave->pendingNodeID,
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006a14:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006a1a:	8812      	ldrh	r2, [r2, #0]
 8006a1c:	4798      	blx	r3
 8006a1e:	6238      	str	r0, [r7, #32]
                if (!result) {
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <CO_LSSslave_process+0x320>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8006a26:	2302      	movs	r3, #2
 8006a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006a36:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006a40:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006a42:	2301      	movs	r3, #1
 8006a44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006a46:	e060      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006a52:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	3306      	adds	r3, #6
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006a64:	2301      	movs	r3, #1
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006a68:	e04f      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006a74:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a80:	3306      	adds	r3, #6
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006a86:	2301      	movs	r3, #1
 8006a88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006a8a:	e03e      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006a96:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa2:	3306      	adds	r3, #6
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006aac:	e02d      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006ab8:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac4:	3306      	adds	r3, #6
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006aca:	2301      	movs	r3, #1
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006ace:	e01c      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006ada:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8006ae6:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006aec:	e00d      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af2:	224f      	movs	r2, #79	@ 0x4f
 8006af4:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8006af6:	2301      	movs	r3, #1
 8006af8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006afa:	e006      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
        }
        default: {
            break;
 8006afc:	bf00      	nop
 8006afe:	e004      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
                break;
 8006b00:	bf00      	nop
 8006b02:	e002      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
                break;
 8006b04:	bf00      	nop
 8006b06:	e000      	b.n	8006b0a <CO_LSSslave_process+0x3fe>
            break;
 8006b08:	bf00      	nop
        }
        }

        if(CANsend) {
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <CO_LSSslave_process+0x414>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f001 f9ec 	bl	8007ef8 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 8006b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3730      	adds	r7, #48	@ 0x30
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	080159dc 	.word	0x080159dc

08006b34 <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	08db      	lsrs	r3, r3, #3
 8006b44:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b09      	cmp	r3, #9
 8006b5e:	d807      	bhi.n	8006b70 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	5cd2      	ldrb	r2, [r2, r3]
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <CO_isError+0x40>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <CO_isError+0x42>
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <CO_getErrorRegister+0x1e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <CO_getErrorRegister+0x1e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	e000      	b.n	8006ba2 <CO_getErrorRegister+0x20>
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <CO_NMT_getInternalState+0x16>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f993 3000 	ldrsb.w	r3, [r3]
 8006bc2:	e000      	b.n	8006bc6 <CO_NMT_getInternalState+0x18>
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <CO_LSSslave_getState+0x14>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7c1b      	ldrb	r3, [r3, #16]
 8006be4:	e000      	b.n	8006be8 <CO_LSSslave_getState+0x16>
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8006c0a:	2140      	movs	r1, #64	@ 0x40
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	f00a fcfd 	bl	801160c <calloc>
 8006c12:	4603      	mov	r3, r0
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8101 	beq.w	8006e20 <CO_new+0x22c>
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	3340      	adds	r3, #64	@ 0x40
 8006c22:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006c24:	212c      	movs	r1, #44	@ 0x2c
 8006c26:	2001      	movs	r0, #1
 8006c28:	f00a fcf0 	bl	801160c <calloc>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	611a      	str	r2, [r3, #16]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 80f1 	beq.w	8006e20 <CO_new+0x22c>
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	332c      	adds	r3, #44	@ 0x2c
 8006c42:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8006c44:	2308      	movs	r3, #8
 8006c46:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006c48:	2130      	movs	r1, #48	@ 0x30
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	f00a fcde 	bl	801160c <calloc>
 8006c50:	4603      	mov	r3, r0
 8006c52:	461a      	mov	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	615a      	str	r2, [r3, #20]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80df 	beq.w	8006e20 <CO_new+0x22c>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3330      	adds	r3, #48	@ 0x30
 8006c66:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006c68:	7afb      	ldrb	r3, [r7, #11]
 8006c6a:	2110      	movs	r1, #16
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f00a fccd 	bl	801160c <calloc>
 8006c72:	4603      	mov	r3, r0
 8006c74:	461a      	mov	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	619a      	str	r2, [r3, #24]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80ce 	beq.w	8006e20 <CO_new+0x22c>
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006c8e:	2150      	movs	r1, #80	@ 0x50
 8006c90:	2001      	movs	r0, #1
 8006c92:	f00a fcbb 	bl	801160c <calloc>
 8006c96:	4603      	mov	r3, r0
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	61da      	str	r2, [r3, #28]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 80bc 	beq.w	8006e20 <CO_new+0x22c>
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	3350      	adds	r3, #80	@ 0x50
 8006cac:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8006cae:	2311      	movs	r3, #17
 8006cb0:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8006cb2:	7abb      	ldrb	r3, [r7, #10]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d912      	bls.n	8006cde <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006cb8:	7abb      	ldrb	r3, [r7, #10]
 8006cba:	2108      	movs	r1, #8
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f00a fca5 	bl	801160c <calloc>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	621a      	str	r2, [r3, #32]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80a6 	beq.w	8006e20 <CO_new+0x22c>
 8006cd4:	7abb      	ldrb	r3, [r7, #10]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006cde:	21a8      	movs	r1, #168	@ 0xa8
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	f00a fc93 	bl	801160c <calloc>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	625a      	str	r2, [r3, #36]	@ 0x24
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8094 	beq.w	8006e20 <CO_new+0x22c>
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	33a8      	adds	r3, #168	@ 0xa8
 8006cfc:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006cfe:	212c      	movs	r1, #44	@ 0x2c
 8006d00:	2001      	movs	r0, #1
 8006d02:	f00a fc83 	bl	801160c <calloc>
 8006d06:	4603      	mov	r3, r0
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 8084 	beq.w	8006e20 <CO_new+0x22c>
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	332c      	adds	r3, #44	@ 0x2c
 8006d1c:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006d1e:	2160      	movs	r1, #96	@ 0x60
 8006d20:	2001      	movs	r0, #1
 8006d22:	f00a fc73 	bl	801160c <calloc>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d074      	beq.n	8006e20 <CO_new+0x22c>
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	3360      	adds	r3, #96	@ 0x60
 8006d3a:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006d3c:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8006d40:	2001      	movs	r0, #1
 8006d42:	f00a fc63 	bl	801160c <calloc>
 8006d46:	4603      	mov	r3, r0
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d064      	beq.n	8006e20 <CO_new+0x22c>
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8006d5c:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006d5e:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8006d62:	2003      	movs	r0, #3
 8006d64:	f00a fc52 	bl	801160c <calloc>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d053      	beq.n	8006e20 <CO_new+0x22c>
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8006d7e:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8006d80:	210c      	movs	r1, #12
 8006d82:	2001      	movs	r0, #1
 8006d84:	f00a fc42 	bl	801160c <calloc>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d043      	beq.n	8006e20 <CO_new+0x22c>
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006d9e:	2174      	movs	r1, #116	@ 0x74
 8006da0:	2001      	movs	r0, #1
 8006da2:	f00a fc33 	bl	801160c <calloc>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d034      	beq.n	8006e20 <CO_new+0x22c>
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	3374      	adds	r3, #116	@ 0x74
 8006dba:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006dbc:	2138      	movs	r1, #56	@ 0x38
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	f00a fc24 	bl	801160c <calloc>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	605a      	str	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d025      	beq.n	8006e20 <CO_new+0x22c>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	3338      	adds	r3, #56	@ 0x38
 8006dd8:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006dda:	210c      	movs	r1, #12
 8006ddc:	200e      	movs	r0, #14
 8006dde:	f00a fc15 	bl	801160c <calloc>
 8006de2:	4603      	mov	r3, r0
 8006de4:	461a      	mov	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	609a      	str	r2, [r3, #8]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d016      	beq.n	8006e20 <CO_new+0x22c>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	33a8      	adds	r3, #168	@ 0xa8
 8006df6:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006df8:	2118      	movs	r1, #24
 8006dfa:	2008      	movs	r0, #8
 8006dfc:	f00a fc06 	bl	801160c <calloc>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	60da      	str	r2, [r3, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <CO_new+0x22c>
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	33c0      	adds	r3, #192	@ 0xc0
 8006e14:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <CO_new+0x238>
        CO_delete(co);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 f80b 	bl	8006e42 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <CO_new+0x244>
        *heapMemoryUsed = mem;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006e38:	697b      	ldr	r3, [r7, #20]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <CO_delete>:

void CO_delete(CO_t *co) {
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d053      	beq.n	8006ef8 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 ff61 	bl	8007d1c <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f00a fbf8 	bl	8011654 <free>
    CO_free(co->CANrx);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f00a fbf3 	bl	8011654 <free>
    CO_free(co->CANmodule);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f00a fbee 	bl	8011654 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f00a fbe9 	bl	8011654 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e86:	4618      	mov	r0, r3
 8006e88:	f00a fbe4 	bl	8011654 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e90:	4618      	mov	r0, r3
 8006e92:	f00a fbdf 	bl	8011654 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f00a fbda 	bl	8011654 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f00a fbd5 	bl	8011654 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f00a fbd0 	bl	8011654 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f00a fbcb 	bl	8011654 <free>

    /* Emergency */
    CO_free(co->em);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f00a fbc6 	bl	8011654 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f00a fbc1 	bl	8011654 <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f00a fbbc 	bl	8011654 <free>
    CO_free(co->HBcons);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f00a fbb7 	bl	8011654 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f00a fbb2 	bl	8011654 <free>

    /* CANopen object */
    CO_free(co);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f00a fbaf 	bl	8011654 <free>
 8006ef6:	e000      	b.n	8006efa <CO_delete+0xb8>
        return;
 8006ef8:	bf00      	nop
}
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	@ 0x28
 8006f04:	af04      	add	r7, sp, #16
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <CO_CANinit+0x1a>
 8006f14:	f04f 33ff 	mov.w	r3, #4294967295
 8006f18:	e01a      	b.n	8006f50 <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8006f22:	68b8      	ldr	r0, [r7, #8]
 8006f24:	f000 fe0a 	bl	8007b3c <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6858      	ldr	r0, [r3, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6899      	ldr	r1, [r3, #8]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	9202      	str	r2, [sp, #8]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	9201      	str	r2, [sp, #4]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	230e      	movs	r3, #14
 8006f40:	460a      	mov	r2, r1
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	f000 fe22 	bl	8007b8c <CO_CANmodule_init>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8006f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	@ 0x30
 8006f5c:	af06      	add	r7, sp, #24
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f70:	e01a      	b.n	8006fa8 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	6852      	ldr	r2, [r2, #4]
 8006f7e:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 8006f82:	9105      	str	r1, [sp, #20]
 8006f84:	2107      	movs	r1, #7
 8006f86:	9104      	str	r1, [sp, #16]
 8006f88:	9203      	str	r2, [sp, #12]
 8006f8a:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 8006f8e:	9202      	str	r2, [sp, #8]
 8006f90:	220d      	movs	r2, #13
 8006f92:	9201      	str	r2, [sp, #4]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	f7ff fb40 	bl	8006620 <CO_LSSslave_init>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8006fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8006fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb2:	b091      	sub	sp, #68	@ 0x44
 8006fb4:	af0a      	add	r7, sp, #40	@ 0x28
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc8:	e134      	b.n	8007234 <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <CO_CANopenInit+0x26>
        em = co->em;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8006fdc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006fe0:	2bff      	cmp	r3, #255	@ 0xff
 8006fe2:	d103      	bne.n	8006fec <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	e00a      	b.n	8007002 <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8006fec:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <CO_CANopenInit+0x4c>
 8006ff4:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	da02      	bge.n	8007002 <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8007000:	e118      	b.n	8007234 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe ffe2 	bl	8005fd0 <CO_LEDs_init>
 800700c:	4603      	mov	r3, r0
 800700e:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 8007010:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <CO_CANopenInit+0x6e>
 8007018:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800701c:	e10a      	b.n	8007234 <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8007026:	f06f 0312 	mvn.w	r3, #18
 800702a:	e103      	b.n	8007234 <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	69d8      	ldr	r0, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8007034:	4b81      	ldr	r3, [pc, #516]	@ (800723c <CO_CANopenInit+0x28c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8007042:	4b7e      	ldr	r3, [pc, #504]	@ (800723c <CO_CANopenInit+0x28c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8007048:	336c      	adds	r3, #108	@ 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 800704a:	4a7c      	ldr	r2, [pc, #496]	@ (800723c <CO_CANopenInit+0x28c>)
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 8007050:	3218      	adds	r2, #24
 8007052:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007054:	9105      	str	r1, [sp, #20]
 8007056:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800705a:	9104      	str	r1, [sp, #16]
 800705c:	9203      	str	r2, [sp, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	9202      	str	r2, [sp, #8]
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	2311      	movs	r3, #17
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	4633      	mov	r3, r6
 800706a:	462a      	mov	r2, r5
 800706c:	4621      	mov	r1, r4
 800706e:	f7fa f8e1 	bl	8001234 <CO_EM_init>
 8007072:	4603      	mov	r3, r0
 8007074:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8007076:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <CO_CANopenInit+0xd4>
 800707e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007082:	e0d7      	b.n	8007234 <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8007088:	4b6c      	ldr	r3, [pc, #432]	@ (800723c <CO_CANopenInit+0x28c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 800708e:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	6852      	ldr	r2, [r2, #4]
 800709a:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800709e:	b289      	uxth	r1, r1
 80070a0:	f501 61e0 	add.w	r1, r1, #1792	@ 0x700
 80070a4:	b289      	uxth	r1, r1
 80070a6:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 80070aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80070ac:	9008      	str	r0, [sp, #32]
 80070ae:	9107      	str	r1, [sp, #28]
 80070b0:	2106      	movs	r1, #6
 80070b2:	9106      	str	r1, [sp, #24]
 80070b4:	9205      	str	r2, [sp, #20]
 80070b6:	2200      	movs	r2, #0
 80070b8:	9204      	str	r2, [sp, #16]
 80070ba:	2200      	movs	r2, #0
 80070bc:	9203      	str	r2, [sp, #12]
 80070be:	9302      	str	r3, [sp, #8]
 80070c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	4633      	mov	r3, r6
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4629      	mov	r1, r5
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7fa ff40 	bl	8001f54 <CO_NMT_init>
 80070d4:	4603      	mov	r3, r0
 80070d6:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 80070d8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <CO_CANopenInit+0x136>
 80070e0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80070e4:	e0a6      	b.n	8007234 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6958      	ldr	r0, [r3, #20]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 80070ee:	4b53      	ldr	r3, [pc, #332]	@ (800723c <CO_CANopenInit+0x28c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 80070f4:	3384      	adds	r3, #132	@ 0x84
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	6852      	ldr	r2, [r2, #4]
 80070fa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80070fc:	9103      	str	r1, [sp, #12]
 80070fe:	2105      	movs	r1, #5
 8007100:	9102      	str	r1, [sp, #8]
 8007102:	9201      	str	r2, [sp, #4]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2308      	movs	r3, #8
 8007108:	4622      	mov	r2, r4
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	f7fa fc26 	bl	800195c <CO_HBconsumer_init>
 8007110:	4603      	mov	r3, r0
 8007112:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 8007114:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <CO_CANopenInit+0x172>
 800711c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007120:	e088      	b.n	8007234 <CO_CANopenInit+0x284>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8007122:	4b46      	ldr	r3, [pc, #280]	@ (800723c <CO_CANopenInit+0x28c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	33b4      	adds	r3, #180	@ 0xb4
 800712a:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800712c:	2300      	movs	r3, #0
 800712e:	827b      	strh	r3, [r7, #18]
 8007130:	e033      	b.n	800719a <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007136:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800713a:	21a8      	movs	r1, #168	@ 0xa8
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	18d6      	adds	r6, r2, r3
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	f102 030c 	add.w	r3, r2, #12
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	8a79      	ldrh	r1, [r7, #18]
 8007150:	3104      	adds	r1, #4
 8007152:	b289      	uxth	r1, r1
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	6840      	ldr	r0, [r0, #4]
 8007158:	8a7c      	ldrh	r4, [r7, #18]
 800715a:	3405      	adds	r4, #5
 800715c:	b2a4      	uxth	r4, r4
 800715e:	f897 c048 	ldrb.w	ip, [r7, #72]	@ 0x48
 8007162:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8007164:	9505      	str	r5, [sp, #20]
 8007166:	9404      	str	r4, [sp, #16]
 8007168:	9003      	str	r0, [sp, #12]
 800716a:	9102      	str	r1, [sp, #8]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	4663      	mov	r3, ip
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	4630      	mov	r0, r6
 8007178:	f7fd f95c 	bl	8004434 <CO_SDOserver_init>
 800717c:	4603      	mov	r3, r0
 800717e:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8007180:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <CO_CANopenInit+0x1de>
 8007188:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800718c:	e052      	b.n	8007234 <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800718e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007192:	b29b      	uxth	r3, r3
 8007194:	3301      	adds	r3, #1
 8007196:	b29b      	uxth	r3, r3
 8007198:	827b      	strh	r3, [r7, #18]
 800719a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	ddc7      	ble.n	8007132 <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 80071a6:	4b25      	ldr	r3, [pc, #148]	@ (800723c <CO_CANopenInit+0x28c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 80071ac:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2302      	movs	r3, #2
 80071ba:	f7fe fe13 	bl	8005de4 <CO_TIME_init>
 80071be:	4603      	mov	r3, r0
 80071c0:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 80071c2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <CO_CANopenInit+0x220>
 80071ca:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80071ce:	e031      	b.n	8007234 <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 80071d4:	4b19      	ldr	r3, [pc, #100]	@ (800723c <CO_CANopenInit+0x28c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80071da:	f103 0624 	add.w	r6, r3, #36	@ 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 80071de:	4b17      	ldr	r3, [pc, #92]	@ (800723c <CO_CANopenInit+0x28c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80071e4:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 80071e8:	4b14      	ldr	r3, [pc, #80]	@ (800723c <CO_CANopenInit+0x28c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80071ee:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 80071f0:	4a12      	ldr	r2, [pc, #72]	@ (800723c <CO_CANopenInit+0x28c>)
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 80071f6:	32a8      	adds	r2, #168	@ 0xa8
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	6849      	ldr	r1, [r1, #4]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	6840      	ldr	r0, [r0, #4]
 8007200:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8007202:	9406      	str	r4, [sp, #24]
 8007204:	2400      	movs	r4, #0
 8007206:	9405      	str	r4, [sp, #20]
 8007208:	9004      	str	r0, [sp, #16]
 800720a:	2001      	movs	r0, #1
 800720c:	9003      	str	r0, [sp, #12]
 800720e:	9102      	str	r1, [sp, #8]
 8007210:	9201      	str	r2, [sp, #4]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	4663      	mov	r3, ip
 8007216:	4632      	mov	r2, r6
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	4628      	mov	r0, r5
 800721c:	f7fe fb1a 	bl	8005854 <CO_SYNC_init>
 8007220:	4603      	mov	r3, r0
 8007222:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8007224:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <CO_CANopenInit+0x282>
 800722c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007230:	e000      	b.n	8007234 <CO_CANopenInit+0x284>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800723c:	20000288 	.word	0x20000288

08007240 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8007240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007242:	b093      	sub	sp, #76	@ 0x4c
 8007244:	af06      	add	r7, sp, #24
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007254:	f04f 33ff 	mov.w	r3, #4294967295
 8007258:	e0c2      	b.n	80073e0 <CO_CANopenInitPDO+0x1a0>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <CO_CANopenInitPDO+0x30>
 8007260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007264:	2b00      	cmp	r3, #0
 8007266:	db03      	blt.n	8007270 <CO_CANopenInitPDO+0x30>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d009      	beq.n	8007284 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <CO_CANopenInitPDO+0x3e>
 8007278:	f06f 0312 	mvn.w	r3, #18
 800727c:	e0b0      	b.n	80073e0 <CO_CANopenInitPDO+0x1a0>
 800727e:	f04f 33ff 	mov.w	r3, #4294967295
 8007282:	e0ad      	b.n	80073e0 <CO_CANopenInitPDO+0x1a0>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8007284:	4b58      	ldr	r3, [pc, #352]	@ (80073e8 <CO_CANopenInitPDO+0x1a8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	33cc      	adds	r3, #204	@ 0xcc
 800728c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 800728e:	4b56      	ldr	r3, [pc, #344]	@ (80073e8 <CO_CANopenInitPDO+0x1a8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	33d8      	adds	r3, #216	@ 0xd8
 8007296:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007298:	2300      	movs	r3, #0
 800729a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800729c:	e044      	b.n	8007328 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 80072a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	dc09      	bgt.n	80072be <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 80072aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80072ae:	3302      	adds	r3, #2
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	021b      	lsls	r3, r3, #8
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4413      	add	r3, r2
 80072bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80072c6:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 80072ca:	fb01 f303 	mul.w	r3, r1, r3
 80072ce:	18d5      	adds	r5, r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80072d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d6:	f103 020c 	add.w	r2, r3, #12
 80072da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072de:	f102 010c 	add.w	r1, r2, #12
 80072e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80072e4:	68f9      	ldr	r1, [r7, #12]
 80072e6:	6849      	ldr	r1, [r1, #4]
 80072e8:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80072ea:	3003      	adds	r0, #3
 80072ec:	b280      	uxth	r0, r0
 80072ee:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80072f0:	9405      	str	r4, [sp, #20]
 80072f2:	9004      	str	r0, [sp, #16]
 80072f4:	9103      	str	r1, [sp, #12]
 80072f6:	9202      	str	r2, [sp, #8]
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	4633      	mov	r3, r6
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4628      	mov	r0, r5
 8007306:	f7fb ff6b 	bl	80031e0 <CO_RPDO_init>
 800730a:	4603      	mov	r3, r0
 800730c:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 800730e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <CO_CANopenInitPDO+0xdc>
 8007316:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800731a:	e061      	b.n	80073e0 <CO_CANopenInitPDO+0x1a0>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 800731c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8007320:	b29b      	uxth	r3, r3
 8007322:	3301      	adds	r3, #1
 8007324:	b29b      	uxth	r3, r3
 8007326:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007328:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800732c:	2b00      	cmp	r3, #0
 800732e:	ddb6      	ble.n	800729e <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8007330:	4b2d      	ldr	r3, [pc, #180]	@ (80073e8 <CO_CANopenInitPDO+0x1a8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	33e4      	adds	r3, #228	@ 0xe4
 8007338:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 800733a:	4b2b      	ldr	r3, [pc, #172]	@ (80073e8 <CO_CANopenInitPDO+0x1a8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8007344:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007346:	2300      	movs	r3, #0
 8007348:	837b      	strh	r3, [r7, #26]
 800734a:	e044      	b.n	80073d6 <CO_CANopenInitPDO+0x196>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8007350:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007354:	2b03      	cmp	r3, #3
 8007356:	dc09      	bgt.n	800736c <CO_CANopenInitPDO+0x12c>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8007358:	8b7b      	ldrh	r3, [r7, #26]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	b29a      	uxth	r2, r3
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	b29b      	uxth	r3, r3
 8007362:	4413      	add	r3, r2
 8007364:	b29b      	uxth	r3, r3
 8007366:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800736a:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007370:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007374:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8007378:	fb01 f303 	mul.w	r3, r1, r3
 800737c:	18d5      	adds	r5, r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	f103 020c 	add.w	r2, r3, #12
 8007388:	623a      	str	r2, [r7, #32]
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	f102 010c 	add.w	r1, r2, #12
 8007390:	61f9      	str	r1, [r7, #28]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	6849      	ldr	r1, [r1, #4]
 8007396:	8b78      	ldrh	r0, [r7, #26]
 8007398:	3002      	adds	r0, #2
 800739a:	b280      	uxth	r0, r0
 800739c:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800739e:	9405      	str	r4, [sp, #20]
 80073a0:	9004      	str	r0, [sp, #16]
 80073a2:	9103      	str	r1, [sp, #12]
 80073a4:	9202      	str	r2, [sp, #8]
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	8b3b      	ldrh	r3, [r7, #24]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	4633      	mov	r3, r6
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7fc fae0 	bl	8003978 <CO_TPDO_init>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 80073bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <CO_CANopenInitPDO+0x18a>
 80073c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073c8:	e00a      	b.n	80073e0 <CO_CANopenInitPDO+0x1a0>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80073ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3301      	adds	r3, #1
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	837b      	strh	r3, [r7, #26]
 80073d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	ddb6      	ble.n	800734c <CO_CANopenInitPDO+0x10c>
        }
    }
#endif

    return CO_ERROR_NO;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3734      	adds	r7, #52	@ 0x34
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e8:	20000288 	.word	0x20000288

080073ec <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 80073ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ee:	b097      	sub	sp, #92	@ 0x5c
 80073f0:	af08      	add	r7, sp, #32
 80073f2:	61f8      	str	r0, [r7, #28]
 80073f4:	61b9      	str	r1, [r7, #24]
 80073f6:	617a      	str	r2, [r7, #20]
 80073f8:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80073fa:	2300      	movs	r3, #0
 80073fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fbd2 	bl	8006bae <CO_NMT_getInternalState>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007410:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8007414:	2b7f      	cmp	r3, #127	@ 0x7f
 8007416:	d003      	beq.n	8007420 <CO_process+0x34>
 8007418:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800741c:	2b05      	cmp	r3, #5
 800741e:	d101      	bne.n	8007424 <CO_process+0x38>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <CO_process+0x3a>
 8007424:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007426:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fe0c 	bl	800804a <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff f968 	bl	800670c <CO_LSSslave_process>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	8a5b      	ldrh	r3, [r3, #18]
 8007454:	847b      	strh	r3, [r7, #34]	@ 0x22
    bool_t LSSslave_configuration = false;
 8007456:	2300      	movs	r3, #0
 8007458:	633b      	str	r3, [r7, #48]	@ 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fbb7 	bl	8006bd2 <CO_LSSslave_getState>
 8007464:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 800746a:	2301      	movs	r3, #1
 800746c:	633b      	str	r3, [r7, #48]	@ 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	d102      	bne.n	800747e <CO_process+0x92>
 8007478:	f997 4021 	ldrsb.w	r4, [r7, #33]	@ 0x21
 800747c:	e000      	b.n	8007480 <CO_process+0x94>
 800747e:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8007480:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007482:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8007486:	2b00      	cmp	r3, #0
 8007488:	bf14      	ite	ne
 800748a:	2301      	movne	r3, #1
 800748c:	2300      	moveq	r3, #0
 800748e:	b2db      	uxtb	r3, r3
 8007490:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8007492:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007494:	f240 3303 	movw	r3, #771	@ 0x303
 8007498:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 800749a:	2b00      	cmp	r3, #0
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d107      	bne.n	80074bc <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	2118      	movs	r1, #24
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fb3e 	bl	8006b34 <CO_isError>
 80074b8:	4605      	mov	r5, r0
 80074ba:	e000      	b.n	80074be <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 80074bc:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d113      	bne.n	80074ec <CO_process+0x100>
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	211b      	movs	r1, #27
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fb32 	bl	8006b34 <CO_isError>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d108      	bne.n	80074e8 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	211c      	movs	r1, #28
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fb29 	bl	8006b34 <CO_isError>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 80074e8:	2301      	movs	r3, #1
 80074ea:	e000      	b.n	80074ee <CO_process+0x102>
 80074ec:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 80074ee:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fb44 	bl	8006b82 <CO_getErrorRegister>
 80074fa:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf14      	ite	ne
 8007500:	2301      	movne	r3, #1
 8007502:	2300      	moveq	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	9307      	str	r3, [sp, #28]
 800750c:	2300      	movs	r3, #0
 800750e:	9306      	str	r3, [sp, #24]
 8007510:	9205      	str	r2, [sp, #20]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	9503      	str	r5, [sp, #12]
 8007518:	2300      	movs	r3, #0
 800751a:	9302      	str	r3, [sp, #8]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	4622      	mov	r2, r4
 8007528:	6979      	ldr	r1, [r7, #20]
 800752a:	4630      	mov	r0, r6
 800752c:	f7fe fd68 	bl	8006000 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <CO_process+0x152>
        return reset;
 8007538:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800753c:	e047      	b.n	80075ce <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	69d8      	ldr	r0, [r3, #28]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007548:	f7f9 ff54 	bl	80013f4 <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	6918      	ldr	r0, [r3, #16]
 8007550:	f107 0121 	add.w	r1, r7, #33	@ 0x21
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	f7fa fdba 	bl	80020d0 <CO_NMT_process>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007562:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8007566:	2b7f      	cmp	r3, #127	@ 0x7f
 8007568:	d003      	beq.n	8007572 <CO_process+0x186>
 800756a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800756e:	2b05      	cmp	r3, #5
 8007570:	d101      	bne.n	8007576 <CO_process+0x18a>
 8007572:	2301      	movs	r3, #1
 8007574:	e000      	b.n	8007578 <CO_process+0x18c>
 8007576:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007578:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800757a:	2300      	movs	r3, #0
 800757c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007580:	e011      	b.n	80075a6 <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007586:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800758a:	21a8      	movs	r1, #168	@ 0xa8
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	18d0      	adds	r0, r2, r3
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007598:	f7fd fa42 	bl	8004a20 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800759c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075a0:	3301      	adds	r3, #1
 80075a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80075a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0e9      	beq.n	8007582 <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	6958      	ldr	r0, [r3, #20]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075b8:	f7fa fb14 	bl	8001be4 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fc8d 	bl	8005ee4 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 80075ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	373c      	adds	r7, #60	@ 0x3c
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075d6 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b088      	sub	sp, #32
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80075e2:	2300      	movs	r3, #0
 80075e4:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d12e      	bne.n	800764c <CO_process_SYNC+0x76>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff fadb 	bl	8006bae <CO_NMT_getInternalState>
 80075f8:	4603      	mov	r3, r0
 80075fa:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 80075fc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007600:	2b7f      	cmp	r3, #127	@ 0x7f
 8007602:	d003      	beq.n	800760c <CO_process_SYNC+0x36>
 8007604:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007608:	2b05      	cmp	r3, #5
 800760a:	d101      	bne.n	8007610 <CO_process_SYNC+0x3a>
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <CO_process_SYNC+0x3c>
 8007610:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007612:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	6979      	ldr	r1, [r7, #20]
 800761e:	f7fe fa41 	bl	8005aa4 <CO_SYNC_process>
 8007622:	4603      	mov	r3, r0
 8007624:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8007626:	7cfb      	ldrb	r3, [r7, #19]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d008      	beq.n	800763e <CO_process_SYNC+0x68>
 800762c:	2b02      	cmp	r3, #2
 800762e:	dc0d      	bgt.n	800764c <CO_process_SYNC+0x76>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <CO_process_SYNC+0x74>
 8007634:	2b01      	cmp	r3, #1
 8007636:	d109      	bne.n	800764c <CO_process_SYNC+0x76>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 8007638:	2301      	movs	r3, #1
 800763a:	61fb      	str	r3, [r7, #28]
                break;
 800763c:	e006      	b.n	800764c <CO_process_SYNC+0x76>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fc9b 	bl	8007f7e <CO_CANclearPendingSyncPDOs>
                break;
 8007648:	e000      	b.n	800764c <CO_process_SYNC+0x76>
                break;
 800764a:	bf00      	nop
        }
    }

    return syncWas;
 800764c:	69fb      	ldr	r3, [r7, #28]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b088      	sub	sp, #32
 800765a:	af02      	add	r7, sp, #8
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607a      	str	r2, [r7, #4]
 8007662:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d129      	bne.n	80076c0 <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff fa9c 	bl	8006bae <CO_NMT_getInternalState>
 8007676:	4603      	mov	r3, r0
 8007678:	2b05      	cmp	r3, #5
 800767a:	bf0c      	ite	eq
 800767c:	2301      	moveq	r3, #1
 800767e:	2300      	movne	r3, #0
 8007680:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8007682:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007684:	2300      	movs	r3, #0
 8007686:	82fb      	strh	r3, [r7, #22]
 8007688:	e015      	b.n	80076b6 <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800768e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007692:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8007696:	fb01 f303 	mul.w	r3, r1, r3
 800769a:	18d0      	adds	r0, r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	f7fb fee1 	bl	800346c <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80076aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3301      	adds	r3, #1
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	82fb      	strh	r3, [r7, #22]
 80076b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dde5      	ble.n	800768a <CO_process_RPDO+0x34>
 80076be:	e000      	b.n	80076c2 <CO_process_RPDO+0x6c>
        return;
 80076c0:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d129      	bne.n	8007732 <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fa63 	bl	8006bae <CO_NMT_getInternalState>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b05      	cmp	r3, #5
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 80076f4:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80076f6:	2300      	movs	r3, #0
 80076f8:	82fb      	strh	r3, [r7, #22]
 80076fa:	e015      	b.n	8007728 <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007704:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8007708:	fb01 f303 	mul.w	r3, r1, r3
 800770c:	18d0      	adds	r0, r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	f7fc fb4c 	bl	8003db4 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 800771c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007720:	b29b      	uxth	r3, r3
 8007722:	3301      	adds	r3, #1
 8007724:	b29b      	uxth	r3, r3
 8007726:	82fb      	strh	r3, [r7, #22]
 8007728:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800772c:	2b02      	cmp	r3, #2
 800772e:	dde5      	ble.n	80076fc <CO_process_TPDO+0x34>
 8007730:	e000      	b.n	8007734 <CO_process_TPDO+0x6c>
        return;
 8007732:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8007744:	4a13      	ldr	r2, [pc, #76]	@ (8007794 <canopen_app_init+0x58>)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800774e:	f107 0308 	add.w	r3, r7, #8
 8007752:	4619      	mov	r1, r3
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f7ff fa4d 	bl	8006bf4 <CO_new>
 800775a:	4603      	mov	r3, r0
 800775c:	4a0e      	ldr	r2, [pc, #56]	@ (8007798 <canopen_app_init+0x5c>)
 800775e:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8007760:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <canopen_app_init+0x5c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8007768:	480c      	ldr	r0, [pc, #48]	@ (800779c <canopen_app_init+0x60>)
 800776a:	f00a fe6b 	bl	8012444 <puts>
        return 1;
 800776e:	2301      	movs	r3, #1
 8007770:	e00c      	b.n	800778c <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	4619      	mov	r1, r3
 8007776:	480a      	ldr	r0, [pc, #40]	@ (80077a0 <canopen_app_init+0x64>)
 8007778:	f00a fdfc 	bl	8012374 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 800777c:	4b05      	ldr	r3, [pc, #20]	@ (8007794 <canopen_app_init+0x58>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a05      	ldr	r2, [pc, #20]	@ (8007798 <canopen_app_init+0x5c>)
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8007786:	f000 f80d 	bl	80077a4 <canopen_app_resetCommunication>
    return 0;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	200004bc 	.word	0x200004bc
 8007798:	200004c0 	.word	0x200004c0
 800779c:	080157a0 	.word	0x080157a0
 80077a0:	080157c0 	.word	0x080157c0

080077a4 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 80077a4:	b590      	push	{r4, r7, lr}
 80077a6:	b08f      	sub	sp, #60	@ 0x3c
 80077a8:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 80077aa:	487d      	ldr	r0, [pc, #500]	@ (80079a0 <canopen_app_resetCommunication+0x1fc>)
 80077ac:	f00a fe4a 	bl	8012444 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 80077b0:	4b7c      	ldr	r3, [pc, #496]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80077ba:	4b7b      	ldr	r3, [pc, #492]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f9bc 	bl	8007b3c <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 80077c4:	4b77      	ldr	r3, [pc, #476]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 faa6 	bl	8007d1c <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 80077d0:	4b74      	ldr	r3, [pc, #464]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a74      	ldr	r2, [pc, #464]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 80077d6:	6811      	ldr	r1, [r2, #0]
 80077d8:	2200      	movs	r2, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff fb90 	bl	8006f00 <CO_CANinit>
 80077e0:	4603      	mov	r3, r0
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b71      	ldr	r3, [pc, #452]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 80077e6:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80077e8:	4b70      	ldr	r3, [pc, #448]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 80077ea:	f993 3000 	ldrsb.w	r3, [r3]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d008      	beq.n	8007804 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 80077f2:	4b6e      	ldr	r3, [pc, #440]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 80077f4:	f993 3000 	ldrsb.w	r3, [r3]
 80077f8:	4619      	mov	r1, r3
 80077fa:	486d      	ldr	r0, [pc, #436]	@ (80079b0 <canopen_app_resetCommunication+0x20c>)
 80077fc:	f00a fdba 	bl	8012374 <iprintf>
        return 1;
 8007800:	2301      	movs	r3, #1
 8007802:	e0c8      	b.n	8007996 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007804:	4b6b      	ldr	r3, [pc, #428]	@ (80079b4 <canopen_app_resetCommunication+0x210>)
 8007806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007808:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 800780a:	4b6a      	ldr	r3, [pc, #424]	@ (80079b4 <canopen_app_resetCommunication+0x210>)
 800780c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800780e:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8007810:	4b68      	ldr	r3, [pc, #416]	@ (80079b4 <canopen_app_resetCommunication+0x210>)
 8007812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007814:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8007816:	4b67      	ldr	r3, [pc, #412]	@ (80079b4 <canopen_app_resetCommunication+0x210>)
 8007818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800781a:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 800781c:	4b61      	ldr	r3, [pc, #388]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	4b61      	ldr	r3, [pc, #388]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	4b60      	ldr	r3, [pc, #384]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3302      	adds	r3, #2
 800782c:	f107 0108 	add.w	r1, r7, #8
 8007830:	f7ff fb92 	bl	8006f58 <CO_LSSinit>
 8007834:	4603      	mov	r3, r0
 8007836:	461a      	mov	r2, r3
 8007838:	4b5c      	ldr	r3, [pc, #368]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 800783a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 800783c:	4b5b      	ldr	r3, [pc, #364]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 800783e:	f993 3000 	ldrsb.w	r3, [r3]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d008      	beq.n	8007858 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8007846:	4b59      	ldr	r3, [pc, #356]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 8007848:	f993 3000 	ldrsb.w	r3, [r3]
 800784c:	4619      	mov	r1, r3
 800784e:	485a      	ldr	r0, [pc, #360]	@ (80079b8 <canopen_app_resetCommunication+0x214>)
 8007850:	f00a fd90 	bl	8012374 <iprintf>
        return 2;
 8007854:	2302      	movs	r3, #2
 8007856:	e09e      	b.n	8007996 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8007858:	4b53      	ldr	r3, [pc, #332]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b52      	ldr	r3, [pc, #328]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	7812      	ldrb	r2, [r2, #0]
 8007862:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8007868:	4b4e      	ldr	r3, [pc, #312]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	4b53      	ldr	r3, [pc, #332]	@ (80079bc <canopen_app_resetCommunication+0x218>)
 800786e:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8007870:	4b4d      	ldr	r3, [pc, #308]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 8007872:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	1d3a      	adds	r2, r7, #4
 8007878:	9207      	str	r2, [sp, #28]
 800787a:	9306      	str	r3, [sp, #24]
 800787c:	2300      	movs	r3, #0
 800787e:	9305      	str	r3, [sp, #20]
 8007880:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800788a:	9303      	str	r3, [sp, #12]
 800788c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007890:	9302      	str	r3, [sp, #8]
 8007892:	f242 1311 	movw	r3, #8465	@ 0x2111
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	2300      	movs	r3, #0
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	460b      	mov	r3, r1
 800789e:	2200      	movs	r2, #0
 80078a0:	2100      	movs	r1, #0
 80078a2:	f7ff fb85 	bl	8006fb0 <CO_CANopenInit>
 80078a6:	4603      	mov	r3, r0
 80078a8:	461a      	mov	r2, r3
 80078aa:	4b40      	ldr	r3, [pc, #256]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 80078ac:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 80078ae:	4b3f      	ldr	r3, [pc, #252]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 80078b0:	f993 3000 	ldrsb.w	r3, [r3]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01a      	beq.n	80078ee <canopen_app_resetCommunication+0x14a>
 80078b8:	4b3c      	ldr	r3, [pc, #240]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 80078ba:	f993 3000 	ldrsb.w	r3, [r3]
 80078be:	f113 0f13 	cmn.w	r3, #19
 80078c2:	d014      	beq.n	80078ee <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80078c4:	4b39      	ldr	r3, [pc, #228]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 80078c6:	f993 3000 	ldrsb.w	r3, [r3]
 80078ca:	f113 0f0c 	cmn.w	r3, #12
 80078ce:	d105      	bne.n	80078dc <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4619      	mov	r1, r3
 80078d4:	483a      	ldr	r0, [pc, #232]	@ (80079c0 <canopen_app_resetCommunication+0x21c>)
 80078d6:	f00a fd4d 	bl	8012374 <iprintf>
 80078da:	e006      	b.n	80078ea <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 80078dc:	4b33      	ldr	r3, [pc, #204]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 80078de:	f993 3000 	ldrsb.w	r3, [r3]
 80078e2:	4619      	mov	r1, r3
 80078e4:	4837      	ldr	r0, [pc, #220]	@ (80079c4 <canopen_app_resetCommunication+0x220>)
 80078e6:	f00a fd45 	bl	8012374 <iprintf>
        }
        return 3;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e053      	b.n	8007996 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 80078ee:	4b2d      	ldr	r3, [pc, #180]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	4b2c      	ldr	r3, [pc, #176]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69d9      	ldr	r1, [r3, #28]
 80078f8:	4b30      	ldr	r3, [pc, #192]	@ (80079bc <canopen_app_resetCommunication+0x218>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	4b2a      	ldr	r3, [pc, #168]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	785c      	ldrb	r4, [r3, #1]
 8007902:	1d3b      	adds	r3, r7, #4
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	4623      	mov	r3, r4
 8007908:	f7ff fc9a 	bl	8007240 <CO_CANopenInitPDO>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	4b26      	ldr	r3, [pc, #152]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 8007912:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007914:	4b25      	ldr	r3, [pc, #148]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 8007916:	f993 3000 	ldrsb.w	r3, [r3]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d014      	beq.n	8007948 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 800791e:	4b23      	ldr	r3, [pc, #140]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 8007920:	f993 3000 	ldrsb.w	r3, [r3]
 8007924:	f113 0f0c 	cmn.w	r3, #12
 8007928:	d105      	bne.n	8007936 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4619      	mov	r1, r3
 800792e:	4824      	ldr	r0, [pc, #144]	@ (80079c0 <canopen_app_resetCommunication+0x21c>)
 8007930:	f00a fd20 	bl	8012374 <iprintf>
 8007934:	e006      	b.n	8007944 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8007936:	4b1d      	ldr	r3, [pc, #116]	@ (80079ac <canopen_app_resetCommunication+0x208>)
 8007938:	f993 3000 	ldrsb.w	r3, [r3]
 800793c:	4619      	mov	r1, r3
 800793e:	4822      	ldr	r0, [pc, #136]	@ (80079c8 <canopen_app_resetCommunication+0x224>)
 8007940:	f00a fd18 	bl	8012374 <iprintf>
        }
        return 4;
 8007944:	2304      	movs	r3, #4
 8007946:	e026      	b.n	8007996 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8007948:	4b17      	ldr	r3, [pc, #92]	@ (80079a8 <canopen_app_resetCommunication+0x204>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	4618      	mov	r0, r3
 8007950:	f007 fda2 	bl	800f498 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8007954:	4b13      	ldr	r3, [pc, #76]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 800795e:	481b      	ldr	r0, [pc, #108]	@ (80079cc <canopen_app_resetCommunication+0x228>)
 8007960:	f00a fd70 	bl	8012444 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8007964:	4b0f      	ldr	r3, [pc, #60]	@ (80079a4 <canopen_app_resetCommunication+0x200>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f8f6 	bl	8007b5c <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8007970:	4817      	ldr	r0, [pc, #92]	@ (80079d0 <canopen_app_resetCommunication+0x22c>)
 8007972:	f00a fd67 	bl	8012444 <puts>
    fflush(stdout);
 8007976:	4b17      	ldr	r3, [pc, #92]	@ (80079d4 <canopen_app_resetCommunication+0x230>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	4618      	mov	r0, r3
 800797e:	f00a fc23 	bl	80121c8 <fflush>
    time_old = time_current = HAL_GetTick();
 8007982:	f003 fb95 	bl	800b0b0 <HAL_GetTick>
 8007986:	4603      	mov	r3, r0
 8007988:	4a13      	ldr	r2, [pc, #76]	@ (80079d8 <canopen_app_resetCommunication+0x234>)
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	4b12      	ldr	r3, [pc, #72]	@ (80079d8 <canopen_app_resetCommunication+0x234>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a12      	ldr	r2, [pc, #72]	@ (80079dc <canopen_app_resetCommunication+0x238>)
 8007992:	6013      	str	r3, [r2, #0]
    return 0;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	bd90      	pop	{r4, r7, pc}
 800799e:	bf00      	nop
 80079a0:	080157e8 	.word	0x080157e8
 80079a4:	200004c0 	.word	0x200004c0
 80079a8:	200004bc 	.word	0x200004bc
 80079ac:	200004cc 	.word	0x200004cc
 80079b0:	08015810 	.word	0x08015810
 80079b4:	20000000 	.word	0x20000000
 80079b8:	08015838 	.word	0x08015838
 80079bc:	20000288 	.word	0x20000288
 80079c0:	08015864 	.word	0x08015864
 80079c4:	0801588c 	.word	0x0801588c
 80079c8:	080158b8 	.word	0x080158b8
 80079cc:	080158e0 	.word	0x080158e0
 80079d0:	08015908 	.word	0x08015908
 80079d4:	200002d0 	.word	0x200002d0
 80079d8:	200004c8 	.word	0x200004c8
 80079dc:	200004c4 	.word	0x200004c4

080079e0 <canopen_app_process>:

void
canopen_app_process() {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 80079e6:	f003 fb63 	bl	800b0b0 <HAL_GetTick>
 80079ea:	4603      	mov	r3, r0
 80079ec:	4a2c      	ldr	r2, [pc, #176]	@ (8007aa0 <canopen_app_process+0xc0>)
 80079ee:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 80079f0:	4b2b      	ldr	r3, [pc, #172]	@ (8007aa0 <canopen_app_process+0xc0>)
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4b2b      	ldr	r3, [pc, #172]	@ (8007aa4 <canopen_app_process+0xc4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d04c      	beq.n	8007a96 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 80079fc:	4b28      	ldr	r3, [pc, #160]	@ (8007aa0 <canopen_app_process+0xc0>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	4b28      	ldr	r3, [pc, #160]	@ (8007aa4 <canopen_app_process+0xc4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007a0a:	fb02 f303 	mul.w	r3, r2, r3
 8007a0e:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8007a10:	4b23      	ldr	r3, [pc, #140]	@ (8007aa0 <canopen_app_process+0xc0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a23      	ldr	r2, [pc, #140]	@ (8007aa4 <canopen_app_process+0xc4>)
 8007a16:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8007a18:	4b23      	ldr	r3, [pc, #140]	@ (8007aa8 <canopen_app_process+0xc8>)
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	2100      	movs	r1, #0
 8007a22:	f7ff fce3 	bl	80073ec <CO_process>
 8007a26:	4603      	mov	r3, r0
 8007a28:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8007a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007aa8 <canopen_app_process+0xc8>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a30:	7a5a      	ldrb	r2, [r3, #9]
 8007a32:	4b1e      	ldr	r3, [pc, #120]	@ (8007aac <canopen_app_process+0xcc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	09d2      	lsrs	r2, r2, #7
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa8 <canopen_app_process+0xc8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a42:	7a9a      	ldrb	r2, [r3, #10]
 8007a44:	4b19      	ldr	r3, [pc, #100]	@ (8007aac <canopen_app_process+0xcc>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	09d2      	lsrs	r2, r2, #7
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d118      	bne.n	8007a86 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8007a54:	4b15      	ldr	r3, [pc, #84]	@ (8007aac <canopen_app_process+0xcc>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f007 fd8c 	bl	800f578 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8007a60:	4b12      	ldr	r3, [pc, #72]	@ (8007aac <canopen_app_process+0xcc>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 f869 	bl	8007b3c <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8007a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa8 <canopen_app_process+0xc8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff f9e7 	bl	8006e42 <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8007a74:	480e      	ldr	r0, [pc, #56]	@ (8007ab0 <canopen_app_process+0xd0>)
 8007a76:	f00a fce5 	bl	8012444 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8007a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007aac <canopen_app_process+0xcc>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fe5c 	bl	800773c <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8007a84:	e007      	b.n	8007a96 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d104      	bne.n	8007a96 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8007a8c:	4809      	ldr	r0, [pc, #36]	@ (8007ab4 <canopen_app_process+0xd4>)
 8007a8e:	f00a fcd9 	bl	8012444 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8007a92:	f005 faec 	bl	800d06e <HAL_NVIC_SystemReset>
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200004c8 	.word	0x200004c8
 8007aa4:	200004c4 	.word	0x200004c4
 8007aa8:	200004c0 	.word	0x200004c0
 8007aac:	200004bc 	.word	0x200004bc
 8007ab0:	08015924 	.word	0x08015924
 8007ab4:	0801594c 	.word	0x0801594c

08007ab8 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8007abe:	4b1e      	ldr	r3, [pc, #120]	@ (8007b38 <canopen_app_interrupt+0x80>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007ac4:	f3ef 8210 	mrs	r2, PRIMASK
 8007ac8:	607a      	str	r2, [r7, #4]
  return(result);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007ace:	b672      	cpsid	i
}
 8007ad0:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007ad2:	4b19      	ldr	r3, [pc, #100]	@ (8007b38 <canopen_app_interrupt+0x80>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d120      	bne.n	8007b1e <canopen_app_interrupt+0x66>
 8007adc:	4b16      	ldr	r3, [pc, #88]	@ (8007b38 <canopen_app_interrupt+0x80>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01a      	beq.n	8007b1e <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8007aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007af0:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007af2:	4b11      	ldr	r3, [pc, #68]	@ (8007b38 <canopen_app_interrupt+0x80>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff fd6b 	bl	80075d6 <CO_process_SYNC>
 8007b00:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007b02:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <canopen_app_interrupt+0x80>)
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	2300      	movs	r3, #0
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	68f9      	ldr	r1, [r7, #12]
 8007b0c:	f7ff fda3 	bl	8007656 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007b10:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <canopen_app_interrupt+0x80>)
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	f7ff fdd5 	bl	80076c8 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8007b1e:	4b06      	ldr	r3, [pc, #24]	@ (8007b38 <canopen_app_interrupt+0x80>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b26:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f383 8810 	msr	PRIMASK, r3
}
 8007b2e:	bf00      	nop
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	200004c0 	.word	0x200004c0

08007b3c <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f004 fcd4 	bl	800c4fc <HAL_CAN_Stop>
#endif
    }
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f004 fc7e 	bl	800c474 <HAL_CAN_Start>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	615a      	str	r2, [r3, #20]
        }
    }
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b090      	sub	sp, #64	@ 0x40
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <CO_CANmodule_init+0x20>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <CO_CANmodule_init+0x20>
 8007ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d102      	bne.n	8007bb2 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb0:	e0ab      	b.n	8007d0a <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8007bb8:	4a56      	ldr	r2, [pc, #344]	@ (8007d14 <CO_CANmodule_init+0x188>)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	887a      	ldrh	r2, [r7, #2]
 8007bc8:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bce:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8007bd6:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007c02:	2300      	movs	r3, #0
 8007c04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007c06:	e02b      	b.n	8007c60 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8007c08:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4413      	add	r3, r2
 8007c18:	2200      	movs	r2, #0
 8007c1a:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8007c1c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007c1e:	4613      	mov	r3, r2
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	461a      	mov	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c30:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8007c32:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007c34:	4613      	mov	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8007c46:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007c48:	4613      	mov	r3, r2
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	461a      	mov	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007c5a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007c60:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007c62:	887b      	ldrh	r3, [r7, #2]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d3cf      	bcc.n	8007c08 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007c68:	2300      	movs	r3, #0
 8007c6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007c6c:	e00c      	b.n	8007c88 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8007c6e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8007c70:	4613      	mov	r3, r2
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	4413      	add	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c7c:	4413      	add	r3, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8007c82:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007c84:	3301      	adds	r3, #1
 8007c86:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007c88:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8007c8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d3ed      	bcc.n	8007c6e <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d18 <CO_CANmodule_init+0x18c>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d102      	bne.n	8007cac <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007caa:	e001      	b.n	8007cb0 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8007cac:	230e      	movs	r3, #14
 8007cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	633b      	str	r3, [r7, #48]	@ 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	627b      	str	r3, [r7, #36]	@ 0x24

    FilterConfig.FilterActivation = ENABLE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	637b      	str	r3, [r7, #52]	@ 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8007cd0:	230e      	movs	r3, #14
 8007cd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f107 0214 	add.w	r2, r7, #20
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f004 fae8 	bl	800c2b4 <HAL_CAN_ConfigFilter>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295
 8007cee:	e00c      	b.n	8007d0a <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2113      	movs	r1, #19
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f004 fe70 	bl	800c9dc <HAL_CAN_ActivateNotification>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295
 8007d06:	e000      	b.n	8007d0a <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3740      	adds	r7, #64	@ 0x40
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	200004d0 	.word	0x200004d0
 8007d18:	40006400 	.word	0x40006400

08007d1c <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <CO_CANmodule_disable+0x22>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f004 fbdf 	bl	800c4fc <HAL_CAN_Stop>
#endif
    }
}
 8007d3e:	bf00      	nop
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	817b      	strh	r3, [r7, #10]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	813b      	strh	r3, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d03c      	beq.n	8007de6 <CO_CANrxBufferInit+0x9e>
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d039      	beq.n	8007de6 <CO_CANrxBufferInit+0x9e>
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d036      	beq.n	8007de6 <CO_CANrxBufferInit+0x9e>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	891b      	ldrh	r3, [r3, #8]
 8007d7c:	897a      	ldrh	r2, [r7, #10]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d231      	bcs.n	8007de6 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6859      	ldr	r1, [r3, #4]
 8007d86:	897a      	ldrh	r2, [r7, #10]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d98:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d9e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8007da0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007da8:	b21b      	sxth	r3, r3
 8007daa:	6a3a      	ldr	r2, [r7, #32]
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	d001      	beq.n	8007db4 <CO_CANrxBufferInit+0x6c>
 8007db0:	4a13      	ldr	r2, [pc, #76]	@ (8007e00 <CO_CANrxBufferInit+0xb8>)
 8007db2:	e000      	b.n	8007db6 <CO_CANrxBufferInit+0x6e>
 8007db4:	2200      	movs	r2, #0
 8007db6:	4313      	orrs	r3, r2
 8007db8:	b21b      	sxth	r3, r3
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dc8:	b21b      	sxth	r3, r3
 8007dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd2:	b21b      	sxth	r3, r3
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <CO_CANrxBufferInit+0xa4>
            __NOP();
 8007de2:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007de4:	e002      	b.n	8007dec <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007de6:	23ff      	movs	r3, #255	@ 0xff
 8007de8:	75fb      	strb	r3, [r7, #23]
 8007dea:	e000      	b.n	8007dee <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007dec:	bf00      	nop
    }

    return ret;
 8007dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	ffff8000 	.word	0xffff8000

08007e04 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	607b      	str	r3, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	817b      	strh	r3, [r7, #10]
 8007e12:	4613      	mov	r3, r2
 8007e14:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d024      	beq.n	8007e6a <CO_CANtxBufferInit+0x66>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8a1b      	ldrh	r3, [r3, #16]
 8007e24:	897a      	ldrh	r2, [r7, #10]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d21f      	bcs.n	8007e6a <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	68d9      	ldr	r1, [r3, #12]
 8007e2e:	897a      	ldrh	r2, [r7, #10]
 8007e30:	4613      	mov	r3, r2
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	4413      	add	r3, r2
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	440b      	add	r3, r1
 8007e3a:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8007e3c:	893b      	ldrh	r3, [r7, #8]
 8007e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	d002      	beq.n	8007e4e <CO_CANtxBufferInit+0x4a>
 8007e48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007e4c:	e000      	b.n	8007e50 <CO_CANtxBufferInit+0x4c>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	431a      	orrs	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007e5c:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2200      	movs	r2, #0
 8007e62:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e68:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8007e6a:	697b      	ldr	r3, [r7, #20]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f004 fc4e 	bl	800c72e <HAL_CAN_GetTxMailboxesFreeLevel>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d028      	beq.n	8007eea <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8007e98:	4b16      	ldr	r3, [pc, #88]	@ (8007ef4 <prv_send_can_message+0x7c>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8007e9e:	4b15      	ldr	r3, [pc, #84]	@ (8007ef4 <prv_send_can_message+0x7c>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	791b      	ldrb	r3, [r3, #4]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4b12      	ldr	r3, [pc, #72]	@ (8007ef4 <prv_send_can_message+0x7c>)
 8007eac:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007ef4 <prv_send_can_message+0x7c>)
 8007eb8:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	0b9b      	lsrs	r3, r3, #14
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ef4 <prv_send_can_message+0x7c>)
 8007ec6:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6898      	ldr	r0, [r3, #8]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	1d5a      	adds	r2, r3, #5
 8007ed2:	f107 0308 	add.w	r3, r7, #8
 8007ed6:	4907      	ldr	r1, [pc, #28]	@ (8007ef4 <prv_send_can_message+0x7c>)
 8007ed8:	f004 fb59 	bl	800c58e <HAL_CAN_AddTxMessage>
 8007edc:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bf0c      	ite	eq
 8007ee2:	2301      	moveq	r3, #1
 8007ee4:	2300      	movne	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007ee8:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	200004d4 	.word	0x200004d4

08007ef8 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00c      	beq.n	8007f28 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	8a5b      	ldrh	r3, [r3, #18]
 8007f1a:	f043 0308 	orr.w	r3, r3, #8
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8007f24:	23f7      	movs	r3, #247	@ 0xf7
 8007f26:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f28:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8007f2e:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007f34:	b672      	cpsid	i
}
 8007f36:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff ff9c 	bl	8007e78 <prv_send_can_message>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	695a      	ldr	r2, [r3, #20]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	61da      	str	r2, [r3, #28]
 8007f4e:	e009      	b.n	8007f64 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2201      	movs	r2, #1
 8007f54:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f383 8810 	msr	PRIMASK, r3
}
 8007f70:	bf00      	nop

    return err;
 8007f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8007f7e:	b480      	push	{r7}
 8007f80:	b087      	sub	sp, #28
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f90:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007f96:	b672      	cpsid	i
}
 8007f98:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d004      	beq.n	8007fac <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d032      	beq.n	800801c <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8a1b      	ldrh	r3, [r3, #16]
 8007fba:	827b      	strh	r3, [r7, #18]
 8007fbc:	e02b      	b.n	8008016 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68d9      	ldr	r1, [r3, #12]
 8007fc2:	8a7a      	ldrh	r2, [r7, #18]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	4413      	add	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	440b      	add	r3, r1
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01d      	beq.n	8008010 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68d9      	ldr	r1, [r3, #12]
 8007fd8:	8a7a      	ldrh	r2, [r7, #18]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	4413      	add	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	440b      	add	r3, r1
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d012      	beq.n	8008010 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68d9      	ldr	r1, [r3, #12]
 8007fee:	8a7a      	ldrh	r2, [r7, #18]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	4413      	add	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	440b      	add	r3, r1
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	849a      	strh	r2, [r3, #36]	@ 0x24
                    tpdoDeleted = 2U;
 800800c:	2302      	movs	r3, #2
 800800e:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8008010:	8a7b      	ldrh	r3, [r7, #18]
 8008012:	3b01      	subs	r3, #1
 8008014:	827b      	strh	r3, [r7, #18]
 8008016:	8a7b      	ldrh	r3, [r7, #18]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1d0      	bne.n	8007fbe <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f383 8810 	msr	PRIMASK, r3
}
 8008028:	bf00      	nop
    if (tpdoDeleted) {
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d006      	beq.n	800803e <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	8a5b      	ldrh	r3, [r3, #18]
 8008034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008038:	b29a      	uxth	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	825a      	strh	r2, [r3, #18]
    }
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d02e      	beq.n	80080ce <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	8a5b      	ldrh	r3, [r3, #18]
 8008074:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & CAN_ESR_BOFF) {
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0304 	and.w	r3, r3, #4
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8008086:	89fb      	ldrh	r3, [r7, #14]
 8008088:	f043 0304 	orr.w	r3, r3, #4
 800808c:	81fb      	strh	r3, [r7, #14]
 800808e:	e01b      	b.n	80080c8 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	f423 7341 	bic.w	r3, r3, #772	@ 0x304
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 80080a6:	89fb      	ldrh	r3, [r7, #14]
 80080a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ac:	f043 0301 	orr.w	r3, r3, #1
 80080b0:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 80080bc:	89fb      	ldrh	r3, [r7, #14]
 80080be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080c2:	f043 0302 	orr.w	r3, r3, #2
 80080c6:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	89fa      	ldrh	r2, [r7, #14]
 80080cc:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 80080ce:	bf00      	nop
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08c      	sub	sp, #48	@ 0x30
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 80080e8:	2300      	movs	r3, #0
 80080ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80080f2:	f107 0314 	add.w	r3, r7, #20
 80080f6:	3305      	adds	r3, #5
 80080f8:	4a2c      	ldr	r2, [pc, #176]	@ (80081ac <prv_read_can_received_msg+0xd0>)
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f004 fb4b 	bl	800c798 <HAL_CAN_GetRxMessage>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d14c      	bne.n	80081a2 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8008108:	4b28      	ldr	r3, [pc, #160]	@ (80081ac <prv_read_can_received_msg+0xd0>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a27      	ldr	r2, [pc, #156]	@ (80081ac <prv_read_can_received_msg+0xd0>)
 800810e:	68d2      	ldr	r2, [r2, #12]
 8008110:	2a02      	cmp	r2, #2
 8008112:	d102      	bne.n	800811a <prv_read_can_received_msg+0x3e>
 8008114:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008118:	e000      	b.n	800811c <prv_read_can_received_msg+0x40>
 800811a:	2200      	movs	r2, #0
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8008120:	4b22      	ldr	r3, [pc, #136]	@ (80081ac <prv_read_can_received_msg+0xd0>)
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 800812c:	4b20      	ldr	r3, [pc, #128]	@ (80081b0 <prv_read_can_received_msg+0xd4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 8008136:	be00      	bkpt	0x0000
 8008138:	e01f      	b.n	800817a <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 800813a:	4b1d      	ldr	r3, [pc, #116]	@ (80081b0 <prv_read_can_received_msg+0xd4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8008142:	4b1b      	ldr	r3, [pc, #108]	@ (80081b0 <prv_read_can_received_msg+0xd4>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	891b      	ldrh	r3, [r3, #8]
 8008148:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800814a:	e013      	b.n	8008174 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 800814c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	4053      	eors	r3, r2
 8008156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008158:	8852      	ldrh	r2, [r2, #2]
 800815a:	4013      	ands	r3, r2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d103      	bne.n	8008168 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8008160:	2301      	movs	r3, #1
 8008162:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                break;
 8008166:	e008      	b.n	800817a <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8008168:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800816a:	3b01      	subs	r3, #1
 800816c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800816e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008170:	330c      	adds	r3, #12
 8008172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008174:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e8      	bne.n	800814c <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800817a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800817e:	2b00      	cmp	r3, #0
 8008180:	d010      	beq.n	80081a4 <prv_read_can_received_msg+0xc8>
 8008182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00d      	beq.n	80081a4 <prv_read_can_received_msg+0xc8>
 8008188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d009      	beq.n	80081a4 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8008190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008196:	6852      	ldr	r2, [r2, #4]
 8008198:	f107 0114 	add.w	r1, r7, #20
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	e000      	b.n	80081a4 <prv_read_can_received_msg+0xc8>
        return;
 80081a2:	bf00      	nop
    }
}
 80081a4:	3730      	adds	r7, #48	@ 0x30
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	200004ec 	.word	0x200004ec
 80081b0:	200004d0 	.word	0x200004d0

080081b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 80081bc:	2200      	movs	r2, #0
 80081be:	2100      	movs	r1, #0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff ff8b 	bl	80080dc <prv_read_can_received_msg>
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 80081d6:	2200      	movs	r2, #0
 80081d8:	2101      	movs	r1, #1
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff ff7e 	bl	80080dc <prv_read_can_received_msg>
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d03d      	beq.n	8008284 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800820e:	f3ef 8310 	mrs	r3, PRIMASK
 8008212:	60fb      	str	r3, [r7, #12]
  return(result);
 8008214:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800821a:	b672      	cpsid	i
}
 800821c:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	8a1b      	ldrh	r3, [r3, #16]
 8008222:	827b      	strh	r3, [r7, #18]
 8008224:	e01e      	b.n	8008264 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d014      	beq.n	8008258 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 800822e:	6979      	ldr	r1, [r7, #20]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7ff fe21 	bl	8007e78 <prv_send_can_message>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00d      	beq.n	8008258 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2200      	movs	r2, #0
 8008240:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008246:	b29b      	uxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	695a      	ldr	r2, [r3, #20]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8008258:	8a7b      	ldrh	r3, [r7, #18]
 800825a:	3b01      	subs	r3, #1
 800825c:	827b      	strh	r3, [r7, #18]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	3318      	adds	r3, #24
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	8a7b      	ldrh	r3, [r7, #18]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1dd      	bne.n	8008226 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 800826a:	8a7b      	ldrh	r3, [r7, #18]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	849a      	strh	r2, [r3, #36]	@ 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f383 8810 	msr	PRIMASK, r3
}
 8008282:	bf00      	nop
    }
}
 8008284:	bf00      	nop
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8008294:	4b04      	ldr	r3, [pc, #16]	@ (80082a8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff ffa4 	bl	80081e8 <CO_CANinterrupt_TX>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	200004d0 	.word	0x200004d0

080082ac <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80082b4:	4b04      	ldr	r3, [pc, #16]	@ (80082c8 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2101      	movs	r1, #1
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff ff94 	bl	80081e8 <CO_CANinterrupt_TX>
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	200004d0 	.word	0x200004d0

080082cc <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80082d4:	4b04      	ldr	r3, [pc, #16]	@ (80082e8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2101      	movs	r1, #1
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff ff84 	bl	80081e8 <CO_CANinterrupt_TX>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	200004d0 	.word	0x200004d0

080082ec <OD_get_f32>:
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af02      	add	r7, sp, #8
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	607a      	str	r2, [r7, #4]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	460b      	mov	r3, r1
 80082fa:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80082fc:	7af9      	ldrb	r1, [r7, #11]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	2304      	movs	r3, #4
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f7fa fa0e 	bl	8002728 <OD_get_value>
 800830c:	4603      	mov	r3, r0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <_micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

unsigned long _micros(){
 8008316:	b580      	push	{r7, lr}
 8008318:	af00      	add	r7, sp, #0
	return HAL_GetTick()*1000;
 800831a:	f002 fec9 	bl	800b0b0 <HAL_GetTick>
 800831e:	4603      	mov	r3, r0
 8008320:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008324:	fb02 f303 	mul.w	r3, r2, r3
}
 8008328:	4618      	mov	r0, r3
 800832a:	bd80      	pop	{r7, pc}

0800832c <Update_dt>:

void Update_dt()
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0

	 static uint32_t t_prev = 0;
	uint32_t t_now = _micros();
 8008332:	f7ff fff0 	bl	8008316 <_micros>
 8008336:	6078      	str	r0, [r7, #4]
	dt = (t_now - t_prev) / 1000000.0f;
 8008338:	4b15      	ldr	r3, [pc, #84]	@ (8008390 <Update_dt+0x64>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	ee07 3a90 	vmov	s15, r3
 8008344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008348:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8008394 <Update_dt+0x68>
 800834c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008350:	4b11      	ldr	r3, [pc, #68]	@ (8008398 <Update_dt+0x6c>)
 8008352:	edc3 7a00 	vstr	s15, [r3]
	if (dt <= 0.0f || dt > 0.5f) dt = 0.001f;
 8008356:	4b10      	ldr	r3, [pc, #64]	@ (8008398 <Update_dt+0x6c>)
 8008358:	edd3 7a00 	vldr	s15, [r3]
 800835c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008364:	d909      	bls.n	800837a <Update_dt+0x4e>
 8008366:	4b0c      	ldr	r3, [pc, #48]	@ (8008398 <Update_dt+0x6c>)
 8008368:	edd3 7a00 	vldr	s15, [r3]
 800836c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008378:	dd02      	ble.n	8008380 <Update_dt+0x54>
 800837a:	4b07      	ldr	r3, [pc, #28]	@ (8008398 <Update_dt+0x6c>)
 800837c:	4a07      	ldr	r2, [pc, #28]	@ (800839c <Update_dt+0x70>)
 800837e:	601a      	str	r2, [r3, #0]
	t_prev = t_now;
 8008380:	4a03      	ldr	r2, [pc, #12]	@ (8008390 <Update_dt+0x64>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6013      	str	r3, [r2, #0]

}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000968 	.word	0x20000968
 8008394:	49742400 	.word	0x49742400
 8008398:	20000574 	.word	0x20000574
 800839c:	3a83126f 	.word	0x3a83126f

080083a0 <delay_us>:
	if (speed_dt <= 0.0f || speed_dt > 0.5f) speed_dt = 0.001f;
	t_speed_prev = t_speed_now;
}

void delay_us (uint16_t us)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80083aa:	4b09      	ldr	r3, [pc, #36]	@ (80083d0 <delay_us+0x30>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2200      	movs	r2, #0
 80083b0:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 80083b2:	bf00      	nop
 80083b4:	4b06      	ldr	r3, [pc, #24]	@ (80083d0 <delay_us+0x30>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d3f9      	bcc.n	80083b4 <delay_us+0x14>
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	200007a0 	.word	0x200007a0

080083d4 <spiCalcEvenParity>:

uint8_t spiCalcEvenParity(uint16_t value) {
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	80fb      	strh	r3, [r7, #6]
    uint8_t cnt = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 16; i++) {
 80083e2:	2300      	movs	r3, #0
 80083e4:	73bb      	strb	r3, [r7, #14]
 80083e6:	e00d      	b.n	8008404 <spiCalcEvenParity+0x30>
        if (value & 0x1) cnt++;
 80083e8:	88fb      	ldrh	r3, [r7, #6]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <spiCalcEvenParity+0x24>
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	3301      	adds	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
        value >>= 1;
 80083f8:	88fb      	ldrh	r3, [r7, #6]
 80083fa:	085b      	lsrs	r3, r3, #1
 80083fc:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < 16; i++) {
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	3301      	adds	r3, #1
 8008402:	73bb      	strb	r3, [r7, #14]
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d9ee      	bls.n	80083e8 <spiCalcEvenParity+0x14>
    }
    return cnt & 0x1;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	b2db      	uxtb	r3, r3
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
	...

08008420 <AS5147U_ReadAngle>:

uint16_t AS5147U_ReadAngle() {
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af02      	add	r7, sp, #8
    uint16_t command = AS5147U_ANGLE_REG ;
 8008426:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800842a:	80bb      	strh	r3, [r7, #4]
    command |= (1 << 14);
 800842c:	88bb      	ldrh	r3, [r7, #4]
 800842e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008432:	b29b      	uxth	r3, r3
 8008434:	80bb      	strh	r3, [r7, #4]
    command |= ((uint16_t)spiCalcEvenParity(command) << 15);
 8008436:	88bb      	ldrh	r3, [r7, #4]
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff ffcb 	bl	80083d4 <spiCalcEvenParity>
 800843e:	4603      	mov	r3, r0
 8008440:	03db      	lsls	r3, r3, #15
 8008442:	b21a      	sxth	r2, r3
 8008444:	88bb      	ldrh	r3, [r7, #4]
 8008446:	b21b      	sxth	r3, r3
 8008448:	4313      	orrs	r3, r2
 800844a:	b21b      	sxth	r3, r3
 800844c:	b29b      	uxth	r3, r3
 800844e:	80bb      	strh	r3, [r7, #4]
    uint16_t receivedData;

    uint16_t nop = 0x0000;
 8008450:	2300      	movs	r3, #0
 8008452:	803b      	strh	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8008454:	2200      	movs	r2, #0
 8008456:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800845a:	481a      	ldr	r0, [pc, #104]	@ (80084c4 <AS5147U_ReadAngle+0xa4>)
 800845c:	f005 fbae 	bl	800dbbc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&command, 1, HAL_MAX_DELAY);
 8008460:	1d39      	adds	r1, r7, #4
 8008462:	f04f 33ff 	mov.w	r3, #4294967295
 8008466:	2201      	movs	r2, #1
 8008468:	4817      	ldr	r0, [pc, #92]	@ (80084c8 <AS5147U_ReadAngle+0xa8>)
 800846a:	f006 fa82 	bl	800e972 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800846e:	2201      	movs	r2, #1
 8008470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008474:	4813      	ldr	r0, [pc, #76]	@ (80084c4 <AS5147U_ReadAngle+0xa4>)
 8008476:	f005 fba1 	bl	800dbbc <HAL_GPIO_WritePin>
    delay_us(10);
 800847a:	200a      	movs	r0, #10
 800847c:	f7ff ff90 	bl	80083a0 <delay_us>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8008480:	2200      	movs	r2, #0
 8008482:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008486:	480f      	ldr	r0, [pc, #60]	@ (80084c4 <AS5147U_ReadAngle+0xa4>)
 8008488:	f005 fb98 	bl	800dbbc <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)&nop ,(uint8_t*)&receivedData, 1, HAL_MAX_DELAY);
 800848c:	1cba      	adds	r2, r7, #2
 800848e:	4639      	mov	r1, r7
 8008490:	f04f 33ff 	mov.w	r3, #4294967295
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	2301      	movs	r3, #1
 8008498:	480b      	ldr	r0, [pc, #44]	@ (80084c8 <AS5147U_ReadAngle+0xa8>)
 800849a:	f006 fbae 	bl	800ebfa <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800849e:	2201      	movs	r2, #1
 80084a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80084a4:	4807      	ldr	r0, [pc, #28]	@ (80084c4 <AS5147U_ReadAngle+0xa4>)
 80084a6:	f005 fb89 	bl	800dbbc <HAL_GPIO_WritePin>

    receivedData = receivedData >> (1 + 13 - AS5147U_BIT_RESOLUTION);
 80084aa:	887b      	ldrh	r3, [r7, #2]
 80084ac:	807b      	strh	r3, [r7, #2]
    const uint16_t data_mask = 0xFFFF >> (16 - AS5147U_BIT_RESOLUTION);
 80084ae:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80084b2:	80fb      	strh	r3, [r7, #6]
    return receivedData & data_mask;
 80084b4:	887a      	ldrh	r2, [r7, #2]
 80084b6:	88fb      	ldrh	r3, [r7, #6]
 80084b8:	4013      	ands	r3, r2
 80084ba:	b29b      	uxth	r3, r3

}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40020400 	.word	0x40020400
 80084c8:	200006b8 	.word	0x200006b8
 80084cc:	00000000 	.word	0x00000000

080084d0 <AS5147U_GetAngleRad>:
    while (angle_elec_rad >= 2 * M_PI) angle_elec_rad -= 2 * M_PI;
    while (angle_elec_rad < 0) angle_elec_rad += 2 * M_PI;
    return angle_elec_rad;
}

float AS5147U_GetAngleRad() {
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
    rawCount = AS5147U_ReadAngle();
 80084d4:	f7ff ffa4 	bl	8008420 <AS5147U_ReadAngle>
 80084d8:	4603      	mov	r3, r0
 80084da:	461a      	mov	r2, r3
 80084dc:	4b16      	ldr	r3, [pc, #88]	@ (8008538 <AS5147U_GetAngleRad+0x68>)
 80084de:	801a      	strh	r2, [r3, #0]
    return rawCount / 16384.0 * 2.0 * PI;
 80084e0:	4b15      	ldr	r3, [pc, #84]	@ (8008538 <AS5147U_GetAngleRad+0x68>)
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7f8 f83d 	bl	8000564 <__aeabi_i2d>
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	4b13      	ldr	r3, [pc, #76]	@ (800853c <AS5147U_GetAngleRad+0x6c>)
 80084f0:	f7f8 f9cc 	bl	800088c <__aeabi_ddiv>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4610      	mov	r0, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	f7f7 fee4 	bl	80002cc <__adddf3>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4610      	mov	r0, r2
 800850a:	4619      	mov	r1, r3
 800850c:	a308      	add	r3, pc, #32	@ (adr r3, 8008530 <AS5147U_GetAngleRad+0x60>)
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	f7f8 f891 	bl	8000638 <__aeabi_dmul>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4610      	mov	r0, r2
 800851c:	4619      	mov	r1, r3
 800851e:	f7f8 fb83 	bl	8000c28 <__aeabi_d2f>
 8008522:	4603      	mov	r3, r0
 8008524:	ee07 3a90 	vmov	s15, r3
}
 8008528:	eeb0 0a67 	vmov.f32	s0, s15
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	54442eea 	.word	0x54442eea
 8008534:	400921fb 	.word	0x400921fb
 8008538:	2000058a 	.word	0x2000058a
 800853c:	40d00000 	.word	0x40d00000

08008540 <electricalAngle>:

float electricalAngle() {
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
	float mechanical_angle_rad = AS5147U_GetAngleRad();
 8008546:	f7ff ffc3 	bl	80084d0 <AS5147U_GetAngleRad>
 800854a:	ed87 0a01 	vstr	s0, [r7, #4]
     elec_angle = ((mechanical_angle_rad - angle_offset)) * pole_pairs;
 800854e:	4b2e      	ldr	r3, [pc, #184]	@ (8008608 <electricalAngle+0xc8>)
 8008550:	edd3 7a00 	vldr	s15, [r3]
 8008554:	ed97 7a01 	vldr	s14, [r7, #4]
 8008558:	ee37 7a67 	vsub.f32	s14, s14, s15
 800855c:	4b2b      	ldr	r3, [pc, #172]	@ (800860c <electricalAngle+0xcc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	ee07 3a90 	vmov	s15, r3
 8008564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856c:	4b28      	ldr	r3, [pc, #160]	@ (8008610 <electricalAngle+0xd0>)
 800856e:	edc3 7a00 	vstr	s15, [r3]
    while (elec_angle >= 2 * M_PI) elec_angle -= 2 * M_PI;
 8008572:	e012      	b.n	800859a <electricalAngle+0x5a>
 8008574:	4b26      	ldr	r3, [pc, #152]	@ (8008610 <electricalAngle+0xd0>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4618      	mov	r0, r3
 800857a:	f7f8 f805 	bl	8000588 <__aeabi_f2d>
 800857e:	a320      	add	r3, pc, #128	@ (adr r3, 8008600 <electricalAngle+0xc0>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f7f7 fea0 	bl	80002c8 <__aeabi_dsub>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4610      	mov	r0, r2
 800858e:	4619      	mov	r1, r3
 8008590:	f7f8 fb4a 	bl	8000c28 <__aeabi_d2f>
 8008594:	4603      	mov	r3, r0
 8008596:	4a1e      	ldr	r2, [pc, #120]	@ (8008610 <electricalAngle+0xd0>)
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	4b1d      	ldr	r3, [pc, #116]	@ (8008610 <electricalAngle+0xd0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7f7 fff2 	bl	8000588 <__aeabi_f2d>
 80085a4:	a316      	add	r3, pc, #88	@ (adr r3, 8008600 <electricalAngle+0xc0>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f7f8 facb 	bl	8000b44 <__aeabi_dcmpge>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1df      	bne.n	8008574 <electricalAngle+0x34>
    while (elec_angle < 0) elec_angle += 2 * M_PI;
 80085b4:	e012      	b.n	80085dc <electricalAngle+0x9c>
 80085b6:	4b16      	ldr	r3, [pc, #88]	@ (8008610 <electricalAngle+0xd0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7f7 ffe4 	bl	8000588 <__aeabi_f2d>
 80085c0:	a30f      	add	r3, pc, #60	@ (adr r3, 8008600 <electricalAngle+0xc0>)
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f7f7 fe81 	bl	80002cc <__adddf3>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4610      	mov	r0, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	f7f8 fb29 	bl	8000c28 <__aeabi_d2f>
 80085d6:	4603      	mov	r3, r0
 80085d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008610 <electricalAngle+0xd0>)
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008610 <electricalAngle+0xd0>)
 80085de:	edd3 7a00 	vldr	s15, [r3]
 80085e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ea:	d4e4      	bmi.n	80085b6 <electricalAngle+0x76>
    return elec_angle;
 80085ec:	4b08      	ldr	r3, [pc, #32]	@ (8008610 <electricalAngle+0xd0>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	ee07 3a90 	vmov	s15, r3
}
 80085f4:	eeb0 0a67 	vmov.f32	s0, s15
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	54442d18 	.word	0x54442d18
 8008604:	401921fb 	.word	0x401921fb
 8008608:	2000057c 	.word	0x2000057c
 800860c:	200002b0 	.word	0x200002b0
 8008610:	200005d4 	.word	0x200005d4
 8008614:	00000000 	.word	0x00000000

08008618 <alignRotor>:


void alignRotor() {
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
    float V_align = 3.0;
 800861e:	4b36      	ldr	r3, [pc, #216]	@ (80086f8 <alignRotor+0xe0>)
 8008620:	607b      	str	r3, [r7, #4]

    Va = V_align;
 8008622:	4a36      	ldr	r2, [pc, #216]	@ (80086fc <alignRotor+0xe4>)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6013      	str	r3, [r2, #0]
    PWM_A = ((Va / 8.0 + 0.5) * PWM_PERIOD)*0.4;
 8008628:	4b34      	ldr	r3, [pc, #208]	@ (80086fc <alignRotor+0xe4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4618      	mov	r0, r3
 800862e:	f7f7 ffab 	bl	8000588 <__aeabi_f2d>
 8008632:	f04f 0200 	mov.w	r2, #0
 8008636:	4b32      	ldr	r3, [pc, #200]	@ (8008700 <alignRotor+0xe8>)
 8008638:	f7f8 f928 	bl	800088c <__aeabi_ddiv>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4610      	mov	r0, r2
 8008642:	4619      	mov	r1, r3
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	4b2e      	ldr	r3, [pc, #184]	@ (8008704 <alignRotor+0xec>)
 800864a:	f7f7 fe3f 	bl	80002cc <__adddf3>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4610      	mov	r0, r2
 8008654:	4619      	mov	r1, r3
 8008656:	a324      	add	r3, pc, #144	@ (adr r3, 80086e8 <alignRotor+0xd0>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f7 ffec 	bl	8000638 <__aeabi_dmul>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4610      	mov	r0, r2
 8008666:	4619      	mov	r1, r3
 8008668:	a321      	add	r3, pc, #132	@ (adr r3, 80086f0 <alignRotor+0xd8>)
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f7f7 ffe3 	bl	8000638 <__aeabi_dmul>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4610      	mov	r0, r2
 8008678:	4619      	mov	r1, r3
 800867a:	f7f8 fab5 	bl	8000be8 <__aeabi_d2uiz>
 800867e:	4603      	mov	r3, r0
 8008680:	b29a      	uxth	r2, r3
 8008682:	4b21      	ldr	r3, [pc, #132]	@ (8008708 <alignRotor+0xf0>)
 8008684:	801a      	strh	r2, [r3, #0]
    PWM_B = 0;
 8008686:	4b21      	ldr	r3, [pc, #132]	@ (800870c <alignRotor+0xf4>)
 8008688:	2200      	movs	r2, #0
 800868a:	801a      	strh	r2, [r3, #0]
    PWM_C = 0;
 800868c:	4b20      	ldr	r3, [pc, #128]	@ (8008710 <alignRotor+0xf8>)
 800868e:	2200      	movs	r2, #0
 8008690:	801a      	strh	r2, [r3, #0]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 8008692:	4b1d      	ldr	r3, [pc, #116]	@ (8008708 <alignRotor+0xf0>)
 8008694:	881a      	ldrh	r2, [r3, #0]
 8008696:	4b1f      	ldr	r3, [pc, #124]	@ (8008714 <alignRotor+0xfc>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 800869c:	4b1b      	ldr	r3, [pc, #108]	@ (800870c <alignRotor+0xf4>)
 800869e:	881a      	ldrh	r2, [r3, #0]
 80086a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008714 <alignRotor+0xfc>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 80086a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008710 <alignRotor+0xf8>)
 80086a8:	881a      	ldrh	r2, [r3, #0]
 80086aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008714 <alignRotor+0xfc>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    HAL_Delay(800);
 80086b0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80086b4:	f002 fd08 	bl	800b0c8 <HAL_Delay>

    angle_offset = AS5147U_GetAngleRad();
 80086b8:	f7ff ff0a 	bl	80084d0 <AS5147U_GetAngleRad>
 80086bc:	eef0 7a40 	vmov.f32	s15, s0
 80086c0:	4b15      	ldr	r3, [pc, #84]	@ (8008718 <alignRotor+0x100>)
 80086c2:	edc3 7a00 	vstr	s15, [r3]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80086c6:	4b13      	ldr	r3, [pc, #76]	@ (8008714 <alignRotor+0xfc>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2200      	movs	r2, #0
 80086cc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80086ce:	4b11      	ldr	r3, [pc, #68]	@ (8008714 <alignRotor+0xfc>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80086d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008714 <alignRotor+0xfc>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	00000000 	.word	0x00000000
 80086ec:	40a76e00 	.word	0x40a76e00
 80086f0:	9999999a 	.word	0x9999999a
 80086f4:	3fd99999 	.word	0x3fd99999
 80086f8:	40400000 	.word	0x40400000
 80086fc:	20000538 	.word	0x20000538
 8008700:	40200000 	.word	0x40200000
 8008704:	3fe00000 	.word	0x3fe00000
 8008708:	20000584 	.word	0x20000584
 800870c:	20000586 	.word	0x20000586
 8008710:	20000588 	.word	0x20000588
 8008714:	20000710 	.word	0x20000710
 8008718:	2000057c 	.word	0x2000057c
 800871c:	00000000 	.word	0x00000000

08008720 <clark>:
void clark()
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
 	i_alpha = ia;
 8008724:	4b12      	ldr	r3, [pc, #72]	@ (8008770 <clark+0x50>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a12      	ldr	r2, [pc, #72]	@ (8008774 <clark+0x54>)
 800872a:	6013      	str	r3, [r2, #0]
	i_beta = (ib - ic) / sqrt(3);
 800872c:	4b12      	ldr	r3, [pc, #72]	@ (8008778 <clark+0x58>)
 800872e:	ed93 7a00 	vldr	s14, [r3]
 8008732:	4b12      	ldr	r3, [pc, #72]	@ (800877c <clark+0x5c>)
 8008734:	edd3 7a00 	vldr	s15, [r3]
 8008738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800873c:	ee17 0a90 	vmov	r0, s15
 8008740:	f7f7 ff22 	bl	8000588 <__aeabi_f2d>
 8008744:	a308      	add	r3, pc, #32	@ (adr r3, 8008768 <clark+0x48>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f8 f89f 	bl	800088c <__aeabi_ddiv>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	f7f8 fa67 	bl	8000c28 <__aeabi_d2f>
 800875a:	4603      	mov	r3, r0
 800875c:	4a08      	ldr	r2, [pc, #32]	@ (8008780 <clark+0x60>)
 800875e:	6013      	str	r3, [r2, #0]
}
 8008760:	bf00      	nop
 8008762:	bd80      	pop	{r7, pc}
 8008764:	f3af 8000 	nop.w
 8008768:	e8584caa 	.word	0xe8584caa
 800876c:	3ffbb67a 	.word	0x3ffbb67a
 8008770:	20000514 	.word	0x20000514
 8008774:	20000520 	.word	0x20000520
 8008778:	20000518 	.word	0x20000518
 800877c:	2000051c 	.word	0x2000051c
 8008780:	20000524 	.word	0x20000524

08008784 <park>:

void park()
{
 8008784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008788:	af00      	add	r7, sp, #0
	i_d = i_alpha*cos(theta) + i_beta*sin(theta);
 800878a:	4b59      	ldr	r3, [pc, #356]	@ (80088f0 <park+0x16c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f7f7 fefa 	bl	8000588 <__aeabi_f2d>
 8008794:	4604      	mov	r4, r0
 8008796:	460d      	mov	r5, r1
 8008798:	4b56      	ldr	r3, [pc, #344]	@ (80088f4 <park+0x170>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f7f7 fef3 	bl	8000588 <__aeabi_f2d>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	ec43 2b10 	vmov	d0, r2, r3
 80087aa:	f00b fe39 	bl	8014420 <cos>
 80087ae:	ec53 2b10 	vmov	r2, r3, d0
 80087b2:	4620      	mov	r0, r4
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7f7 ff3f 	bl	8000638 <__aeabi_dmul>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4690      	mov	r8, r2
 80087c0:	4699      	mov	r9, r3
 80087c2:	4b4d      	ldr	r3, [pc, #308]	@ (80088f8 <park+0x174>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f7 fede 	bl	8000588 <__aeabi_f2d>
 80087cc:	4604      	mov	r4, r0
 80087ce:	460d      	mov	r5, r1
 80087d0:	4b48      	ldr	r3, [pc, #288]	@ (80088f4 <park+0x170>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7f7 fed7 	bl	8000588 <__aeabi_f2d>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	ec43 2b10 	vmov	d0, r2, r3
 80087e2:	f00b fe71 	bl	80144c8 <sin>
 80087e6:	ec53 2b10 	vmov	r2, r3, d0
 80087ea:	4620      	mov	r0, r4
 80087ec:	4629      	mov	r1, r5
 80087ee:	f7f7 ff23 	bl	8000638 <__aeabi_dmul>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4640      	mov	r0, r8
 80087f8:	4649      	mov	r1, r9
 80087fa:	f7f7 fd67 	bl	80002cc <__adddf3>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4610      	mov	r0, r2
 8008804:	4619      	mov	r1, r3
 8008806:	f7f8 fa0f 	bl	8000c28 <__aeabi_d2f>
 800880a:	4603      	mov	r3, r0
 800880c:	4a3b      	ldr	r2, [pc, #236]	@ (80088fc <park+0x178>)
 800880e:	6013      	str	r3, [r2, #0]
	i_q = -i_alpha*sin(theta) + i_beta*cos(theta);
 8008810:	4b37      	ldr	r3, [pc, #220]	@ (80088f0 <park+0x16c>)
 8008812:	edd3 7a00 	vldr	s15, [r3]
 8008816:	eef1 7a67 	vneg.f32	s15, s15
 800881a:	ee17 3a90 	vmov	r3, s15
 800881e:	4618      	mov	r0, r3
 8008820:	f7f7 feb2 	bl	8000588 <__aeabi_f2d>
 8008824:	4604      	mov	r4, r0
 8008826:	460d      	mov	r5, r1
 8008828:	4b32      	ldr	r3, [pc, #200]	@ (80088f4 <park+0x170>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f7f7 feab 	bl	8000588 <__aeabi_f2d>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	ec43 2b10 	vmov	d0, r2, r3
 800883a:	f00b fe45 	bl	80144c8 <sin>
 800883e:	ec53 2b10 	vmov	r2, r3, d0
 8008842:	4620      	mov	r0, r4
 8008844:	4629      	mov	r1, r5
 8008846:	f7f7 fef7 	bl	8000638 <__aeabi_dmul>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4690      	mov	r8, r2
 8008850:	4699      	mov	r9, r3
 8008852:	4b29      	ldr	r3, [pc, #164]	@ (80088f8 <park+0x174>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4618      	mov	r0, r3
 8008858:	f7f7 fe96 	bl	8000588 <__aeabi_f2d>
 800885c:	4604      	mov	r4, r0
 800885e:	460d      	mov	r5, r1
 8008860:	4b24      	ldr	r3, [pc, #144]	@ (80088f4 <park+0x170>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4618      	mov	r0, r3
 8008866:	f7f7 fe8f 	bl	8000588 <__aeabi_f2d>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	ec43 2b10 	vmov	d0, r2, r3
 8008872:	f00b fdd5 	bl	8014420 <cos>
 8008876:	ec53 2b10 	vmov	r2, r3, d0
 800887a:	4620      	mov	r0, r4
 800887c:	4629      	mov	r1, r5
 800887e:	f7f7 fedb 	bl	8000638 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4640      	mov	r0, r8
 8008888:	4649      	mov	r1, r9
 800888a:	f7f7 fd1f 	bl	80002cc <__adddf3>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4610      	mov	r0, r2
 8008894:	4619      	mov	r1, r3
 8008896:	f7f8 f9c7 	bl	8000c28 <__aeabi_d2f>
 800889a:	4603      	mov	r3, r0
 800889c:	4a18      	ldr	r2, [pc, #96]	@ (8008900 <park+0x17c>)
 800889e:	6013      	str	r3, [r2, #0]
	idq = sqrt( i_d * i_d + i_q * i_q);
 80088a0:	4b16      	ldr	r3, [pc, #88]	@ (80088fc <park+0x178>)
 80088a2:	ed93 7a00 	vldr	s14, [r3]
 80088a6:	4b15      	ldr	r3, [pc, #84]	@ (80088fc <park+0x178>)
 80088a8:	edd3 7a00 	vldr	s15, [r3]
 80088ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088b0:	4b13      	ldr	r3, [pc, #76]	@ (8008900 <park+0x17c>)
 80088b2:	edd3 6a00 	vldr	s13, [r3]
 80088b6:	4b12      	ldr	r3, [pc, #72]	@ (8008900 <park+0x17c>)
 80088b8:	edd3 7a00 	vldr	s15, [r3]
 80088bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088c4:	ee17 0a90 	vmov	r0, s15
 80088c8:	f7f7 fe5e 	bl	8000588 <__aeabi_f2d>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	ec43 2b10 	vmov	d0, r2, r3
 80088d4:	f00b fd78 	bl	80143c8 <sqrt>
 80088d8:	ec53 2b10 	vmov	r2, r3, d0
 80088dc:	4610      	mov	r0, r2
 80088de:	4619      	mov	r1, r3
 80088e0:	f7f8 f9a2 	bl	8000c28 <__aeabi_d2f>
 80088e4:	4603      	mov	r3, r0
 80088e6:	4a07      	ldr	r2, [pc, #28]	@ (8008904 <park+0x180>)
 80088e8:	6013      	str	r3, [r2, #0]
}
 80088ea:	bf00      	nop
 80088ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80088f0:	20000520 	.word	0x20000520
 80088f4:	200005c0 	.word	0x200005c0
 80088f8:	20000524 	.word	0x20000524
 80088fc:	20000528 	.word	0x20000528
 8008900:	2000052c 	.word	0x2000052c
 8008904:	200005f8 	.word	0x200005f8

08008908 <setpwm>:

void setpwm(){
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0

	PWM_A = ((Va / 8.0 + 1.0) * PWM_PERIOD ) * 0.4;
 800890c:	4b7a      	ldr	r3, [pc, #488]	@ (8008af8 <setpwm+0x1f0>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4618      	mov	r0, r3
 8008912:	f7f7 fe39 	bl	8000588 <__aeabi_f2d>
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	4b78      	ldr	r3, [pc, #480]	@ (8008afc <setpwm+0x1f4>)
 800891c:	f7f7 ffb6 	bl	800088c <__aeabi_ddiv>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4610      	mov	r0, r2
 8008926:	4619      	mov	r1, r3
 8008928:	f04f 0200 	mov.w	r2, #0
 800892c:	4b74      	ldr	r3, [pc, #464]	@ (8008b00 <setpwm+0x1f8>)
 800892e:	f7f7 fccd 	bl	80002cc <__adddf3>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4610      	mov	r0, r2
 8008938:	4619      	mov	r1, r3
 800893a:	a369      	add	r3, pc, #420	@ (adr r3, 8008ae0 <setpwm+0x1d8>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fe7a 	bl	8000638 <__aeabi_dmul>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4610      	mov	r0, r2
 800894a:	4619      	mov	r1, r3
 800894c:	a366      	add	r3, pc, #408	@ (adr r3, 8008ae8 <setpwm+0x1e0>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fe71 	bl	8000638 <__aeabi_dmul>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4610      	mov	r0, r2
 800895c:	4619      	mov	r1, r3
 800895e:	f7f8 f943 	bl	8000be8 <__aeabi_d2uiz>
 8008962:	4603      	mov	r3, r0
 8008964:	b29a      	uxth	r2, r3
 8008966:	4b67      	ldr	r3, [pc, #412]	@ (8008b04 <setpwm+0x1fc>)
 8008968:	801a      	strh	r2, [r3, #0]
	PWM_B = ((Vb / 8.0 + 1.0) * PWM_PERIOD ) * 0.4;
 800896a:	4b67      	ldr	r3, [pc, #412]	@ (8008b08 <setpwm+0x200>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4618      	mov	r0, r3
 8008970:	f7f7 fe0a 	bl	8000588 <__aeabi_f2d>
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	4b60      	ldr	r3, [pc, #384]	@ (8008afc <setpwm+0x1f4>)
 800897a:	f7f7 ff87 	bl	800088c <__aeabi_ddiv>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4610      	mov	r0, r2
 8008984:	4619      	mov	r1, r3
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	4b5d      	ldr	r3, [pc, #372]	@ (8008b00 <setpwm+0x1f8>)
 800898c:	f7f7 fc9e 	bl	80002cc <__adddf3>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4610      	mov	r0, r2
 8008996:	4619      	mov	r1, r3
 8008998:	a351      	add	r3, pc, #324	@ (adr r3, 8008ae0 <setpwm+0x1d8>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fe4b 	bl	8000638 <__aeabi_dmul>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	4610      	mov	r0, r2
 80089a8:	4619      	mov	r1, r3
 80089aa:	a34f      	add	r3, pc, #316	@ (adr r3, 8008ae8 <setpwm+0x1e0>)
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f7f7 fe42 	bl	8000638 <__aeabi_dmul>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4610      	mov	r0, r2
 80089ba:	4619      	mov	r1, r3
 80089bc:	f7f8 f914 	bl	8000be8 <__aeabi_d2uiz>
 80089c0:	4603      	mov	r3, r0
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	4b51      	ldr	r3, [pc, #324]	@ (8008b0c <setpwm+0x204>)
 80089c6:	801a      	strh	r2, [r3, #0]
	PWM_C = ((Vc / 8.0 + 1.0) * PWM_PERIOD ) * 0.4;
 80089c8:	4b51      	ldr	r3, [pc, #324]	@ (8008b10 <setpwm+0x208>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7f7 fddb 	bl	8000588 <__aeabi_f2d>
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	4b49      	ldr	r3, [pc, #292]	@ (8008afc <setpwm+0x1f4>)
 80089d8:	f7f7 ff58 	bl	800088c <__aeabi_ddiv>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4610      	mov	r0, r2
 80089e2:	4619      	mov	r1, r3
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	4b45      	ldr	r3, [pc, #276]	@ (8008b00 <setpwm+0x1f8>)
 80089ea:	f7f7 fc6f 	bl	80002cc <__adddf3>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	a33a      	add	r3, pc, #232	@ (adr r3, 8008ae0 <setpwm+0x1d8>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 fe1c 	bl	8000638 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4610      	mov	r0, r2
 8008a06:	4619      	mov	r1, r3
 8008a08:	a337      	add	r3, pc, #220	@ (adr r3, 8008ae8 <setpwm+0x1e0>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fe13 	bl	8000638 <__aeabi_dmul>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4610      	mov	r0, r2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f7f8 f8e5 	bl	8000be8 <__aeabi_d2uiz>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	4b3c      	ldr	r3, [pc, #240]	@ (8008b14 <setpwm+0x20c>)
 8008a24:	801a      	strh	r2, [r3, #0]


	 current_sq = sqrt(ia * ia + ib * ib + ic * ic);
 8008a26:	4b3c      	ldr	r3, [pc, #240]	@ (8008b18 <setpwm+0x210>)
 8008a28:	ed93 7a00 	vldr	s14, [r3]
 8008a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8008b18 <setpwm+0x210>)
 8008a2e:	edd3 7a00 	vldr	s15, [r3]
 8008a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a36:	4b39      	ldr	r3, [pc, #228]	@ (8008b1c <setpwm+0x214>)
 8008a38:	edd3 6a00 	vldr	s13, [r3]
 8008a3c:	4b37      	ldr	r3, [pc, #220]	@ (8008b1c <setpwm+0x214>)
 8008a3e:	edd3 7a00 	vldr	s15, [r3]
 8008a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a4a:	4b35      	ldr	r3, [pc, #212]	@ (8008b20 <setpwm+0x218>)
 8008a4c:	edd3 6a00 	vldr	s13, [r3]
 8008a50:	4b33      	ldr	r3, [pc, #204]	@ (8008b20 <setpwm+0x218>)
 8008a52:	edd3 7a00 	vldr	s15, [r3]
 8008a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a5e:	ee17 0a90 	vmov	r0, s15
 8008a62:	f7f7 fd91 	bl	8000588 <__aeabi_f2d>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	ec43 2b10 	vmov	d0, r2, r3
 8008a6e:	f00b fcab 	bl	80143c8 <sqrt>
 8008a72:	ec53 2b10 	vmov	r2, r3, d0
 8008a76:	4610      	mov	r0, r2
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f7f8 f8d5 	bl	8000c28 <__aeabi_d2f>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4a28      	ldr	r2, [pc, #160]	@ (8008b24 <setpwm+0x21c>)
 8008a82:	6013      	str	r3, [r2, #0]
	 //current_sq = ia * ia + ib * ib + ic * ic;


	if (current_sq > OVERCURRENT_LIMIT_SQ) {
 8008a84:	4b27      	ldr	r3, [pc, #156]	@ (8008b24 <setpwm+0x21c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7f7 fd7d 	bl	8000588 <__aeabi_f2d>
 8008a8e:	a318      	add	r3, pc, #96	@ (adr r3, 8008af0 <setpwm+0x1e8>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f8 f860 	bl	8000b58 <__aeabi_dcmpgt>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00c      	beq.n	8008ab8 <setpwm+0x1b0>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8008a9e:	4b22      	ldr	r3, [pc, #136]	@ (8008b28 <setpwm+0x220>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8008aa6:	4b20      	ldr	r3, [pc, #128]	@ (8008b28 <setpwm+0x220>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	639a      	str	r2, [r3, #56]	@ 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8008aae:	4b1e      	ldr	r3, [pc, #120]	@ (8008b28 <setpwm+0x220>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
//		} else {
//		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
//		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
//		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
//		}
}
 8008ab6:	e00e      	b.n	8008ad6 <setpwm+0x1ce>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 8008ab8:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <setpwm+0x1fc>)
 8008aba:	881a      	ldrh	r2, [r3, #0]
 8008abc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b28 <setpwm+0x220>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 8008ac2:	4b12      	ldr	r3, [pc, #72]	@ (8008b0c <setpwm+0x204>)
 8008ac4:	881a      	ldrh	r2, [r3, #0]
 8008ac6:	4b18      	ldr	r3, [pc, #96]	@ (8008b28 <setpwm+0x220>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	639a      	str	r2, [r3, #56]	@ 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 8008acc:	4b11      	ldr	r3, [pc, #68]	@ (8008b14 <setpwm+0x20c>)
 8008ace:	881a      	ldrh	r2, [r3, #0]
 8008ad0:	4b15      	ldr	r3, [pc, #84]	@ (8008b28 <setpwm+0x220>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008ad6:	bf00      	nop
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w
 8008ae0:	00000000 	.word	0x00000000
 8008ae4:	40a76e00 	.word	0x40a76e00
 8008ae8:	9999999a 	.word	0x9999999a
 8008aec:	3fd99999 	.word	0x3fd99999
 8008af0:	66666666 	.word	0x66666666
 8008af4:	40066666 	.word	0x40066666
 8008af8:	20000538 	.word	0x20000538
 8008afc:	40200000 	.word	0x40200000
 8008b00:	3ff00000 	.word	0x3ff00000
 8008b04:	20000584 	.word	0x20000584
 8008b08:	2000053c 	.word	0x2000053c
 8008b0c:	20000586 	.word	0x20000586
 8008b10:	20000540 	.word	0x20000540
 8008b14:	20000588 	.word	0x20000588
 8008b18:	20000514 	.word	0x20000514
 8008b1c:	20000518 	.word	0x20000518
 8008b20:	2000051c 	.word	0x2000051c
 8008b24:	20000508 	.word	0x20000508
 8008b28:	20000710 	.word	0x20000710

08008b2c <update_PID>:

void update_PID()
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
    if((velocity_ref > -100 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 100))
 8008b30:	4ba2      	ldr	r3, [pc, #648]	@ (8008dbc <update_PID+0x290>)
 8008b32:	edd3 7a00 	vldr	s15, [r3]
 8008b36:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8008dc0 <update_PID+0x294>
 8008b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b42:	dd07      	ble.n	8008b54 <update_PID+0x28>
 8008b44:	4b9d      	ldr	r3, [pc, #628]	@ (8008dbc <update_PID+0x290>)
 8008b46:	edd3 7a00 	vldr	s15, [r3]
 8008b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b52:	d911      	bls.n	8008b78 <update_PID+0x4c>
 8008b54:	4b99      	ldr	r3, [pc, #612]	@ (8008dbc <update_PID+0x290>)
 8008b56:	edd3 7a00 	vldr	s15, [r3]
 8008b5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b62:	dd10      	ble.n	8008b86 <update_PID+0x5a>
 8008b64:	4b95      	ldr	r3, [pc, #596]	@ (8008dbc <update_PID+0x290>)
 8008b66:	edd3 7a00 	vldr	s15, [r3]
 8008b6a:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8008dc4 <update_PID+0x298>
 8008b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b76:	d806      	bhi.n	8008b86 <update_PID+0x5a>
    {
        Ki = 0.8;
 8008b78:	4b93      	ldr	r3, [pc, #588]	@ (8008dc8 <update_PID+0x29c>)
 8008b7a:	4a94      	ldr	r2, [pc, #592]	@ (8008dcc <update_PID+0x2a0>)
 8008b7c:	601a      	str	r2, [r3, #0]
        Kp = 0.9;
 8008b7e:	4b94      	ldr	r3, [pc, #592]	@ (8008dd0 <update_PID+0x2a4>)
 8008b80:	4a94      	ldr	r2, [pc, #592]	@ (8008dd4 <update_PID+0x2a8>)
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e182      	b.n	8008e8c <update_PID+0x360>
    }
    else if((velocity_ref > -150 && velocity_ref <= -100)||(velocity_ref > 100 && velocity_ref <= 150))
 8008b86:	4b8d      	ldr	r3, [pc, #564]	@ (8008dbc <update_PID+0x290>)
 8008b88:	edd3 7a00 	vldr	s15, [r3]
 8008b8c:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8008dd8 <update_PID+0x2ac>
 8008b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b98:	dd09      	ble.n	8008bae <update_PID+0x82>
 8008b9a:	4b88      	ldr	r3, [pc, #544]	@ (8008dbc <update_PID+0x290>)
 8008b9c:	edd3 7a00 	vldr	s15, [r3]
 8008ba0:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8008dc0 <update_PID+0x294>
 8008ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bac:	d913      	bls.n	8008bd6 <update_PID+0xaa>
 8008bae:	4b83      	ldr	r3, [pc, #524]	@ (8008dbc <update_PID+0x290>)
 8008bb0:	edd3 7a00 	vldr	s15, [r3]
 8008bb4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8008dc4 <update_PID+0x298>
 8008bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc0:	dd11      	ble.n	8008be6 <update_PID+0xba>
 8008bc2:	4b7e      	ldr	r3, [pc, #504]	@ (8008dbc <update_PID+0x290>)
 8008bc4:	edd3 7a00 	vldr	s15, [r3]
 8008bc8:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8008ddc <update_PID+0x2b0>
 8008bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd4:	d807      	bhi.n	8008be6 <update_PID+0xba>
    {
        Ki = 1.0;
 8008bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8008dc8 <update_PID+0x29c>)
 8008bd8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008bdc:	601a      	str	r2, [r3, #0]
        Kp = 1.1;
 8008bde:	4b7c      	ldr	r3, [pc, #496]	@ (8008dd0 <update_PID+0x2a4>)
 8008be0:	4a7f      	ldr	r2, [pc, #508]	@ (8008de0 <update_PID+0x2b4>)
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	e152      	b.n	8008e8c <update_PID+0x360>
    }
    else if((velocity_ref > -250 && velocity_ref <= -150)||(velocity_ref > 150 && velocity_ref <= 250))
 8008be6:	4b75      	ldr	r3, [pc, #468]	@ (8008dbc <update_PID+0x290>)
 8008be8:	edd3 7a00 	vldr	s15, [r3]
 8008bec:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8008de4 <update_PID+0x2b8>
 8008bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	dd09      	ble.n	8008c0e <update_PID+0xe2>
 8008bfa:	4b70      	ldr	r3, [pc, #448]	@ (8008dbc <update_PID+0x290>)
 8008bfc:	edd3 7a00 	vldr	s15, [r3]
 8008c00:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8008dd8 <update_PID+0x2ac>
 8008c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0c:	d913      	bls.n	8008c36 <update_PID+0x10a>
 8008c0e:	4b6b      	ldr	r3, [pc, #428]	@ (8008dbc <update_PID+0x290>)
 8008c10:	edd3 7a00 	vldr	s15, [r3]
 8008c14:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8008ddc <update_PID+0x2b0>
 8008c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c20:	dd10      	ble.n	8008c44 <update_PID+0x118>
 8008c22:	4b66      	ldr	r3, [pc, #408]	@ (8008dbc <update_PID+0x290>)
 8008c24:	edd3 7a00 	vldr	s15, [r3]
 8008c28:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8008de8 <update_PID+0x2bc>
 8008c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c34:	d806      	bhi.n	8008c44 <update_PID+0x118>
    {
        Ki = 1.1;
 8008c36:	4b64      	ldr	r3, [pc, #400]	@ (8008dc8 <update_PID+0x29c>)
 8008c38:	4a69      	ldr	r2, [pc, #420]	@ (8008de0 <update_PID+0x2b4>)
 8008c3a:	601a      	str	r2, [r3, #0]
        Kp = 1.1;
 8008c3c:	4b64      	ldr	r3, [pc, #400]	@ (8008dd0 <update_PID+0x2a4>)
 8008c3e:	4a68      	ldr	r2, [pc, #416]	@ (8008de0 <update_PID+0x2b4>)
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	e123      	b.n	8008e8c <update_PID+0x360>
    }
    else if((velocity_ref > -350 && velocity_ref <= -250)||(velocity_ref > 250 && velocity_ref <= 350))
 8008c44:	4b5d      	ldr	r3, [pc, #372]	@ (8008dbc <update_PID+0x290>)
 8008c46:	edd3 7a00 	vldr	s15, [r3]
 8008c4a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8008dec <update_PID+0x2c0>
 8008c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c56:	dd09      	ble.n	8008c6c <update_PID+0x140>
 8008c58:	4b58      	ldr	r3, [pc, #352]	@ (8008dbc <update_PID+0x290>)
 8008c5a:	edd3 7a00 	vldr	s15, [r3]
 8008c5e:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8008de4 <update_PID+0x2b8>
 8008c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6a:	d913      	bls.n	8008c94 <update_PID+0x168>
 8008c6c:	4b53      	ldr	r3, [pc, #332]	@ (8008dbc <update_PID+0x290>)
 8008c6e:	edd3 7a00 	vldr	s15, [r3]
 8008c72:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8008de8 <update_PID+0x2bc>
 8008c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7e:	dd10      	ble.n	8008ca2 <update_PID+0x176>
 8008c80:	4b4e      	ldr	r3, [pc, #312]	@ (8008dbc <update_PID+0x290>)
 8008c82:	edd3 7a00 	vldr	s15, [r3]
 8008c86:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8008df0 <update_PID+0x2c4>
 8008c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c92:	d806      	bhi.n	8008ca2 <update_PID+0x176>
    {
        Ki = 1.1;
 8008c94:	4b4c      	ldr	r3, [pc, #304]	@ (8008dc8 <update_PID+0x29c>)
 8008c96:	4a52      	ldr	r2, [pc, #328]	@ (8008de0 <update_PID+0x2b4>)
 8008c98:	601a      	str	r2, [r3, #0]
        Kp = 0.9;
 8008c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8008dd0 <update_PID+0x2a4>)
 8008c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8008dd4 <update_PID+0x2a8>)
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e0f4      	b.n	8008e8c <update_PID+0x360>
    }
    else if((velocity_ref > -500 && velocity_ref <= -350)||(velocity_ref > 350 && velocity_ref <= 500))
 8008ca2:	4b46      	ldr	r3, [pc, #280]	@ (8008dbc <update_PID+0x290>)
 8008ca4:	edd3 7a00 	vldr	s15, [r3]
 8008ca8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8008df4 <update_PID+0x2c8>
 8008cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb4:	dd09      	ble.n	8008cca <update_PID+0x19e>
 8008cb6:	4b41      	ldr	r3, [pc, #260]	@ (8008dbc <update_PID+0x290>)
 8008cb8:	edd3 7a00 	vldr	s15, [r3]
 8008cbc:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8008dec <update_PID+0x2c0>
 8008cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc8:	d913      	bls.n	8008cf2 <update_PID+0x1c6>
 8008cca:	4b3c      	ldr	r3, [pc, #240]	@ (8008dbc <update_PID+0x290>)
 8008ccc:	edd3 7a00 	vldr	s15, [r3]
 8008cd0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8008df0 <update_PID+0x2c4>
 8008cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cdc:	dd10      	ble.n	8008d00 <update_PID+0x1d4>
 8008cde:	4b37      	ldr	r3, [pc, #220]	@ (8008dbc <update_PID+0x290>)
 8008ce0:	edd3 7a00 	vldr	s15, [r3]
 8008ce4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8008df8 <update_PID+0x2cc>
 8008ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf0:	d806      	bhi.n	8008d00 <update_PID+0x1d4>
    {
        Ki = 1.3;
 8008cf2:	4b35      	ldr	r3, [pc, #212]	@ (8008dc8 <update_PID+0x29c>)
 8008cf4:	4a41      	ldr	r2, [pc, #260]	@ (8008dfc <update_PID+0x2d0>)
 8008cf6:	601a      	str	r2, [r3, #0]
        Kp = 1.6;
 8008cf8:	4b35      	ldr	r3, [pc, #212]	@ (8008dd0 <update_PID+0x2a4>)
 8008cfa:	4a41      	ldr	r2, [pc, #260]	@ (8008e00 <update_PID+0x2d4>)
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e0c5      	b.n	8008e8c <update_PID+0x360>
    }
    else if((velocity_ref > -750 && velocity_ref <= -500)||(velocity_ref > 500 && velocity_ref <= 750))
 8008d00:	4b2e      	ldr	r3, [pc, #184]	@ (8008dbc <update_PID+0x290>)
 8008d02:	edd3 7a00 	vldr	s15, [r3]
 8008d06:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008e04 <update_PID+0x2d8>
 8008d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d12:	dd09      	ble.n	8008d28 <update_PID+0x1fc>
 8008d14:	4b29      	ldr	r3, [pc, #164]	@ (8008dbc <update_PID+0x290>)
 8008d16:	edd3 7a00 	vldr	s15, [r3]
 8008d1a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8008df4 <update_PID+0x2c8>
 8008d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d26:	d913      	bls.n	8008d50 <update_PID+0x224>
 8008d28:	4b24      	ldr	r3, [pc, #144]	@ (8008dbc <update_PID+0x290>)
 8008d2a:	edd3 7a00 	vldr	s15, [r3]
 8008d2e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8008df8 <update_PID+0x2cc>
 8008d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	dd10      	ble.n	8008d5e <update_PID+0x232>
 8008d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dbc <update_PID+0x290>)
 8008d3e:	edd3 7a00 	vldr	s15, [r3]
 8008d42:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008e08 <update_PID+0x2dc>
 8008d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4e:	d806      	bhi.n	8008d5e <update_PID+0x232>
    {
        Ki = 1.6;
 8008d50:	4b1d      	ldr	r3, [pc, #116]	@ (8008dc8 <update_PID+0x29c>)
 8008d52:	4a2b      	ldr	r2, [pc, #172]	@ (8008e00 <update_PID+0x2d4>)
 8008d54:	601a      	str	r2, [r3, #0]
        Kp = 1.7;
 8008d56:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd0 <update_PID+0x2a4>)
 8008d58:	4a2c      	ldr	r2, [pc, #176]	@ (8008e0c <update_PID+0x2e0>)
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	e096      	b.n	8008e8c <update_PID+0x360>
    }
    else if((velocity_ref > -1000 && velocity_ref <= -750)||(velocity_ref > 750 && velocity_ref <= 1000))
 8008d5e:	4b17      	ldr	r3, [pc, #92]	@ (8008dbc <update_PID+0x290>)
 8008d60:	edd3 7a00 	vldr	s15, [r3]
 8008d64:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008e10 <update_PID+0x2e4>
 8008d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d70:	dd09      	ble.n	8008d86 <update_PID+0x25a>
 8008d72:	4b12      	ldr	r3, [pc, #72]	@ (8008dbc <update_PID+0x290>)
 8008d74:	edd3 7a00 	vldr	s15, [r3]
 8008d78:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008e04 <update_PID+0x2d8>
 8008d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d84:	d913      	bls.n	8008dae <update_PID+0x282>
 8008d86:	4b0d      	ldr	r3, [pc, #52]	@ (8008dbc <update_PID+0x290>)
 8008d88:	edd3 7a00 	vldr	s15, [r3]
 8008d8c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8008e08 <update_PID+0x2dc>
 8008d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d98:	dd42      	ble.n	8008e20 <update_PID+0x2f4>
 8008d9a:	4b08      	ldr	r3, [pc, #32]	@ (8008dbc <update_PID+0x290>)
 8008d9c:	edd3 7a00 	vldr	s15, [r3]
 8008da0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8008e14 <update_PID+0x2e8>
 8008da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dac:	d838      	bhi.n	8008e20 <update_PID+0x2f4>
    {
        Ki = 1.8;
 8008dae:	4b06      	ldr	r3, [pc, #24]	@ (8008dc8 <update_PID+0x29c>)
 8008db0:	4a19      	ldr	r2, [pc, #100]	@ (8008e18 <update_PID+0x2ec>)
 8008db2:	601a      	str	r2, [r3, #0]
        Kp = 2.1;
 8008db4:	4b06      	ldr	r3, [pc, #24]	@ (8008dd0 <update_PID+0x2a4>)
 8008db6:	4a19      	ldr	r2, [pc, #100]	@ (8008e1c <update_PID+0x2f0>)
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	e067      	b.n	8008e8c <update_PID+0x360>
 8008dbc:	20000290 	.word	0x20000290
 8008dc0:	c2c80000 	.word	0xc2c80000
 8008dc4:	42c80000 	.word	0x42c80000
 8008dc8:	20000294 	.word	0x20000294
 8008dcc:	3f4ccccd 	.word	0x3f4ccccd
 8008dd0:	20000298 	.word	0x20000298
 8008dd4:	3f666666 	.word	0x3f666666
 8008dd8:	c3160000 	.word	0xc3160000
 8008ddc:	43160000 	.word	0x43160000
 8008de0:	3f8ccccd 	.word	0x3f8ccccd
 8008de4:	c37a0000 	.word	0xc37a0000
 8008de8:	437a0000 	.word	0x437a0000
 8008dec:	c3af0000 	.word	0xc3af0000
 8008df0:	43af0000 	.word	0x43af0000
 8008df4:	c3fa0000 	.word	0xc3fa0000
 8008df8:	43fa0000 	.word	0x43fa0000
 8008dfc:	3fa66666 	.word	0x3fa66666
 8008e00:	3fcccccd 	.word	0x3fcccccd
 8008e04:	c43b8000 	.word	0xc43b8000
 8008e08:	443b8000 	.word	0x443b8000
 8008e0c:	3fd9999a 	.word	0x3fd9999a
 8008e10:	c47a0000 	.word	0xc47a0000
 8008e14:	447a0000 	.word	0x447a0000
 8008e18:	3fe66666 	.word	0x3fe66666
 8008e1c:	40066666 	.word	0x40066666
    }
    else if((velocity_ref > -1500 && velocity_ref <= -1000)||(velocity_ref > 1000 && velocity_ref <= 1500))
 8008e20:	4b1d      	ldr	r3, [pc, #116]	@ (8008e98 <update_PID+0x36c>)
 8008e22:	edd3 7a00 	vldr	s15, [r3]
 8008e26:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008e9c <update_PID+0x370>
 8008e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e32:	dd09      	ble.n	8008e48 <update_PID+0x31c>
 8008e34:	4b18      	ldr	r3, [pc, #96]	@ (8008e98 <update_PID+0x36c>)
 8008e36:	edd3 7a00 	vldr	s15, [r3]
 8008e3a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008ea0 <update_PID+0x374>
 8008e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e46:	d913      	bls.n	8008e70 <update_PID+0x344>
 8008e48:	4b13      	ldr	r3, [pc, #76]	@ (8008e98 <update_PID+0x36c>)
 8008e4a:	edd3 7a00 	vldr	s15, [r3]
 8008e4e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8008ea4 <update_PID+0x378>
 8008e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5a:	dd10      	ble.n	8008e7e <update_PID+0x352>
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e98 <update_PID+0x36c>)
 8008e5e:	edd3 7a00 	vldr	s15, [r3]
 8008e62:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8008ea8 <update_PID+0x37c>
 8008e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6e:	d806      	bhi.n	8008e7e <update_PID+0x352>
    {
        Ki = 1.9;
 8008e70:	4b0e      	ldr	r3, [pc, #56]	@ (8008eac <update_PID+0x380>)
 8008e72:	4a0f      	ldr	r2, [pc, #60]	@ (8008eb0 <update_PID+0x384>)
 8008e74:	601a      	str	r2, [r3, #0]
        Kp = 2.2;
 8008e76:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb4 <update_PID+0x388>)
 8008e78:	4a0f      	ldr	r2, [pc, #60]	@ (8008eb8 <update_PID+0x38c>)
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	e006      	b.n	8008e8c <update_PID+0x360>
    }
    else
    {
        Ki = 2.2;
 8008e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008eac <update_PID+0x380>)
 8008e80:	4a0d      	ldr	r2, [pc, #52]	@ (8008eb8 <update_PID+0x38c>)
 8008e82:	601a      	str	r2, [r3, #0]
        Kp = 2.8;
 8008e84:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb4 <update_PID+0x388>)
 8008e86:	4a0d      	ldr	r2, [pc, #52]	@ (8008ebc <update_PID+0x390>)
 8008e88:	601a      	str	r2, [r3, #0]
    }
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	20000290 	.word	0x20000290
 8008e9c:	c4bb8000 	.word	0xc4bb8000
 8008ea0:	c47a0000 	.word	0xc47a0000
 8008ea4:	447a0000 	.word	0x447a0000
 8008ea8:	44bb8000 	.word	0x44bb8000
 8008eac:	20000294 	.word	0x20000294
 8008eb0:	3ff33333 	.word	0x3ff33333
 8008eb4:	20000298 	.word	0x20000298
 8008eb8:	400ccccd 	.word	0x400ccccd
 8008ebc:	40333333 	.word	0x40333333

08008ec0 <position_loop>:
{

}

void position_loop()
{
 8008ec0:	b5b0      	push	{r4, r5, r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
	    static float raw_angle_prev = 0;
	    static int turn_count = 0;

	    static float velocity_ref_prev = 0; // Lưu giá trị trước đó của velocity_ref

	    float raw_angle = AS5147U_GetAngleRad();  // [0, 2π]
 8008ec6:	f7ff fb03 	bl	80084d0 <AS5147U_GetAngleRad>
 8008eca:	ed87 0a05 	vstr	s0, [r7, #20]
	    float delta = raw_angle - raw_angle_prev;
 8008ece:	4b80      	ldr	r3, [pc, #512]	@ (80090d0 <position_loop+0x210>)
 8008ed0:	edd3 7a00 	vldr	s15, [r3]
 8008ed4:	ed97 7a05 	vldr	s14, [r7, #20]
 8008ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008edc:	edc7 7a04 	vstr	s15, [r7, #16]

	    if (delta > M_PI) turn_count--;
 8008ee0:	6938      	ldr	r0, [r7, #16]
 8008ee2:	f7f7 fb51 	bl	8000588 <__aeabi_f2d>
 8008ee6:	a376      	add	r3, pc, #472	@ (adr r3, 80090c0 <position_loop+0x200>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 fe34 	bl	8000b58 <__aeabi_dcmpgt>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d005      	beq.n	8008f02 <position_loop+0x42>
 8008ef6:	4b77      	ldr	r3, [pc, #476]	@ (80090d4 <position_loop+0x214>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	4a75      	ldr	r2, [pc, #468]	@ (80090d4 <position_loop+0x214>)
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	e00f      	b.n	8008f22 <position_loop+0x62>
	    else if (delta < -M_PI) turn_count++;
 8008f02:	6938      	ldr	r0, [r7, #16]
 8008f04:	f7f7 fb40 	bl	8000588 <__aeabi_f2d>
 8008f08:	a36f      	add	r3, pc, #444	@ (adr r3, 80090c8 <position_loop+0x208>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 fe05 	bl	8000b1c <__aeabi_dcmplt>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d004      	beq.n	8008f22 <position_loop+0x62>
 8008f18:	4b6e      	ldr	r3, [pc, #440]	@ (80090d4 <position_loop+0x214>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	4a6d      	ldr	r2, [pc, #436]	@ (80090d4 <position_loop+0x214>)
 8008f20:	6013      	str	r3, [r2, #0]

	    raw_angle_prev = raw_angle;
 8008f22:	4a6b      	ldr	r2, [pc, #428]	@ (80090d0 <position_loop+0x210>)
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	6013      	str	r3, [r2, #0]

	    // Multi-turn position
	    theta_now = raw_angle + turn_count * 2.0f * M_PI;
 8008f28:	6978      	ldr	r0, [r7, #20]
 8008f2a:	f7f7 fb2d 	bl	8000588 <__aeabi_f2d>
 8008f2e:	4604      	mov	r4, r0
 8008f30:	460d      	mov	r5, r1
 8008f32:	4b68      	ldr	r3, [pc, #416]	@ (80090d4 <position_loop+0x214>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f42:	ee17 0a90 	vmov	r0, s15
 8008f46:	f7f7 fb1f 	bl	8000588 <__aeabi_f2d>
 8008f4a:	a35d      	add	r3, pc, #372	@ (adr r3, 80090c0 <position_loop+0x200>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	f7f7 fb72 	bl	8000638 <__aeabi_dmul>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 f9b6 	bl	80002cc <__adddf3>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4610      	mov	r0, r2
 8008f66:	4619      	mov	r1, r3
 8008f68:	f7f7 fe5e 	bl	8000c28 <__aeabi_d2f>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80090d8 <position_loop+0x218>)
 8008f70:	6013      	str	r3, [r2, #0]
	    error_pos = theta_ref - theta_now;
 8008f72:	4b5a      	ldr	r3, [pc, #360]	@ (80090dc <position_loop+0x21c>)
 8008f74:	ed93 7a00 	vldr	s14, [r3]
 8008f78:	4b57      	ldr	r3, [pc, #348]	@ (80090d8 <position_loop+0x218>)
 8008f7a:	edd3 7a00 	vldr	s15, [r3]
 8008f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f82:	4b57      	ldr	r3, [pc, #348]	@ (80090e0 <position_loop+0x220>)
 8008f84:	edc3 7a00 	vstr	s15, [r3]

	    // PID vị trí
	    error_pos_sum += error_pos * position_dt;
 8008f88:	4b55      	ldr	r3, [pc, #340]	@ (80090e0 <position_loop+0x220>)
 8008f8a:	ed93 7a00 	vldr	s14, [r3]
 8008f8e:	4b55      	ldr	r3, [pc, #340]	@ (80090e4 <position_loop+0x224>)
 8008f90:	edd3 7a00 	vldr	s15, [r3]
 8008f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f98:	4b53      	ldr	r3, [pc, #332]	@ (80090e8 <position_loop+0x228>)
 8008f9a:	edd3 7a00 	vldr	s15, [r3]
 8008f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fa2:	4b51      	ldr	r3, [pc, #324]	@ (80090e8 <position_loop+0x228>)
 8008fa4:	edc3 7a00 	vstr	s15, [r3]
	    error_pos_sum = fminf(fmaxf(error_pos_sum, -0.5f), 0.5f);
 8008fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80090e8 <position_loop+0x228>)
 8008faa:	edd3 7a00 	vldr	s15, [r3]
 8008fae:	eefe 0a00 	vmov.f32	s1, #224	@ 0xbf000000 -0.5
 8008fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8008fb6:	f00b fadb 	bl	8014570 <fmaxf>
 8008fba:	eef0 7a40 	vmov.f32	s15, s0
 8008fbe:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8008fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8008fc6:	f00b faf0 	bl	80145aa <fminf>
 8008fca:	eef0 7a40 	vmov.f32	s15, s0
 8008fce:	4b46      	ldr	r3, [pc, #280]	@ (80090e8 <position_loop+0x228>)
 8008fd0:	edc3 7a00 	vstr	s15, [r3]

//	    float derivative_pos = (error_pos - error_pos_prev) / position_dt;
//	    error_pos_prev = error_pos;

	    float velocity_unclamped = Kp_pos * error_pos + Ki_pos * error_pos_sum;// + Kd_pos * derivative_pos;
 8008fd4:	4b45      	ldr	r3, [pc, #276]	@ (80090ec <position_loop+0x22c>)
 8008fd6:	ed93 7a00 	vldr	s14, [r3]
 8008fda:	4b41      	ldr	r3, [pc, #260]	@ (80090e0 <position_loop+0x220>)
 8008fdc:	edd3 7a00 	vldr	s15, [r3]
 8008fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fe4:	4b42      	ldr	r3, [pc, #264]	@ (80090f0 <position_loop+0x230>)
 8008fe6:	edd3 6a00 	vldr	s13, [r3]
 8008fea:	4b3f      	ldr	r3, [pc, #252]	@ (80090e8 <position_loop+0x228>)
 8008fec:	edd3 7a00 	vldr	s15, [r3]
 8008ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ff8:	edc7 7a03 	vstr	s15, [r7, #12]
	    velocity_unclamped = fminf(fmaxf(velocity_unclamped, -1000), 1000);
 8008ffc:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80090f4 <position_loop+0x234>
 8009000:	ed97 0a03 	vldr	s0, [r7, #12]
 8009004:	f00b fab4 	bl	8014570 <fmaxf>
 8009008:	eef0 7a40 	vmov.f32	s15, s0
 800900c:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 80090f8 <position_loop+0x238>
 8009010:	eeb0 0a67 	vmov.f32	s0, s15
 8009014:	f00b fac9 	bl	80145aa <fminf>
 8009018:	ed87 0a03 	vstr	s0, [r7, #12]

	    // Ramping giới hạn tốc độ thay đổi của velocity_ref
	    float velocity_ramp = 1000.0f;  // Giá trị ramping (đơn vị: rad/s²)
 800901c:	4b37      	ldr	r3, [pc, #220]	@ (80090fc <position_loop+0x23c>)
 800901e:	60bb      	str	r3, [r7, #8]
	    float velocity_rate = (velocity_unclamped - velocity_ref_prev) / position_dt;
 8009020:	4b37      	ldr	r3, [pc, #220]	@ (8009100 <position_loop+0x240>)
 8009022:	edd3 7a00 	vldr	s15, [r3]
 8009026:	ed97 7a03 	vldr	s14, [r7, #12]
 800902a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800902e:	4b2d      	ldr	r3, [pc, #180]	@ (80090e4 <position_loop+0x224>)
 8009030:	ed93 7a00 	vldr	s14, [r3]
 8009034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009038:	edc7 7a01 	vstr	s15, [r7, #4]

	    if (velocity_rate > velocity_ramp)
 800903c:	ed97 7a01 	vldr	s14, [r7, #4]
 8009040:	edd7 7a02 	vldr	s15, [r7, #8]
 8009044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904c:	dd0f      	ble.n	800906e <position_loop+0x1ae>
	        velocity_ref = velocity_ref_prev + velocity_ramp * position_dt;
 800904e:	4b25      	ldr	r3, [pc, #148]	@ (80090e4 <position_loop+0x224>)
 8009050:	ed93 7a00 	vldr	s14, [r3]
 8009054:	edd7 7a02 	vldr	s15, [r7, #8]
 8009058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800905c:	4b28      	ldr	r3, [pc, #160]	@ (8009100 <position_loop+0x240>)
 800905e:	edd3 7a00 	vldr	s15, [r3]
 8009062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009066:	4b27      	ldr	r3, [pc, #156]	@ (8009104 <position_loop+0x244>)
 8009068:	edc3 7a00 	vstr	s15, [r3]
 800906c:	e01d      	b.n	80090aa <position_loop+0x1ea>
	    else if (velocity_rate < -velocity_ramp)
 800906e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009072:	eef1 7a67 	vneg.f32	s15, s15
 8009076:	ed97 7a01 	vldr	s14, [r7, #4]
 800907a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	d50f      	bpl.n	80090a4 <position_loop+0x1e4>
	        velocity_ref = velocity_ref_prev - velocity_ramp * position_dt;
 8009084:	4b1e      	ldr	r3, [pc, #120]	@ (8009100 <position_loop+0x240>)
 8009086:	ed93 7a00 	vldr	s14, [r3]
 800908a:	4b16      	ldr	r3, [pc, #88]	@ (80090e4 <position_loop+0x224>)
 800908c:	edd3 6a00 	vldr	s13, [r3]
 8009090:	edd7 7a02 	vldr	s15, [r7, #8]
 8009094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800909c:	4b19      	ldr	r3, [pc, #100]	@ (8009104 <position_loop+0x244>)
 800909e:	edc3 7a00 	vstr	s15, [r3]
 80090a2:	e002      	b.n	80090aa <position_loop+0x1ea>
	    else
	        velocity_ref = velocity_unclamped;
 80090a4:	4a17      	ldr	r2, [pc, #92]	@ (8009104 <position_loop+0x244>)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6013      	str	r3, [r2, #0]

	    velocity_ref_prev = velocity_ref; // Cập nhật giá trị trước đó
 80090aa:	4b16      	ldr	r3, [pc, #88]	@ (8009104 <position_loop+0x244>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a14      	ldr	r2, [pc, #80]	@ (8009100 <position_loop+0x240>)
 80090b0:	6013      	str	r3, [r2, #0]
}
 80090b2:	bf00      	nop
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bdb0      	pop	{r4, r5, r7, pc}
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	54442d18 	.word	0x54442d18
 80090c4:	400921fb 	.word	0x400921fb
 80090c8:	54442d18 	.word	0x54442d18
 80090cc:	c00921fb 	.word	0xc00921fb
 80090d0:	2000096c 	.word	0x2000096c
 80090d4:	20000970 	.word	0x20000970
 80090d8:	20000570 	.word	0x20000570
 80090dc:	20000560 	.word	0x20000560
 80090e0:	2000056c 	.word	0x2000056c
 80090e4:	200002b4 	.word	0x200002b4
 80090e8:	20000974 	.word	0x20000974
 80090ec:	200002a8 	.word	0x200002a8
 80090f0:	200002a4 	.word	0x200002a4
 80090f4:	c47a0000 	.word	0xc47a0000
 80090f8:	447a0000 	.word	0x447a0000
 80090fc:	447a0000 	.word	0x447a0000
 8009100:	20000978 	.word	0x20000978
 8009104:	20000290 	.word	0x20000290

08009108 <Speed_Loop>:

void Speed_Loop()
{
 8009108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
	//update_speed_dt();
	speed_dt = 0.004;
 8009110:	4bb1      	ldr	r3, [pc, #708]	@ (80093d8 <Speed_Loop+0x2d0>)
 8009112:	4ab2      	ldr	r2, [pc, #712]	@ (80093dc <Speed_Loop+0x2d4>)
 8009114:	601a      	str	r2, [r3, #0]
    static float angle_prev = 0;
    static float error_speed_prev = 0;
    float angle_now = electricalAngle();
 8009116:	f7ff fa13 	bl	8008540 <electricalAngle>
 800911a:	ed87 0a04 	vstr	s0, [r7, #16]
    float delta_angle = angle_now - angle_prev;
 800911e:	4bb0      	ldr	r3, [pc, #704]	@ (80093e0 <Speed_Loop+0x2d8>)
 8009120:	edd3 7a00 	vldr	s15, [r3]
 8009124:	ed97 7a04 	vldr	s14, [r7, #16]
 8009128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800912c:	edc7 7a05 	vstr	s15, [r7, #20]

    if (delta_angle > PI) delta_angle -= 2 * PI;
 8009130:	6978      	ldr	r0, [r7, #20]
 8009132:	f7f7 fa29 	bl	8000588 <__aeabi_f2d>
 8009136:	a3a0      	add	r3, pc, #640	@ (adr r3, 80093b8 <Speed_Loop+0x2b0>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 fd0c 	bl	8000b58 <__aeabi_dcmpgt>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00f      	beq.n	8009166 <Speed_Loop+0x5e>
 8009146:	6978      	ldr	r0, [r7, #20]
 8009148:	f7f7 fa1e 	bl	8000588 <__aeabi_f2d>
 800914c:	a39c      	add	r3, pc, #624	@ (adr r3, 80093c0 <Speed_Loop+0x2b8>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f8b9 	bl	80002c8 <__aeabi_dsub>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4610      	mov	r0, r2
 800915c:	4619      	mov	r1, r3
 800915e:	f7f7 fd63 	bl	8000c28 <__aeabi_d2f>
 8009162:	4603      	mov	r3, r0
 8009164:	617b      	str	r3, [r7, #20]
    if (delta_angle < -PI) delta_angle += 2 * PI;
 8009166:	6978      	ldr	r0, [r7, #20]
 8009168:	f7f7 fa0e 	bl	8000588 <__aeabi_f2d>
 800916c:	a396      	add	r3, pc, #600	@ (adr r3, 80093c8 <Speed_Loop+0x2c0>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 fcd3 	bl	8000b1c <__aeabi_dcmplt>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00f      	beq.n	800919c <Speed_Loop+0x94>
 800917c:	6978      	ldr	r0, [r7, #20]
 800917e:	f7f7 fa03 	bl	8000588 <__aeabi_f2d>
 8009182:	a38f      	add	r3, pc, #572	@ (adr r3, 80093c0 <Speed_Loop+0x2b8>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f7f7 f8a0 	bl	80002cc <__adddf3>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4610      	mov	r0, r2
 8009192:	4619      	mov	r1, r3
 8009194:	f7f7 fd48 	bl	8000c28 <__aeabi_d2f>
 8009198:	4603      	mov	r3, r0
 800919a:	617b      	str	r3, [r7, #20]

    velocity = alpha * velocity + (1 - alpha) * ((delta_angle / speed_dt) * (60.0f / (2.0f * PI)));
 800919c:	4b91      	ldr	r3, [pc, #580]	@ (80093e4 <Speed_Loop+0x2dc>)
 800919e:	ed93 7a00 	vldr	s14, [r3]
 80091a2:	4b91      	ldr	r3, [pc, #580]	@ (80093e8 <Speed_Loop+0x2e0>)
 80091a4:	edd3 7a00 	vldr	s15, [r3]
 80091a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ac:	ee17 0a90 	vmov	r0, s15
 80091b0:	f7f7 f9ea 	bl	8000588 <__aeabi_f2d>
 80091b4:	4604      	mov	r4, r0
 80091b6:	460d      	mov	r5, r1
 80091b8:	4b8a      	ldr	r3, [pc, #552]	@ (80093e4 <Speed_Loop+0x2dc>)
 80091ba:	edd3 7a00 	vldr	s15, [r3]
 80091be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091c6:	ee17 0a90 	vmov	r0, s15
 80091ca:	f7f7 f9dd 	bl	8000588 <__aeabi_f2d>
 80091ce:	4680      	mov	r8, r0
 80091d0:	4689      	mov	r9, r1
 80091d2:	4b81      	ldr	r3, [pc, #516]	@ (80093d8 <Speed_Loop+0x2d0>)
 80091d4:	edd3 7a00 	vldr	s15, [r3]
 80091d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80091dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80091e0:	ee16 0a90 	vmov	r0, s13
 80091e4:	f7f7 f9d0 	bl	8000588 <__aeabi_f2d>
 80091e8:	a379      	add	r3, pc, #484	@ (adr r3, 80093d0 <Speed_Loop+0x2c8>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f7 fa23 	bl	8000638 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4640      	mov	r0, r8
 80091f8:	4649      	mov	r1, r9
 80091fa:	f7f7 fa1d 	bl	8000638 <__aeabi_dmul>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4620      	mov	r0, r4
 8009204:	4629      	mov	r1, r5
 8009206:	f7f7 f861 	bl	80002cc <__adddf3>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4610      	mov	r0, r2
 8009210:	4619      	mov	r1, r3
 8009212:	f7f7 fd09 	bl	8000c28 <__aeabi_d2f>
 8009216:	4603      	mov	r3, r0
 8009218:	4a73      	ldr	r2, [pc, #460]	@ (80093e8 <Speed_Loop+0x2e0>)
 800921a:	6013      	str	r3, [r2, #0]
   // float abs_speed = fabs(velocity);
    error_speed = velocity_ref - velocity;
 800921c:	4b73      	ldr	r3, [pc, #460]	@ (80093ec <Speed_Loop+0x2e4>)
 800921e:	ed93 7a00 	vldr	s14, [r3]
 8009222:	4b71      	ldr	r3, [pc, #452]	@ (80093e8 <Speed_Loop+0x2e0>)
 8009224:	edd3 7a00 	vldr	s15, [r3]
 8009228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800922c:	4b70      	ldr	r3, [pc, #448]	@ (80093f0 <Speed_Loop+0x2e8>)
 800922e:	edc3 7a00 	vstr	s15, [r3]
    speed_error_sum += error_speed * speed_dt;
 8009232:	4b6f      	ldr	r3, [pc, #444]	@ (80093f0 <Speed_Loop+0x2e8>)
 8009234:	ed93 7a00 	vldr	s14, [r3]
 8009238:	4b67      	ldr	r3, [pc, #412]	@ (80093d8 <Speed_Loop+0x2d0>)
 800923a:	edd3 7a00 	vldr	s15, [r3]
 800923e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009242:	4b6c      	ldr	r3, [pc, #432]	@ (80093f4 <Speed_Loop+0x2ec>)
 8009244:	edd3 7a00 	vldr	s15, [r3]
 8009248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800924c:	4b69      	ldr	r3, [pc, #420]	@ (80093f4 <Speed_Loop+0x2ec>)
 800924e:	edc3 7a00 	vstr	s15, [r3]
    speed_error_sum = fminf(fmaxf(speed_error_sum, -0.8f), 0.8f);
 8009252:	4b68      	ldr	r3, [pc, #416]	@ (80093f4 <Speed_Loop+0x2ec>)
 8009254:	edd3 7a00 	vldr	s15, [r3]
 8009258:	eddf 0a67 	vldr	s1, [pc, #412]	@ 80093f8 <Speed_Loop+0x2f0>
 800925c:	eeb0 0a67 	vmov.f32	s0, s15
 8009260:	f00b f986 	bl	8014570 <fmaxf>
 8009264:	eef0 7a40 	vmov.f32	s15, s0
 8009268:	eddf 0a64 	vldr	s1, [pc, #400]	@ 80093fc <Speed_Loop+0x2f4>
 800926c:	eeb0 0a67 	vmov.f32	s0, s15
 8009270:	f00b f99b 	bl	80145aa <fminf>
 8009274:	eef0 7a40 	vmov.f32	s15, s0
 8009278:	4b5e      	ldr	r3, [pc, #376]	@ (80093f4 <Speed_Loop+0x2ec>)
 800927a:	edc3 7a00 	vstr	s15, [r3]

    float derivative = (error_speed - error_speed_prev) / speed_dt;
 800927e:	4b5c      	ldr	r3, [pc, #368]	@ (80093f0 <Speed_Loop+0x2e8>)
 8009280:	ed93 7a00 	vldr	s14, [r3]
 8009284:	4b5e      	ldr	r3, [pc, #376]	@ (8009400 <Speed_Loop+0x2f8>)
 8009286:	edd3 7a00 	vldr	s15, [r3]
 800928a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800928e:	4b52      	ldr	r3, [pc, #328]	@ (80093d8 <Speed_Loop+0x2d0>)
 8009290:	ed93 7a00 	vldr	s14, [r3]
 8009294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009298:	edc7 7a03 	vstr	s15, [r7, #12]
    error_speed_prev = error_speed;
 800929c:	4b54      	ldr	r3, [pc, #336]	@ (80093f0 <Speed_Loop+0x2e8>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a57      	ldr	r2, [pc, #348]	@ (8009400 <Speed_Loop+0x2f8>)
 80092a2:	6013      	str	r3, [r2, #0]

    float Iq_unlimited = Kp_speed * error_speed + Ki_speed * speed_error_sum + Kd_speed * derivative;
 80092a4:	4b57      	ldr	r3, [pc, #348]	@ (8009404 <Speed_Loop+0x2fc>)
 80092a6:	ed93 7a00 	vldr	s14, [r3]
 80092aa:	4b51      	ldr	r3, [pc, #324]	@ (80093f0 <Speed_Loop+0x2e8>)
 80092ac:	edd3 7a00 	vldr	s15, [r3]
 80092b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092b4:	4b54      	ldr	r3, [pc, #336]	@ (8009408 <Speed_Loop+0x300>)
 80092b6:	edd3 6a00 	vldr	s13, [r3]
 80092ba:	4b4e      	ldr	r3, [pc, #312]	@ (80093f4 <Speed_Loop+0x2ec>)
 80092bc:	edd3 7a00 	vldr	s15, [r3]
 80092c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092c8:	4b50      	ldr	r3, [pc, #320]	@ (800940c <Speed_Loop+0x304>)
 80092ca:	edd3 6a00 	vldr	s13, [r3]
 80092ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80092d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092da:	edc7 7a02 	vstr	s15, [r7, #8]

       float Ts = speed_dt;
 80092de:	4b3e      	ldr	r3, [pc, #248]	@ (80093d8 <Speed_Loop+0x2d0>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	607b      	str	r3, [r7, #4]
       float Iq_ramp = 1000;
 80092e4:	4b4a      	ldr	r3, [pc, #296]	@ (8009410 <Speed_Loop+0x308>)
 80092e6:	603b      	str	r3, [r7, #0]
       //float Iq_ramp = 0.5;


       static float Iq_ref_prev = 0.0f;
        Iq_rate = (Iq_unlimited - Iq_ref_prev) / Ts;
 80092e8:	4b4a      	ldr	r3, [pc, #296]	@ (8009414 <Speed_Loop+0x30c>)
 80092ea:	edd3 7a00 	vldr	s15, [r3]
 80092ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80092f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80092f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80092fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092fe:	4b46      	ldr	r3, [pc, #280]	@ (8009418 <Speed_Loop+0x310>)
 8009300:	edc3 7a00 	vstr	s15, [r3]
       if (Iq_rate > Iq_ramp)
 8009304:	4b44      	ldr	r3, [pc, #272]	@ (8009418 <Speed_Loop+0x310>)
 8009306:	edd3 7a00 	vldr	s15, [r3]
 800930a:	ed97 7a00 	vldr	s14, [r7]
 800930e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009316:	d50e      	bpl.n	8009336 <Speed_Loop+0x22e>
           Iq_ref = Iq_ref_prev + Iq_ramp * Ts;
 8009318:	ed97 7a00 	vldr	s14, [r7]
 800931c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009324:	4b3b      	ldr	r3, [pc, #236]	@ (8009414 <Speed_Loop+0x30c>)
 8009326:	edd3 7a00 	vldr	s15, [r3]
 800932a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800932e:	4b3b      	ldr	r3, [pc, #236]	@ (800941c <Speed_Loop+0x314>)
 8009330:	edc3 7a00 	vstr	s15, [r3]
 8009334:	e01d      	b.n	8009372 <Speed_Loop+0x26a>
       else if (Iq_rate < -Iq_ramp)
 8009336:	edd7 7a00 	vldr	s15, [r7]
 800933a:	eeb1 7a67 	vneg.f32	s14, s15
 800933e:	4b36      	ldr	r3, [pc, #216]	@ (8009418 <Speed_Loop+0x310>)
 8009340:	edd3 7a00 	vldr	s15, [r3]
 8009344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934c:	dd0e      	ble.n	800936c <Speed_Loop+0x264>
           Iq_ref = Iq_ref_prev - Iq_ramp * Ts;
 800934e:	4b31      	ldr	r3, [pc, #196]	@ (8009414 <Speed_Loop+0x30c>)
 8009350:	ed93 7a00 	vldr	s14, [r3]
 8009354:	edd7 6a00 	vldr	s13, [r7]
 8009358:	edd7 7a01 	vldr	s15, [r7, #4]
 800935c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009364:	4b2d      	ldr	r3, [pc, #180]	@ (800941c <Speed_Loop+0x314>)
 8009366:	edc3 7a00 	vstr	s15, [r3]
 800936a:	e002      	b.n	8009372 <Speed_Loop+0x26a>
       else
           Iq_ref = Iq_unlimited;
 800936c:	4a2b      	ldr	r2, [pc, #172]	@ (800941c <Speed_Loop+0x314>)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	6013      	str	r3, [r2, #0]

       Iq_ref = fminf(fmaxf(Iq_ref, -0.3f), 0.3f);
 8009372:	4b2a      	ldr	r3, [pc, #168]	@ (800941c <Speed_Loop+0x314>)
 8009374:	edd3 7a00 	vldr	s15, [r3]
 8009378:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8009420 <Speed_Loop+0x318>
 800937c:	eeb0 0a67 	vmov.f32	s0, s15
 8009380:	f00b f8f6 	bl	8014570 <fmaxf>
 8009384:	eef0 7a40 	vmov.f32	s15, s0
 8009388:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8009424 <Speed_Loop+0x31c>
 800938c:	eeb0 0a67 	vmov.f32	s0, s15
 8009390:	f00b f90b 	bl	80145aa <fminf>
 8009394:	eef0 7a40 	vmov.f32	s15, s0
 8009398:	4b20      	ldr	r3, [pc, #128]	@ (800941c <Speed_Loop+0x314>)
 800939a:	edc3 7a00 	vstr	s15, [r3]


       Iq_ref_prev = Iq_ref;
 800939e:	4b1f      	ldr	r3, [pc, #124]	@ (800941c <Speed_Loop+0x314>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009414 <Speed_Loop+0x30c>)
 80093a4:	6013      	str	r3, [r2, #0]

    angle_prev = angle_now;
 80093a6:	4a0e      	ldr	r2, [pc, #56]	@ (80093e0 <Speed_Loop+0x2d8>)
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6013      	str	r3, [r2, #0]

}
 80093ac:	bf00      	nop
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80093b6:	bf00      	nop
 80093b8:	54442eea 	.word	0x54442eea
 80093bc:	400921fb 	.word	0x400921fb
 80093c0:	54442eea 	.word	0x54442eea
 80093c4:	401921fb 	.word	0x401921fb
 80093c8:	54442eea 	.word	0x54442eea
 80093cc:	c00921fb 	.word	0xc00921fb
 80093d0:	66ed2a99 	.word	0x66ed2a99
 80093d4:	4023193d 	.word	0x4023193d
 80093d8:	20000578 	.word	0x20000578
 80093dc:	3b83126f 	.word	0x3b83126f
 80093e0:	2000097c 	.word	0x2000097c
 80093e4:	200002ac 	.word	0x200002ac
 80093e8:	20000568 	.word	0x20000568
 80093ec:	20000290 	.word	0x20000290
 80093f0:	20000580 	.word	0x20000580
 80093f4:	20000558 	.word	0x20000558
 80093f8:	bf4ccccd 	.word	0xbf4ccccd
 80093fc:	3f4ccccd 	.word	0x3f4ccccd
 8009400:	20000980 	.word	0x20000980
 8009404:	2000029c 	.word	0x2000029c
 8009408:	200002a0 	.word	0x200002a0
 800940c:	20000564 	.word	0x20000564
 8009410:	447a0000 	.word	0x447a0000
 8009414:	20000984 	.word	0x20000984
 8009418:	200005f4 	.word	0x200005f4
 800941c:	2000028c 	.word	0x2000028c
 8009420:	be99999a 	.word	0xbe99999a
 8009424:	3e99999a 	.word	0x3e99999a

08009428 <Current_Loop>:


void Current_Loop()
{
 8009428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
    Update_dt();
 8009430:	f7fe ff7c 	bl	800832c <Update_dt>

    theta = electricalAngle();
 8009434:	f7ff f884 	bl	8008540 <electricalAngle>
 8009438:	eef0 7a40 	vmov.f32	s15, s0
 800943c:	4b90      	ldr	r3, [pc, #576]	@ (8009680 <Current_Loop+0x258>)
 800943e:	edc3 7a00 	vstr	s15, [r3]
    clark();
 8009442:	f7ff f96d 	bl	8008720 <clark>
    park();
 8009446:	f7ff f99d 	bl	8008784 <park>

    error_d = Id_ref - i_d;
 800944a:	4b8e      	ldr	r3, [pc, #568]	@ (8009684 <Current_Loop+0x25c>)
 800944c:	ed93 7a00 	vldr	s14, [r3]
 8009450:	4b8d      	ldr	r3, [pc, #564]	@ (8009688 <Current_Loop+0x260>)
 8009452:	edd3 7a00 	vldr	s15, [r3]
 8009456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800945a:	4b8c      	ldr	r3, [pc, #560]	@ (800968c <Current_Loop+0x264>)
 800945c:	edc3 7a00 	vstr	s15, [r3]
    error_q = Iq_ref - i_q;
 8009460:	4b8b      	ldr	r3, [pc, #556]	@ (8009690 <Current_Loop+0x268>)
 8009462:	ed93 7a00 	vldr	s14, [r3]
 8009466:	4b8b      	ldr	r3, [pc, #556]	@ (8009694 <Current_Loop+0x26c>)
 8009468:	edd3 7a00 	vldr	s15, [r3]
 800946c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009470:	4b89      	ldr	r3, [pc, #548]	@ (8009698 <Current_Loop+0x270>)
 8009472:	edc3 7a00 	vstr	s15, [r3]


    error_d_sum += error_d * dt;
 8009476:	4b85      	ldr	r3, [pc, #532]	@ (800968c <Current_Loop+0x264>)
 8009478:	ed93 7a00 	vldr	s14, [r3]
 800947c:	4b87      	ldr	r3, [pc, #540]	@ (800969c <Current_Loop+0x274>)
 800947e:	edd3 7a00 	vldr	s15, [r3]
 8009482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009486:	4b86      	ldr	r3, [pc, #536]	@ (80096a0 <Current_Loop+0x278>)
 8009488:	edd3 7a00 	vldr	s15, [r3]
 800948c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009490:	4b83      	ldr	r3, [pc, #524]	@ (80096a0 <Current_Loop+0x278>)
 8009492:	edc3 7a00 	vstr	s15, [r3]
    error_q_sum += error_q * dt;
 8009496:	4b80      	ldr	r3, [pc, #512]	@ (8009698 <Current_Loop+0x270>)
 8009498:	ed93 7a00 	vldr	s14, [r3]
 800949c:	4b7f      	ldr	r3, [pc, #508]	@ (800969c <Current_Loop+0x274>)
 800949e:	edd3 7a00 	vldr	s15, [r3]
 80094a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094a6:	4b7f      	ldr	r3, [pc, #508]	@ (80096a4 <Current_Loop+0x27c>)
 80094a8:	edd3 7a00 	vldr	s15, [r3]
 80094ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094b0:	4b7c      	ldr	r3, [pc, #496]	@ (80096a4 <Current_Loop+0x27c>)
 80094b2:	edc3 7a00 	vstr	s15, [r3]

    error_d_sum = fminf(fmaxf(error_d_sum, -INTEGRAL_LIMIT), INTEGRAL_LIMIT);
 80094b6:	4b7a      	ldr	r3, [pc, #488]	@ (80096a0 <Current_Loop+0x278>)
 80094b8:	edd3 7a00 	vldr	s15, [r3]
 80094bc:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80094c0:	eeb0 0a67 	vmov.f32	s0, s15
 80094c4:	f00b f854 	bl	8014570 <fmaxf>
 80094c8:	eef0 7a40 	vmov.f32	s15, s0
 80094cc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80094d0:	eeb0 0a67 	vmov.f32	s0, s15
 80094d4:	f00b f869 	bl	80145aa <fminf>
 80094d8:	eef0 7a40 	vmov.f32	s15, s0
 80094dc:	4b70      	ldr	r3, [pc, #448]	@ (80096a0 <Current_Loop+0x278>)
 80094de:	edc3 7a00 	vstr	s15, [r3]
    error_q_sum = fminf(fmaxf(error_q_sum, -INTEGRAL_LIMIT), INTEGRAL_LIMIT);
 80094e2:	4b70      	ldr	r3, [pc, #448]	@ (80096a4 <Current_Loop+0x27c>)
 80094e4:	edd3 7a00 	vldr	s15, [r3]
 80094e8:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80094ec:	eeb0 0a67 	vmov.f32	s0, s15
 80094f0:	f00b f83e 	bl	8014570 <fmaxf>
 80094f4:	eef0 7a40 	vmov.f32	s15, s0
 80094f8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80094fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009500:	f00b f853 	bl	80145aa <fminf>
 8009504:	eef0 7a40 	vmov.f32	s15, s0
 8009508:	4b66      	ldr	r3, [pc, #408]	@ (80096a4 <Current_Loop+0x27c>)
 800950a:	edc3 7a00 	vstr	s15, [r3]

    float Vd_unclamped = Kp * error_d + Ki * error_d_sum ;
 800950e:	4b66      	ldr	r3, [pc, #408]	@ (80096a8 <Current_Loop+0x280>)
 8009510:	ed93 7a00 	vldr	s14, [r3]
 8009514:	4b5d      	ldr	r3, [pc, #372]	@ (800968c <Current_Loop+0x264>)
 8009516:	edd3 7a00 	vldr	s15, [r3]
 800951a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800951e:	4b63      	ldr	r3, [pc, #396]	@ (80096ac <Current_Loop+0x284>)
 8009520:	edd3 6a00 	vldr	s13, [r3]
 8009524:	4b5e      	ldr	r3, [pc, #376]	@ (80096a0 <Current_Loop+0x278>)
 8009526:	edd3 7a00 	vldr	s15, [r3]
 800952a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800952e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009532:	edc7 7a03 	vstr	s15, [r7, #12]
     Vq_unclamped = Kp * error_q + Ki * error_q_sum ;
 8009536:	4b5c      	ldr	r3, [pc, #368]	@ (80096a8 <Current_Loop+0x280>)
 8009538:	ed93 7a00 	vldr	s14, [r3]
 800953c:	4b56      	ldr	r3, [pc, #344]	@ (8009698 <Current_Loop+0x270>)
 800953e:	edd3 7a00 	vldr	s15, [r3]
 8009542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009546:	4b59      	ldr	r3, [pc, #356]	@ (80096ac <Current_Loop+0x284>)
 8009548:	edd3 6a00 	vldr	s13, [r3]
 800954c:	4b55      	ldr	r3, [pc, #340]	@ (80096a4 <Current_Loop+0x27c>)
 800954e:	edd3 7a00 	vldr	s15, [r3]
 8009552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955a:	4b55      	ldr	r3, [pc, #340]	@ (80096b0 <Current_Loop+0x288>)
 800955c:	edc3 7a00 	vstr	s15, [r3]

    float V_limit = 8.0f;
 8009560:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8009564:	60bb      	str	r3, [r7, #8]
//    Vq_unclamped = fminf(fmaxf(Vq_unclamped, -V_limit), V_limit);

    // Ramping
    static float Vd_prev = 0;
    static float Vq_prev = 0;
    float output_ramp = 100.0f;
 8009566:	4b53      	ldr	r3, [pc, #332]	@ (80096b4 <Current_Loop+0x28c>)
 8009568:	607b      	str	r3, [r7, #4]

    float output_d_rate = (Vd_unclamped - Vd_prev) / dt;
 800956a:	4b53      	ldr	r3, [pc, #332]	@ (80096b8 <Current_Loop+0x290>)
 800956c:	edd3 7a00 	vldr	s15, [r3]
 8009570:	ed97 7a03 	vldr	s14, [r7, #12]
 8009574:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009578:	4b48      	ldr	r3, [pc, #288]	@ (800969c <Current_Loop+0x274>)
 800957a:	ed93 7a00 	vldr	s14, [r3]
 800957e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009582:	edc7 7a00 	vstr	s15, [r7]
    output_q_rate = (Vq_unclamped - Vq_prev) / dt;
 8009586:	4b4a      	ldr	r3, [pc, #296]	@ (80096b0 <Current_Loop+0x288>)
 8009588:	ed93 7a00 	vldr	s14, [r3]
 800958c:	4b4b      	ldr	r3, [pc, #300]	@ (80096bc <Current_Loop+0x294>)
 800958e:	edd3 7a00 	vldr	s15, [r3]
 8009592:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009596:	4b41      	ldr	r3, [pc, #260]	@ (800969c <Current_Loop+0x274>)
 8009598:	ed93 7a00 	vldr	s14, [r3]
 800959c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a0:	4b47      	ldr	r3, [pc, #284]	@ (80096c0 <Current_Loop+0x298>)
 80095a2:	edc3 7a00 	vstr	s15, [r3]

    if (output_d_rate > output_ramp)
 80095a6:	ed97 7a00 	vldr	s14, [r7]
 80095aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80095ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b6:	dd0f      	ble.n	80095d8 <Current_Loop+0x1b0>
        Vd = Vd_prev + output_ramp * dt;
 80095b8:	4b38      	ldr	r3, [pc, #224]	@ (800969c <Current_Loop+0x274>)
 80095ba:	ed93 7a00 	vldr	s14, [r3]
 80095be:	edd7 7a01 	vldr	s15, [r7, #4]
 80095c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095c6:	4b3c      	ldr	r3, [pc, #240]	@ (80096b8 <Current_Loop+0x290>)
 80095c8:	edd3 7a00 	vldr	s15, [r3]
 80095cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095d0:	4b3c      	ldr	r3, [pc, #240]	@ (80096c4 <Current_Loop+0x29c>)
 80095d2:	edc3 7a00 	vstr	s15, [r3]
 80095d6:	e01d      	b.n	8009614 <Current_Loop+0x1ec>
    else if (output_d_rate < -output_ramp)
 80095d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80095dc:	eef1 7a67 	vneg.f32	s15, s15
 80095e0:	ed97 7a00 	vldr	s14, [r7]
 80095e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ec:	d50f      	bpl.n	800960e <Current_Loop+0x1e6>
        Vd = Vd_prev - output_ramp * dt;
 80095ee:	4b32      	ldr	r3, [pc, #200]	@ (80096b8 <Current_Loop+0x290>)
 80095f0:	ed93 7a00 	vldr	s14, [r3]
 80095f4:	4b29      	ldr	r3, [pc, #164]	@ (800969c <Current_Loop+0x274>)
 80095f6:	edd3 6a00 	vldr	s13, [r3]
 80095fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80095fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009606:	4b2f      	ldr	r3, [pc, #188]	@ (80096c4 <Current_Loop+0x29c>)
 8009608:	edc3 7a00 	vstr	s15, [r3]
 800960c:	e002      	b.n	8009614 <Current_Loop+0x1ec>
    else
        Vd = Vd_unclamped;
 800960e:	4a2d      	ldr	r2, [pc, #180]	@ (80096c4 <Current_Loop+0x29c>)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6013      	str	r3, [r2, #0]

    if (output_q_rate > output_ramp)
 8009614:	4b2a      	ldr	r3, [pc, #168]	@ (80096c0 <Current_Loop+0x298>)
 8009616:	edd3 7a00 	vldr	s15, [r3]
 800961a:	ed97 7a01 	vldr	s14, [r7, #4]
 800961e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009626:	d50f      	bpl.n	8009648 <Current_Loop+0x220>
        Vq = Vq_prev + output_ramp * dt;
 8009628:	4b1c      	ldr	r3, [pc, #112]	@ (800969c <Current_Loop+0x274>)
 800962a:	ed93 7a00 	vldr	s14, [r3]
 800962e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009636:	4b21      	ldr	r3, [pc, #132]	@ (80096bc <Current_Loop+0x294>)
 8009638:	edd3 7a00 	vldr	s15, [r3]
 800963c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009640:	4b21      	ldr	r3, [pc, #132]	@ (80096c8 <Current_Loop+0x2a0>)
 8009642:	edc3 7a00 	vstr	s15, [r3]
 8009646:	e045      	b.n	80096d4 <Current_Loop+0x2ac>
    else if (output_q_rate < -output_ramp)
 8009648:	edd7 7a01 	vldr	s15, [r7, #4]
 800964c:	eeb1 7a67 	vneg.f32	s14, s15
 8009650:	4b1b      	ldr	r3, [pc, #108]	@ (80096c0 <Current_Loop+0x298>)
 8009652:	edd3 7a00 	vldr	s15, [r3]
 8009656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800965a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965e:	dd35      	ble.n	80096cc <Current_Loop+0x2a4>
        Vq = Vq_prev - output_ramp * dt;
 8009660:	4b16      	ldr	r3, [pc, #88]	@ (80096bc <Current_Loop+0x294>)
 8009662:	ed93 7a00 	vldr	s14, [r3]
 8009666:	4b0d      	ldr	r3, [pc, #52]	@ (800969c <Current_Loop+0x274>)
 8009668:	edd3 6a00 	vldr	s13, [r3]
 800966c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009678:	4b13      	ldr	r3, [pc, #76]	@ (80096c8 <Current_Loop+0x2a0>)
 800967a:	edc3 7a00 	vstr	s15, [r3]
 800967e:	e029      	b.n	80096d4 <Current_Loop+0x2ac>
 8009680:	200005c0 	.word	0x200005c0
 8009684:	2000055c 	.word	0x2000055c
 8009688:	20000528 	.word	0x20000528
 800968c:	20000548 	.word	0x20000548
 8009690:	2000028c 	.word	0x2000028c
 8009694:	2000052c 	.word	0x2000052c
 8009698:	2000054c 	.word	0x2000054c
 800969c:	20000574 	.word	0x20000574
 80096a0:	20000550 	.word	0x20000550
 80096a4:	20000554 	.word	0x20000554
 80096a8:	20000298 	.word	0x20000298
 80096ac:	20000294 	.word	0x20000294
 80096b0:	200005d0 	.word	0x200005d0
 80096b4:	42c80000 	.word	0x42c80000
 80096b8:	20000988 	.word	0x20000988
 80096bc:	2000098c 	.word	0x2000098c
 80096c0:	200005cc 	.word	0x200005cc
 80096c4:	200005c4 	.word	0x200005c4
 80096c8:	200005c8 	.word	0x200005c8
    else
        Vq = Vq_unclamped;
 80096cc:	4ba0      	ldr	r3, [pc, #640]	@ (8009950 <Current_Loop+0x528>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4aa0      	ldr	r2, [pc, #640]	@ (8009954 <Current_Loop+0x52c>)
 80096d2:	6013      	str	r3, [r2, #0]

    Vd = fminf(fmaxf(Vd, -V_limit), V_limit);
 80096d4:	4ba0      	ldr	r3, [pc, #640]	@ (8009958 <Current_Loop+0x530>)
 80096d6:	ed93 7a00 	vldr	s14, [r3]
 80096da:	edd7 7a02 	vldr	s15, [r7, #8]
 80096de:	eef1 7a67 	vneg.f32	s15, s15
 80096e2:	eef0 0a67 	vmov.f32	s1, s15
 80096e6:	eeb0 0a47 	vmov.f32	s0, s14
 80096ea:	f00a ff41 	bl	8014570 <fmaxf>
 80096ee:	eef0 7a40 	vmov.f32	s15, s0
 80096f2:	eef0 0a67 	vmov.f32	s1, s15
 80096f6:	ed97 0a02 	vldr	s0, [r7, #8]
 80096fa:	f00a ff56 	bl	80145aa <fminf>
 80096fe:	eef0 7a40 	vmov.f32	s15, s0
 8009702:	4b95      	ldr	r3, [pc, #596]	@ (8009958 <Current_Loop+0x530>)
 8009704:	edc3 7a00 	vstr	s15, [r3]
    Vq = fminf(fmaxf(Vq, -V_limit), V_limit);
 8009708:	4b92      	ldr	r3, [pc, #584]	@ (8009954 <Current_Loop+0x52c>)
 800970a:	ed93 7a00 	vldr	s14, [r3]
 800970e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009712:	eef1 7a67 	vneg.f32	s15, s15
 8009716:	eef0 0a67 	vmov.f32	s1, s15
 800971a:	eeb0 0a47 	vmov.f32	s0, s14
 800971e:	f00a ff27 	bl	8014570 <fmaxf>
 8009722:	eef0 7a40 	vmov.f32	s15, s0
 8009726:	eef0 0a67 	vmov.f32	s1, s15
 800972a:	ed97 0a02 	vldr	s0, [r7, #8]
 800972e:	f00a ff3c 	bl	80145aa <fminf>
 8009732:	eef0 7a40 	vmov.f32	s15, s0
 8009736:	4b87      	ldr	r3, [pc, #540]	@ (8009954 <Current_Loop+0x52c>)
 8009738:	edc3 7a00 	vstr	s15, [r3]

    Vd_prev = Vd;
 800973c:	4b86      	ldr	r3, [pc, #536]	@ (8009958 <Current_Loop+0x530>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a86      	ldr	r2, [pc, #536]	@ (800995c <Current_Loop+0x534>)
 8009742:	6013      	str	r3, [r2, #0]
    Vq_prev = Vq;
 8009744:	4b83      	ldr	r3, [pc, #524]	@ (8009954 <Current_Loop+0x52c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a85      	ldr	r2, [pc, #532]	@ (8009960 <Current_Loop+0x538>)
 800974a:	6013      	str	r3, [r2, #0]

	Valpha = Vd * cos(theta) - Vq * sin(theta);
 800974c:	4b82      	ldr	r3, [pc, #520]	@ (8009958 <Current_Loop+0x530>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f7f6 ff19 	bl	8000588 <__aeabi_f2d>
 8009756:	4604      	mov	r4, r0
 8009758:	460d      	mov	r5, r1
 800975a:	4b82      	ldr	r3, [pc, #520]	@ (8009964 <Current_Loop+0x53c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f7f6 ff12 	bl	8000588 <__aeabi_f2d>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	ec43 2b10 	vmov	d0, r2, r3
 800976c:	f00a fe58 	bl	8014420 <cos>
 8009770:	ec53 2b10 	vmov	r2, r3, d0
 8009774:	4620      	mov	r0, r4
 8009776:	4629      	mov	r1, r5
 8009778:	f7f6 ff5e 	bl	8000638 <__aeabi_dmul>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4690      	mov	r8, r2
 8009782:	4699      	mov	r9, r3
 8009784:	4b73      	ldr	r3, [pc, #460]	@ (8009954 <Current_Loop+0x52c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4618      	mov	r0, r3
 800978a:	f7f6 fefd 	bl	8000588 <__aeabi_f2d>
 800978e:	4604      	mov	r4, r0
 8009790:	460d      	mov	r5, r1
 8009792:	4b74      	ldr	r3, [pc, #464]	@ (8009964 <Current_Loop+0x53c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f7f6 fef6 	bl	8000588 <__aeabi_f2d>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	ec43 2b10 	vmov	d0, r2, r3
 80097a4:	f00a fe90 	bl	80144c8 <sin>
 80097a8:	ec53 2b10 	vmov	r2, r3, d0
 80097ac:	4620      	mov	r0, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	f7f6 ff42 	bl	8000638 <__aeabi_dmul>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4640      	mov	r0, r8
 80097ba:	4649      	mov	r1, r9
 80097bc:	f7f6 fd84 	bl	80002c8 <__aeabi_dsub>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4610      	mov	r0, r2
 80097c6:	4619      	mov	r1, r3
 80097c8:	f7f7 fa2e 	bl	8000c28 <__aeabi_d2f>
 80097cc:	4603      	mov	r3, r0
 80097ce:	4a66      	ldr	r2, [pc, #408]	@ (8009968 <Current_Loop+0x540>)
 80097d0:	6013      	str	r3, [r2, #0]
	Vbeta  = Vd * sin(theta) + Vq * cos(theta);
 80097d2:	4b61      	ldr	r3, [pc, #388]	@ (8009958 <Current_Loop+0x530>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7f6 fed6 	bl	8000588 <__aeabi_f2d>
 80097dc:	4604      	mov	r4, r0
 80097de:	460d      	mov	r5, r1
 80097e0:	4b60      	ldr	r3, [pc, #384]	@ (8009964 <Current_Loop+0x53c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7f6 fecf 	bl	8000588 <__aeabi_f2d>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	ec43 2b10 	vmov	d0, r2, r3
 80097f2:	f00a fe69 	bl	80144c8 <sin>
 80097f6:	ec53 2b10 	vmov	r2, r3, d0
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7f6 ff1b 	bl	8000638 <__aeabi_dmul>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4690      	mov	r8, r2
 8009808:	4699      	mov	r9, r3
 800980a:	4b52      	ldr	r3, [pc, #328]	@ (8009954 <Current_Loop+0x52c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4618      	mov	r0, r3
 8009810:	f7f6 feba 	bl	8000588 <__aeabi_f2d>
 8009814:	4604      	mov	r4, r0
 8009816:	460d      	mov	r5, r1
 8009818:	4b52      	ldr	r3, [pc, #328]	@ (8009964 <Current_Loop+0x53c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4618      	mov	r0, r3
 800981e:	f7f6 feb3 	bl	8000588 <__aeabi_f2d>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	ec43 2b10 	vmov	d0, r2, r3
 800982a:	f00a fdf9 	bl	8014420 <cos>
 800982e:	ec53 2b10 	vmov	r2, r3, d0
 8009832:	4620      	mov	r0, r4
 8009834:	4629      	mov	r1, r5
 8009836:	f7f6 feff 	bl	8000638 <__aeabi_dmul>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4640      	mov	r0, r8
 8009840:	4649      	mov	r1, r9
 8009842:	f7f6 fd43 	bl	80002cc <__adddf3>
 8009846:	4602      	mov	r2, r0
 8009848:	460b      	mov	r3, r1
 800984a:	4610      	mov	r0, r2
 800984c:	4619      	mov	r1, r3
 800984e:	f7f7 f9eb 	bl	8000c28 <__aeabi_d2f>
 8009852:	4603      	mov	r3, r0
 8009854:	4a45      	ldr	r2, [pc, #276]	@ (800996c <Current_Loop+0x544>)
 8009856:	6013      	str	r3, [r2, #0]

    Va = Valpha;
 8009858:	4b43      	ldr	r3, [pc, #268]	@ (8009968 <Current_Loop+0x540>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a44      	ldr	r2, [pc, #272]	@ (8009970 <Current_Loop+0x548>)
 800985e:	6013      	str	r3, [r2, #0]
    Vb = -0.5 * Valpha + (sqrtf(3) / 2) * Vbeta ;
 8009860:	4b41      	ldr	r3, [pc, #260]	@ (8009968 <Current_Loop+0x540>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4618      	mov	r0, r3
 8009866:	f7f6 fe8f 	bl	8000588 <__aeabi_f2d>
 800986a:	f04f 0200 	mov.w	r2, #0
 800986e:	4b41      	ldr	r3, [pc, #260]	@ (8009974 <Current_Loop+0x54c>)
 8009870:	f7f6 fee2 	bl	8000638 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4614      	mov	r4, r2
 800987a:	461d      	mov	r5, r3
 800987c:	4b3b      	ldr	r3, [pc, #236]	@ (800996c <Current_Loop+0x544>)
 800987e:	edd3 7a00 	vldr	s15, [r3]
 8009882:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8009978 <Current_Loop+0x550>
 8009886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800988a:	ee17 0a90 	vmov	r0, s15
 800988e:	f7f6 fe7b 	bl	8000588 <__aeabi_f2d>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4620      	mov	r0, r4
 8009898:	4629      	mov	r1, r5
 800989a:	f7f6 fd17 	bl	80002cc <__adddf3>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4610      	mov	r0, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	f7f7 f9bf 	bl	8000c28 <__aeabi_d2f>
 80098aa:	4603      	mov	r3, r0
 80098ac:	4a33      	ldr	r2, [pc, #204]	@ (800997c <Current_Loop+0x554>)
 80098ae:	6013      	str	r3, [r2, #0]
    Vc = -0.5 * Valpha - (sqrtf(3) / 2) * Vbeta ;
 80098b0:	4b2d      	ldr	r3, [pc, #180]	@ (8009968 <Current_Loop+0x540>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7f6 fe67 	bl	8000588 <__aeabi_f2d>
 80098ba:	f04f 0200 	mov.w	r2, #0
 80098be:	4b2d      	ldr	r3, [pc, #180]	@ (8009974 <Current_Loop+0x54c>)
 80098c0:	f7f6 feba 	bl	8000638 <__aeabi_dmul>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4614      	mov	r4, r2
 80098ca:	461d      	mov	r5, r3
 80098cc:	4b27      	ldr	r3, [pc, #156]	@ (800996c <Current_Loop+0x544>)
 80098ce:	edd3 7a00 	vldr	s15, [r3]
 80098d2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8009978 <Current_Loop+0x550>
 80098d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098da:	ee17 0a90 	vmov	r0, s15
 80098de:	f7f6 fe53 	bl	8000588 <__aeabi_f2d>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f6 fced 	bl	80002c8 <__aeabi_dsub>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4610      	mov	r0, r2
 80098f4:	4619      	mov	r1, r3
 80098f6:	f7f7 f997 	bl	8000c28 <__aeabi_d2f>
 80098fa:	4603      	mov	r3, r0
 80098fc:	4a20      	ldr	r2, [pc, #128]	@ (8009980 <Current_Loop+0x558>)
 80098fe:	6013      	str	r3, [r2, #0]

    setpwm(Va, Vb, Vc);
 8009900:	4b1b      	ldr	r3, [pc, #108]	@ (8009970 <Current_Loop+0x548>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f7f6 fe3f 	bl	8000588 <__aeabi_f2d>
 800990a:	4604      	mov	r4, r0
 800990c:	460d      	mov	r5, r1
 800990e:	4b1b      	ldr	r3, [pc, #108]	@ (800997c <Current_Loop+0x554>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4618      	mov	r0, r3
 8009914:	f7f6 fe38 	bl	8000588 <__aeabi_f2d>
 8009918:	4680      	mov	r8, r0
 800991a:	4689      	mov	r9, r1
 800991c:	4b18      	ldr	r3, [pc, #96]	@ (8009980 <Current_Loop+0x558>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f7f6 fe31 	bl	8000588 <__aeabi_f2d>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	ec43 2b12 	vmov	d2, r2, r3
 800992e:	ec49 8b11 	vmov	d1, r8, r9
 8009932:	ec45 4b10 	vmov	d0, r4, r5
 8009936:	f7fe ffe7 	bl	8008908 <setpwm>
    HAL_ADC_Start_DMA(&hadc2, &adc_dma_value, 1);
 800993a:	2201      	movs	r2, #1
 800993c:	4911      	ldr	r1, [pc, #68]	@ (8009984 <Current_Loop+0x55c>)
 800993e:	4812      	ldr	r0, [pc, #72]	@ (8009988 <Current_Loop+0x560>)
 8009940:	f001 fd3a 	bl	800b3b8 <HAL_ADC_Start_DMA>
}
 8009944:	bf00      	nop
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800994e:	bf00      	nop
 8009950:	200005d0 	.word	0x200005d0
 8009954:	200005c8 	.word	0x200005c8
 8009958:	200005c4 	.word	0x200005c4
 800995c:	20000988 	.word	0x20000988
 8009960:	2000098c 	.word	0x2000098c
 8009964:	200005c0 	.word	0x200005c0
 8009968:	20000530 	.word	0x20000530
 800996c:	20000534 	.word	0x20000534
 8009970:	20000538 	.word	0x20000538
 8009974:	bfe00000 	.word	0xbfe00000
 8009978:	3f5db3d7 	.word	0x3f5db3d7
 800997c:	2000053c 	.word	0x2000053c
 8009980:	20000540 	.word	0x20000540
 8009984:	200005e8 	.word	0x200005e8
 8009988:	20000648 	.word	0x20000648

0800998c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800998c:	b5b0      	push	{r4, r5, r7, lr}
 800998e:	b08a      	sub	sp, #40	@ 0x28
 8009990:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009992:	f001 fb27 	bl	800afe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009996:	f000 f8fd 	bl	8009b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800999a:	f000 fd01 	bl	800a3a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800999e:	f000 fcdf 	bl	800a360 <MX_DMA_Init>
  MX_TIM1_Init();
 80099a2:	f000 fab1 	bl	8009f08 <MX_TIM1_Init>
  MX_ADC1_Init();
 80099a6:	f000 f969 	bl	8009c7c <MX_ADC1_Init>
  MX_SPI1_Init();
 80099aa:	f000 fa75 	bl	8009e98 <MX_SPI1_Init>
  MX_TIM3_Init();
 80099ae:	f000 fbaf 	bl	800a110 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80099b2:	f000 fcab 	bl	800a30c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80099b6:	f000 fb5f 	bl	800a078 <MX_TIM2_Init>
  MX_TIM8_Init();
 80099ba:	f000 fc2d 	bl	800a218 <MX_TIM8_Init>
  MX_UART4_Init();
 80099be:	f000 fc7b 	bl	800a2b8 <MX_UART4_Init>
  MX_ADC2_Init();
 80099c2:	f000 f9e1 	bl	8009d88 <MX_ADC2_Init>
  MX_CAN1_Init();
 80099c6:	f000 fa31 	bl	8009e2c <MX_CAN1_Init>
  MX_TIM7_Init();
 80099ca:	f000 fbef 	bl	800a1ac <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canopenNodeSTM32;
  canopenNodeSTM32.CANHandle = &hcan1;
 80099ce:	4b57      	ldr	r3, [pc, #348]	@ (8009b2c <main+0x1a0>)
 80099d0:	60bb      	str	r3, [r7, #8]
  canopenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 80099d2:	4b57      	ldr	r3, [pc, #348]	@ (8009b30 <main+0x1a4>)
 80099d4:	60fb      	str	r3, [r7, #12]
  canopenNodeSTM32.timerHandle = &htim7;
 80099d6:	4b57      	ldr	r3, [pc, #348]	@ (8009b34 <main+0x1a8>)
 80099d8:	607b      	str	r3, [r7, #4]
  canopenNodeSTM32.desiredNodeID = 32;
 80099da:	2320      	movs	r3, #32
 80099dc:	703b      	strb	r3, [r7, #0]
  canopenNodeSTM32.baudrate = 500;
 80099de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80099e2:	807b      	strh	r3, [r7, #2]
  canopen_app_init(&canopenNodeSTM32);
 80099e4:	463b      	mov	r3, r7
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fd fea8 	bl	800773c <canopen_app_init>

  HAL_TIM_Base_Start(&htim1);
 80099ec:	4852      	ldr	r0, [pc, #328]	@ (8009b38 <main+0x1ac>)
 80099ee:	f005 fceb 	bl	800f3c8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80099f2:	2100      	movs	r1, #0
 80099f4:	4850      	ldr	r0, [pc, #320]	@ (8009b38 <main+0x1ac>)
 80099f6:	f005 fe47 	bl	800f688 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80099fa:	2104      	movs	r1, #4
 80099fc:	484e      	ldr	r0, [pc, #312]	@ (8009b38 <main+0x1ac>)
 80099fe:	f005 fe43 	bl	800f688 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8009a02:	2108      	movs	r1, #8
 8009a04:	484c      	ldr	r0, [pc, #304]	@ (8009b38 <main+0x1ac>)
 8009a06:	f005 fe3f 	bl	800f688 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 8009a0a:	484c      	ldr	r0, [pc, #304]	@ (8009b3c <main+0x1b0>)
 8009a0c:	f005 fd44 	bl	800f498 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8009a10:	484b      	ldr	r0, [pc, #300]	@ (8009b40 <main+0x1b4>)
 8009a12:	f005 fcd9 	bl	800f3c8 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8009a16:	4b4b      	ldr	r3, [pc, #300]	@ (8009b44 <main+0x1b8>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 8009a1e:	4849      	ldr	r0, [pc, #292]	@ (8009b44 <main+0x1b8>)
 8009a20:	f005 fcd2 	bl	800f3c8 <HAL_TIM_Base_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8009a24:	4848      	ldr	r0, [pc, #288]	@ (8009b48 <main+0x1bc>)
 8009a26:	f002 f8a5 	bl	800bb74 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	2108      	movs	r1, #8
 8009a2e:	4847      	ldr	r0, [pc, #284]	@ (8009b4c <main+0x1c0>)
 8009a30:	f004 f8c4 	bl	800dbbc <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc2, &adc_dma_value, 1);
 8009a34:	2201      	movs	r2, #1
 8009a36:	4946      	ldr	r1, [pc, #280]	@ (8009b50 <main+0x1c4>)
 8009a38:	4846      	ldr	r0, [pc, #280]	@ (8009b54 <main+0x1c8>)
 8009a3a:	f001 fcbd 	bl	800b3b8 <HAL_ADC_Start_DMA>
  angle = AS5147U_GetAngleRad();
 8009a3e:	f7fe fd47 	bl	80084d0 <AS5147U_GetAngleRad>
 8009a42:	eef0 7a40 	vmov.f32	s15, s0
 8009a46:	4b44      	ldr	r3, [pc, #272]	@ (8009b58 <main+0x1cc>)
 8009a48:	edc3 7a00 	vstr	s15, [r3]
  alignRotor();
 8009a4c:	f7fe fde4 	bl	8008618 <alignRotor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  canopen_app_process();
 8009a50:	f7fd ffc6 	bl	80079e0 <canopen_app_process>
	  ODR_t err;
	  	  {
	  	  	OD_entry_t *entry = OD_find(OD, 0x2000);  // Tìm mục trong OD
 8009a54:	4b41      	ldr	r3, [pc, #260]	@ (8009b5c <main+0x1d0>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7f8 fcf7 	bl	8002450 <OD_find>
 8009a62:	61f8      	str	r0, [r7, #28]
	  	  	if (entry != NULL) {
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d007      	beq.n	8009a7a <main+0xee>
	  	  	    err = OD_get_f32(entry, 0x01, &rx_theta, true);
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8009b60 <main+0x1d4>)
 8009a6e:	2101      	movs	r1, #1
 8009a70:	69f8      	ldr	r0, [r7, #28]
 8009a72:	f7fe fc3b 	bl	80082ec <OD_get_f32>
 8009a76:	4603      	mov	r3, r0
 8009a78:	76fb      	strb	r3, [r7, #27]

	  	  	}
	  	  	theta_ref=rx_theta;
 8009a7a:	4b39      	ldr	r3, [pc, #228]	@ (8009b60 <main+0x1d4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a39      	ldr	r2, [pc, #228]	@ (8009b64 <main+0x1d8>)
 8009a80:	6013      	str	r3, [r2, #0]
	  	  	HAL_Delay(1);  // Cập nhật mỗi giây
 8009a82:	2001      	movs	r0, #1
 8009a84:	f001 fb20 	bl	800b0c8 <HAL_Delay>
	  	  }

	  	OD_PERSIST_COMM.x2200_TPDO.theta_now= theta_now;
 8009a88:	4b37      	ldr	r3, [pc, #220]	@ (8009b68 <main+0x1dc>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a37      	ldr	r2, [pc, #220]	@ (8009b6c <main+0x1e0>)
 8009a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	  	OD_PERSIST_COMM.x2200_TPDO.i_d= i_d;
 8009a92:	4b37      	ldr	r3, [pc, #220]	@ (8009b70 <main+0x1e4>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a35      	ldr	r2, [pc, #212]	@ (8009b6c <main+0x1e0>)
 8009a98:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
	  	OD_PERSIST_COMM.x2200_TPDO.i_q=i_q;
 8009a9c:	4b35      	ldr	r3, [pc, #212]	@ (8009b74 <main+0x1e8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a32      	ldr	r2, [pc, #200]	@ (8009b6c <main+0x1e0>)
 8009aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
	  if (flag_current_loop)
 8009aa6:	4b34      	ldr	r3, [pc, #208]	@ (8009b78 <main+0x1ec>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d014      	beq.n	8009ada <main+0x14e>
	     {
	         flag_current_loop = 0;
 8009ab0:	4b31      	ldr	r3, [pc, #196]	@ (8009b78 <main+0x1ec>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
	         position_loop();
 8009ab6:	f7ff fa03 	bl	8008ec0 <position_loop>
	         Speed_Loop();
 8009aba:	f7ff fb25 	bl	8009108 <Speed_Loop>
	         update_PID();
 8009abe:	f7ff f835 	bl	8008b2c <update_PID>
	         Current_Loop();
 8009ac2:	f7ff fcb1 	bl	8009428 <Current_Loop>
	       //  voltage = (adc_dma_value / 4095.0) * 3.3;

	         i++;
 8009ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b7c <main+0x1f0>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3301      	adds	r3, #1
 8009acc:	4a2b      	ldr	r2, [pc, #172]	@ (8009b7c <main+0x1f0>)
 8009ace:	6013      	str	r3, [r2, #0]
	         speed_loop_counter++;
 8009ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8009b80 <main+0x1f4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b80 <main+0x1f4>)
 8009ad8:	6013      	str	r3, [r2, #0]



	     }

	      if (!uart_busy)
 8009ada:	4b2a      	ldr	r3, [pc, #168]	@ (8009b84 <main+0x1f8>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1b5      	bne.n	8009a50 <main+0xc4>
//	    sprintf((char*)array_iq, "%f\t%f\t\r\n", velocity_ref, velocity);
//	    uart_busy = 1; // Đánh dấu UART đang bận
//	    HAL_UART_Transmit_DMA(&huart2, array_iq, strlen((char*)array_iq));


	    	  	    sprintf((char*)array_iq, "%f\t%f\t\r\n", theta_ref, theta_now);
 8009ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8009b64 <main+0x1d8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7f6 fd4d 	bl	8000588 <__aeabi_f2d>
 8009aee:	4604      	mov	r4, r0
 8009af0:	460d      	mov	r5, r1
 8009af2:	4b1d      	ldr	r3, [pc, #116]	@ (8009b68 <main+0x1dc>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f6 fd46 	bl	8000588 <__aeabi_f2d>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	e9cd 2300 	strd	r2, r3, [sp]
 8009b04:	4622      	mov	r2, r4
 8009b06:	462b      	mov	r3, r5
 8009b08:	491f      	ldr	r1, [pc, #124]	@ (8009b88 <main+0x1fc>)
 8009b0a:	4820      	ldr	r0, [pc, #128]	@ (8009b8c <main+0x200>)
 8009b0c:	f008 fca2 	bl	8012454 <siprintf>
	    	  	    uart_busy = 1; // Đánh dấu UART đang bận
 8009b10:	4b1c      	ldr	r3, [pc, #112]	@ (8009b84 <main+0x1f8>)
 8009b12:	2201      	movs	r2, #1
 8009b14:	701a      	strb	r2, [r3, #0]
	    	  	    HAL_UART_Transmit_DMA(&huart2, array_iq, strlen((char*)array_iq));
 8009b16:	481d      	ldr	r0, [pc, #116]	@ (8009b8c <main+0x200>)
 8009b18:	f7f6 fbca 	bl	80002b0 <strlen>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	461a      	mov	r2, r3
 8009b22:	491a      	ldr	r1, [pc, #104]	@ (8009b8c <main+0x200>)
 8009b24:	481a      	ldr	r0, [pc, #104]	@ (8009b90 <main+0x204>)
 8009b26:	f006 fd67 	bl	80105f8 <HAL_UART_Transmit_DMA>
  {
 8009b2a:	e791      	b.n	8009a50 <main+0xc4>
 8009b2c:	20000690 	.word	0x20000690
 8009b30:	08009e2d 	.word	0x08009e2d
 8009b34:	200007e8 	.word	0x200007e8
 8009b38:	20000710 	.word	0x20000710
 8009b3c:	20000830 	.word	0x20000830
 8009b40:	200007a0 	.word	0x200007a0
 8009b44:	20000758 	.word	0x20000758
 8009b48:	20000600 	.word	0x20000600
 8009b4c:	40020400 	.word	0x40020400
 8009b50:	200005e8 	.word	0x200005e8
 8009b54:	20000648 	.word	0x20000648
 8009b58:	20000544 	.word	0x20000544
 8009b5c:	20000288 	.word	0x20000288
 8009b60:	200005fc 	.word	0x200005fc
 8009b64:	20000560 	.word	0x20000560
 8009b68:	20000570 	.word	0x20000570
 8009b6c:	20000000 	.word	0x20000000
 8009b70:	20000528 	.word	0x20000528
 8009b74:	2000052c 	.word	0x2000052c
 8009b78:	200005e4 	.word	0x200005e4
 8009b7c:	200005f0 	.word	0x200005f0
 8009b80:	200005e0 	.word	0x200005e0
 8009b84:	200005e5 	.word	0x200005e5
 8009b88:	08015968 	.word	0x08015968
 8009b8c:	2000058c 	.word	0x2000058c
 8009b90:	200008c0 	.word	0x200008c0

08009b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b094      	sub	sp, #80	@ 0x50
 8009b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009b9a:	f107 031c 	add.w	r3, r7, #28
 8009b9e:	2234      	movs	r2, #52	@ 0x34
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f008 fd68 	bl	8012678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ba8:	f107 0308 	add.w	r3, r7, #8
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	605a      	str	r2, [r3, #4]
 8009bb2:	609a      	str	r2, [r3, #8]
 8009bb4:	60da      	str	r2, [r3, #12]
 8009bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009bb8:	2300      	movs	r3, #0
 8009bba:	607b      	str	r3, [r7, #4]
 8009bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8009c74 <SystemClock_Config+0xe0>)
 8009bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8009c74 <SystemClock_Config+0xe0>)
 8009bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8009bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8009c74 <SystemClock_Config+0xe0>)
 8009bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bd0:	607b      	str	r3, [r7, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	4b27      	ldr	r3, [pc, #156]	@ (8009c78 <SystemClock_Config+0xe4>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a26      	ldr	r2, [pc, #152]	@ (8009c78 <SystemClock_Config+0xe4>)
 8009bde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	4b24      	ldr	r3, [pc, #144]	@ (8009c78 <SystemClock_Config+0xe4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009bec:	603b      	str	r3, [r7, #0]
 8009bee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009c00:	2300      	movs	r3, #0
 8009c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8009c04:	2310      	movs	r3, #16
 8009c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8009c08:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8009c0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8009c12:	2302      	movs	r3, #2
 8009c14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009c16:	2302      	movs	r3, #2
 8009c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c1a:	f107 031c 	add.w	r3, r7, #28
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f004 fb80 	bl	800e324 <HAL_RCC_OscConfig>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8009c2a:	f000 fd5f 	bl	800a6ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009c2e:	f003 ffdf 	bl	800dbf0 <HAL_PWREx_EnableOverDrive>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8009c38:	f000 fd58 	bl	800a6ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c3c:	230f      	movs	r3, #15
 8009c3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c40:	2302      	movs	r3, #2
 8009c42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c44:	2300      	movs	r3, #0
 8009c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009c48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8009c4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009c54:	f107 0308 	add.w	r3, r7, #8
 8009c58:	2105      	movs	r1, #5
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f004 f818 	bl	800dc90 <HAL_RCC_ClockConfig>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8009c66:	f000 fd41 	bl	800a6ec <Error_Handler>
  }
}
 8009c6a:	bf00      	nop
 8009c6c:	3750      	adds	r7, #80	@ 0x50
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	40023800 	.word	0x40023800
 8009c78:	40007000 	.word	0x40007000

08009c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08c      	sub	sp, #48	@ 0x30
 8009c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009c82:	f107 0320 	add.w	r3, r7, #32
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	605a      	str	r2, [r3, #4]
 8009c8c:	609a      	str	r2, [r3, #8]
 8009c8e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009c90:	463b      	mov	r3, r7
 8009c92:	2220      	movs	r2, #32
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f008 fcee 	bl	8012678 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8009c9c:	4b37      	ldr	r3, [pc, #220]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009c9e:	4a38      	ldr	r2, [pc, #224]	@ (8009d80 <MX_ADC1_Init+0x104>)
 8009ca0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009ca2:	4b36      	ldr	r3, [pc, #216]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009ca4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009caa:	4b34      	ldr	r3, [pc, #208]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8009cb0:	4b32      	ldr	r3, [pc, #200]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009cb6:	4b31      	ldr	r3, [pc, #196]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009cca:	4b2c      	ldr	r3, [pc, #176]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8009d84 <MX_ADC1_Init+0x108>)
 8009cce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009cd6:	4b29      	ldr	r3, [pc, #164]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009cdc:	4b27      	ldr	r3, [pc, #156]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8009ce4:	4b25      	ldr	r3, [pc, #148]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009cea:	4824      	ldr	r0, [pc, #144]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009cec:	f001 fa10 	bl	800b110 <HAL_ADC_Init>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8009cf6:	f000 fcf9 	bl	800a6ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8009d02:	2307      	movs	r3, #7
 8009d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d06:	f107 0320 	add.w	r3, r7, #32
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	481b      	ldr	r0, [pc, #108]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009d0e:	f001 fc81 	bl	800b614 <HAL_ADC_ConfigChannel>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8009d18:	f000 fce8 	bl	800a6ec <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8009d20:	2301      	movs	r3, #1
 8009d22:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8009d24:	2302      	movs	r3, #2
 8009d26:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 8009d28:	2307      	movs	r3, #7
 8009d2a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8009d2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009d30:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8009d32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009d36:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8009d44:	463b      	mov	r3, r7
 8009d46:	4619      	mov	r1, r3
 8009d48:	480c      	ldr	r0, [pc, #48]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009d4a:	f002 f81d 	bl	800bd88 <HAL_ADCEx_InjectedConfigChannel>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8009d54:	f000 fcca 	bl	800a6ec <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8009d58:	2304      	movs	r3, #4
 8009d5a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8009d60:	463b      	mov	r3, r7
 8009d62:	4619      	mov	r1, r3
 8009d64:	4805      	ldr	r0, [pc, #20]	@ (8009d7c <MX_ADC1_Init+0x100>)
 8009d66:	f002 f80f 	bl	800bd88 <HAL_ADCEx_InjectedConfigChannel>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8009d70:	f000 fcbc 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009d74:	bf00      	nop
 8009d76:	3730      	adds	r7, #48	@ 0x30
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20000600 	.word	0x20000600
 8009d80:	40012000 	.word	0x40012000
 8009d84:	0f000001 	.word	0x0f000001

08009d88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009d8e:	463b      	mov	r3, r7
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	605a      	str	r2, [r3, #4]
 8009d96:	609a      	str	r2, [r3, #8]
 8009d98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8009d9a:	4b21      	ldr	r3, [pc, #132]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009d9c:	4a21      	ldr	r2, [pc, #132]	@ (8009e24 <MX_ADC2_Init+0x9c>)
 8009d9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8009da0:	4b1f      	ldr	r3, [pc, #124]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009da2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009da6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8009da8:	4b1d      	ldr	r3, [pc, #116]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8009dae:	4b1c      	ldr	r3, [pc, #112]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8009db4:	4b1a      	ldr	r3, [pc, #104]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8009dba:	4b19      	ldr	r3, [pc, #100]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009dc2:	4b17      	ldr	r3, [pc, #92]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009dc8:	4b15      	ldr	r3, [pc, #84]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009dca:	4a17      	ldr	r2, [pc, #92]	@ (8009e28 <MX_ADC2_Init+0xa0>)
 8009dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009dce:	4b14      	ldr	r3, [pc, #80]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8009dd4:	4b12      	ldr	r3, [pc, #72]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8009dda:	4b11      	ldr	r3, [pc, #68]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009de2:	4b0f      	ldr	r3, [pc, #60]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8009de8:	480d      	ldr	r0, [pc, #52]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009dea:	f001 f991 	bl	800b110 <HAL_ADC_Init>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8009df4:	f000 fc7a 	bl	800a6ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009e00:	2300      	movs	r3, #0
 8009e02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009e04:	463b      	mov	r3, r7
 8009e06:	4619      	mov	r1, r3
 8009e08:	4805      	ldr	r0, [pc, #20]	@ (8009e20 <MX_ADC2_Init+0x98>)
 8009e0a:	f001 fc03 	bl	800b614 <HAL_ADC_ConfigChannel>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8009e14:	f000 fc6a 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20000648 	.word	0x20000648
 8009e24:	40012100 	.word	0x40012100
 8009e28:	0f000001 	.word	0x0f000001

08009e2c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8009e30:	4b17      	ldr	r3, [pc, #92]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e32:	4a18      	ldr	r2, [pc, #96]	@ (8009e94 <MX_CAN1_Init+0x68>)
 8009e34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8009e36:	4b16      	ldr	r3, [pc, #88]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e38:	2212      	movs	r2, #18
 8009e3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009e3c:	4b14      	ldr	r3, [pc, #80]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009e42:	4b13      	ldr	r3, [pc, #76]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8009e48:	4b11      	ldr	r3, [pc, #68]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009e4e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8009e50:	4b0f      	ldr	r3, [pc, #60]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009e56:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009e58:	4b0d      	ldr	r3, [pc, #52]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8009e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e60:	2201      	movs	r2, #1
 8009e62:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009e64:	4b0a      	ldr	r3, [pc, #40]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8009e6a:	4b09      	ldr	r3, [pc, #36]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 8009e70:	4b07      	ldr	r3, [pc, #28]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e72:	2201      	movs	r2, #1
 8009e74:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8009e76:	4b06      	ldr	r3, [pc, #24]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009e7c:	4804      	ldr	r0, [pc, #16]	@ (8009e90 <MX_CAN1_Init+0x64>)
 8009e7e:	f002 f91d 	bl	800c0bc <HAL_CAN_Init>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8009e88:	f000 fc30 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8009e8c:	bf00      	nop
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	20000690 	.word	0x20000690
 8009e94:	40006400 	.word	0x40006400

08009e98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009e9c:	4b18      	ldr	r3, [pc, #96]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009e9e:	4a19      	ldr	r2, [pc, #100]	@ (8009f04 <MX_SPI1_Init+0x6c>)
 8009ea0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009ea2:	4b17      	ldr	r3, [pc, #92]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009ea4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009ea8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009eaa:	4b15      	ldr	r3, [pc, #84]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8009eb0:	4b13      	ldr	r3, [pc, #76]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009eb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009eb8:	4b11      	ldr	r3, [pc, #68]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009ebe:	4b10      	ldr	r3, [pc, #64]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009eca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009ece:	2218      	movs	r2, #24
 8009ed0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009ed8:	4b09      	ldr	r3, [pc, #36]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ede:	4b08      	ldr	r3, [pc, #32]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009ee4:	4b06      	ldr	r3, [pc, #24]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009ee6:	220a      	movs	r2, #10
 8009ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009eea:	4805      	ldr	r0, [pc, #20]	@ (8009f00 <MX_SPI1_Init+0x68>)
 8009eec:	f004 fcb8 	bl	800e860 <HAL_SPI_Init>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8009ef6:	f000 fbf9 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009efa:	bf00      	nop
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200006b8 	.word	0x200006b8
 8009f04:	40013000 	.word	0x40013000

08009f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b096      	sub	sp, #88	@ 0x58
 8009f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f0e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	605a      	str	r2, [r3, #4]
 8009f18:	609a      	str	r2, [r3, #8]
 8009f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	605a      	str	r2, [r3, #4]
 8009f30:	609a      	str	r2, [r3, #8]
 8009f32:	60da      	str	r2, [r3, #12]
 8009f34:	611a      	str	r2, [r3, #16]
 8009f36:	615a      	str	r2, [r3, #20]
 8009f38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009f3a:	1d3b      	adds	r3, r7, #4
 8009f3c:	2220      	movs	r2, #32
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f008 fb99 	bl	8012678 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009f46:	4b4a      	ldr	r3, [pc, #296]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f48:	4a4a      	ldr	r2, [pc, #296]	@ (800a074 <MX_TIM1_Init+0x16c>)
 8009f4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009f4c:	4b48      	ldr	r3, [pc, #288]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8009f52:	4b47      	ldr	r3, [pc, #284]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f54:	2220      	movs	r2, #32
 8009f56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2999;
 8009f58:	4b45      	ldr	r3, [pc, #276]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f5a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8009f5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f60:	4b43      	ldr	r3, [pc, #268]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009f66:	4b42      	ldr	r3, [pc, #264]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f6c:	4b40      	ldr	r3, [pc, #256]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009f72:	483f      	ldr	r0, [pc, #252]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f74:	f005 f9d8 	bl	800f328 <HAL_TIM_Base_Init>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8009f7e:	f000 fbb5 	bl	800a6ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009f88:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4838      	ldr	r0, [pc, #224]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009f90:	f005 fdf4 	bl	800fb7c <HAL_TIM_ConfigClockSource>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8009f9a:	f000 fba7 	bl	800a6ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009f9e:	4834      	ldr	r0, [pc, #208]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009fa0:	f005 fb19 	bl	800f5d6 <HAL_TIM_PWM_Init>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8009faa:	f000 fb9f 	bl	800a6ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009fae:	2320      	movs	r3, #32
 8009fb0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009fb6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009fba:	4619      	mov	r1, r3
 8009fbc:	482c      	ldr	r0, [pc, #176]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009fbe:	f006 f9e9 	bl	8010394 <HAL_TIMEx_MasterConfigSynchronization>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8009fc8:	f000 fb90 	bl	800a6ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8009fcc:	2370      	movs	r3, #112	@ 0x70
 8009fce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8009fdc:	2304      	movs	r3, #4
 8009fde:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fec:	2200      	movs	r2, #0
 8009fee:	4619      	mov	r1, r3
 8009ff0:	481f      	ldr	r0, [pc, #124]	@ (800a070 <MX_TIM1_Init+0x168>)
 8009ff2:	f005 fd01 	bl	800f9f8 <HAL_TIM_PWM_ConfigChannel>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8009ffc:	f000 fb76 	bl	800a6ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a004:	2204      	movs	r2, #4
 800a006:	4619      	mov	r1, r3
 800a008:	4819      	ldr	r0, [pc, #100]	@ (800a070 <MX_TIM1_Init+0x168>)
 800a00a:	f005 fcf5 	bl	800f9f8 <HAL_TIM_PWM_ConfigChannel>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800a014:	f000 fb6a 	bl	800a6ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a01c:	2208      	movs	r2, #8
 800a01e:	4619      	mov	r1, r3
 800a020:	4813      	ldr	r0, [pc, #76]	@ (800a070 <MX_TIM1_Init+0x168>)
 800a022:	f005 fce9 	bl	800f9f8 <HAL_TIM_PWM_ConfigChannel>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800a02c:	f000 fb5e 	bl	800a6ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a030:	2300      	movs	r3, #0
 800a032:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a034:	2300      	movs	r3, #0
 800a036:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a048:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a04e:	1d3b      	adds	r3, r7, #4
 800a050:	4619      	mov	r1, r3
 800a052:	4807      	ldr	r0, [pc, #28]	@ (800a070 <MX_TIM1_Init+0x168>)
 800a054:	f006 fa1a 	bl	801048c <HAL_TIMEx_ConfigBreakDeadTime>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800a05e:	f000 fb45 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a062:	4803      	ldr	r0, [pc, #12]	@ (800a070 <MX_TIM1_Init+0x168>)
 800a064:	f000 fd32 	bl	800aacc <HAL_TIM_MspPostInit>

}
 800a068:	bf00      	nop
 800a06a:	3758      	adds	r7, #88	@ 0x58
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20000710 	.word	0x20000710
 800a074:	40010000 	.word	0x40010000

0800a078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	605a      	str	r2, [r3, #4]
 800a088:	609a      	str	r2, [r3, #8]
 800a08a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a08c:	463b      	mov	r3, r7
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a094:	4b1d      	ldr	r3, [pc, #116]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a096:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a09a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44;
 800a09c:	4b1b      	ldr	r3, [pc, #108]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a09e:	222c      	movs	r2, #44	@ 0x2c
 800a0a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800a0a8:	4b18      	ldr	r3, [pc, #96]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0b0:	4b16      	ldr	r3, [pc, #88]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0b6:	4b15      	ldr	r3, [pc, #84]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a0bc:	4813      	ldr	r0, [pc, #76]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a0be:	f005 f933 	bl	800f328 <HAL_TIM_Base_Init>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800a0c8:	f000 fb10 	bl	800a6ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a0d2:	f107 0308 	add.w	r3, r7, #8
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	480c      	ldr	r0, [pc, #48]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a0da:	f005 fd4f 	bl	800fb7c <HAL_TIM_ConfigClockSource>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800a0e4:	f000 fb02 	bl	800a6ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a0f0:	463b      	mov	r3, r7
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4805      	ldr	r0, [pc, #20]	@ (800a10c <MX_TIM2_Init+0x94>)
 800a0f6:	f006 f94d 	bl	8010394 <HAL_TIMEx_MasterConfigSynchronization>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800a100:	f000 faf4 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a104:	bf00      	nop
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000758 	.word	0x20000758

0800a110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a116:	f107 0308 	add.w	r3, r7, #8
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	605a      	str	r2, [r3, #4]
 800a120:	609a      	str	r2, [r3, #8]
 800a122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a124:	463b      	mov	r3, r7
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a12c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a12e:	4a1e      	ldr	r2, [pc, #120]	@ (800a1a8 <MX_TIM3_Init+0x98>)
 800a130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 800a132:	4b1c      	ldr	r3, [pc, #112]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a134:	2213      	movs	r2, #19
 800a136:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a138:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a13e:	4b19      	ldr	r3, [pc, #100]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a140:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a144:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a146:	4b17      	ldr	r3, [pc, #92]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a148:	2200      	movs	r2, #0
 800a14a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a14c:	4b15      	ldr	r3, [pc, #84]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a14e:	2200      	movs	r2, #0
 800a150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a152:	4814      	ldr	r0, [pc, #80]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a154:	f005 f8e8 	bl	800f328 <HAL_TIM_Base_Init>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800a15e:	f000 fac5 	bl	800a6ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a168:	f107 0308 	add.w	r3, r7, #8
 800a16c:	4619      	mov	r1, r3
 800a16e:	480d      	ldr	r0, [pc, #52]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a170:	f005 fd04 	bl	800fb7c <HAL_TIM_ConfigClockSource>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800a17a:	f000 fab7 	bl	800a6ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a17e:	2300      	movs	r3, #0
 800a180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a182:	2300      	movs	r3, #0
 800a184:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a186:	463b      	mov	r3, r7
 800a188:	4619      	mov	r1, r3
 800a18a:	4806      	ldr	r0, [pc, #24]	@ (800a1a4 <MX_TIM3_Init+0x94>)
 800a18c:	f006 f902 	bl	8010394 <HAL_TIMEx_MasterConfigSynchronization>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800a196:	f000 faa9 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a19a:	bf00      	nop
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	200007a0 	.word	0x200007a0
 800a1a8:	40000400 	.word	0x40000400

0800a1ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800a1ba:	4b15      	ldr	r3, [pc, #84]	@ (800a210 <MX_TIM7_Init+0x64>)
 800a1bc:	4a15      	ldr	r2, [pc, #84]	@ (800a214 <MX_TIM7_Init+0x68>)
 800a1be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 800a1c0:	4b13      	ldr	r3, [pc, #76]	@ (800a210 <MX_TIM7_Init+0x64>)
 800a1c2:	22b3      	movs	r2, #179	@ 0xb3
 800a1c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1c6:	4b12      	ldr	r3, [pc, #72]	@ (800a210 <MX_TIM7_Init+0x64>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800a1cc:	4b10      	ldr	r3, [pc, #64]	@ (800a210 <MX_TIM7_Init+0x64>)
 800a1ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a1d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a210 <MX_TIM7_Init+0x64>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a1da:	480d      	ldr	r0, [pc, #52]	@ (800a210 <MX_TIM7_Init+0x64>)
 800a1dc:	f005 f8a4 	bl	800f328 <HAL_TIM_Base_Init>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800a1e6:	f000 fa81 	bl	800a6ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4806      	ldr	r0, [pc, #24]	@ (800a210 <MX_TIM7_Init+0x64>)
 800a1f8:	f006 f8cc 	bl	8010394 <HAL_TIMEx_MasterConfigSynchronization>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800a202:	f000 fa73 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200007e8 	.word	0x200007e8
 800a214:	40001400 	.word	0x40001400

0800a218 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a21e:	f107 0308 	add.w	r3, r7, #8
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	605a      	str	r2, [r3, #4]
 800a228:	609a      	str	r2, [r3, #8]
 800a22a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a22c:	463b      	mov	r3, r7
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a234:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a236:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b4 <MX_TIM8_Init+0x9c>)
 800a238:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 800a23a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a23c:	22b3      	movs	r2, #179	@ 0xb3
 800a23e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a240:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a242:	2200      	movs	r2, #0
 800a244:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800a246:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a248:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a24c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a24e:	4b18      	ldr	r3, [pc, #96]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a250:	2200      	movs	r2, #0
 800a252:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a254:	4b16      	ldr	r3, [pc, #88]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a256:	2200      	movs	r2, #0
 800a258:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a25a:	4b15      	ldr	r3, [pc, #84]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a260:	4813      	ldr	r0, [pc, #76]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a262:	f005 f861 	bl	800f328 <HAL_TIM_Base_Init>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800a26c:	f000 fa3e 	bl	800a6ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a276:	f107 0308 	add.w	r3, r7, #8
 800a27a:	4619      	mov	r1, r3
 800a27c:	480c      	ldr	r0, [pc, #48]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a27e:	f005 fc7d 	bl	800fb7c <HAL_TIM_ConfigClockSource>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800a288:	f000 fa30 	bl	800a6ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a28c:	2300      	movs	r3, #0
 800a28e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a290:	2300      	movs	r3, #0
 800a292:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a294:	463b      	mov	r3, r7
 800a296:	4619      	mov	r1, r3
 800a298:	4805      	ldr	r0, [pc, #20]	@ (800a2b0 <MX_TIM8_Init+0x98>)
 800a29a:	f006 f87b 	bl	8010394 <HAL_TIMEx_MasterConfigSynchronization>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800a2a4:	f000 fa22 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a2a8:	bf00      	nop
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	20000830 	.word	0x20000830
 800a2b4:	40010400 	.word	0x40010400

0800a2b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a2bc:	4b11      	ldr	r3, [pc, #68]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2be:	4a12      	ldr	r2, [pc, #72]	@ (800a308 <MX_UART4_Init+0x50>)
 800a2c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a2c2:	4b10      	ldr	r3, [pc, #64]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a2c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a2ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a2d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a2dc:	4b09      	ldr	r3, [pc, #36]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2de:	220c      	movs	r2, #12
 800a2e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2e2:	4b08      	ldr	r3, [pc, #32]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2e8:	4b06      	ldr	r3, [pc, #24]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a2ee:	4805      	ldr	r0, [pc, #20]	@ (800a304 <MX_UART4_Init+0x4c>)
 800a2f0:	f006 f932 	bl	8010558 <HAL_UART_Init>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a2fa:	f000 f9f7 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a2fe:	bf00      	nop
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20000878 	.word	0x20000878
 800a308:	40004c00 	.word	0x40004c00

0800a30c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a310:	4b11      	ldr	r3, [pc, #68]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a312:	4a12      	ldr	r2, [pc, #72]	@ (800a35c <MX_USART2_UART_Init+0x50>)
 800a314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800a316:	4b10      	ldr	r3, [pc, #64]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a318:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800a31c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a31e:	4b0e      	ldr	r3, [pc, #56]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a320:	2200      	movs	r2, #0
 800a322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a324:	4b0c      	ldr	r3, [pc, #48]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a326:	2200      	movs	r2, #0
 800a328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a32a:	4b0b      	ldr	r3, [pc, #44]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a330:	4b09      	ldr	r3, [pc, #36]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a332:	220c      	movs	r2, #12
 800a334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a336:	4b08      	ldr	r3, [pc, #32]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a338:	2200      	movs	r2, #0
 800a33a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a33c:	4b06      	ldr	r3, [pc, #24]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a33e:	2200      	movs	r2, #0
 800a340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a342:	4805      	ldr	r0, [pc, #20]	@ (800a358 <MX_USART2_UART_Init+0x4c>)
 800a344:	f006 f908 	bl	8010558 <HAL_UART_Init>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a34e:	f000 f9cd 	bl	800a6ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a352:	bf00      	nop
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	200008c0 	.word	0x200008c0
 800a35c:	40004400 	.word	0x40004400

0800a360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a366:	2300      	movs	r3, #0
 800a368:	607b      	str	r3, [r7, #4]
 800a36a:	4b0c      	ldr	r3, [pc, #48]	@ (800a39c <MX_DMA_Init+0x3c>)
 800a36c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a36e:	4a0b      	ldr	r2, [pc, #44]	@ (800a39c <MX_DMA_Init+0x3c>)
 800a370:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a374:	6313      	str	r3, [r2, #48]	@ 0x30
 800a376:	4b09      	ldr	r3, [pc, #36]	@ (800a39c <MX_DMA_Init+0x3c>)
 800a378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a37e:	607b      	str	r3, [r7, #4]
 800a380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800a382:	2200      	movs	r2, #0
 800a384:	2100      	movs	r1, #0
 800a386:	2011      	movs	r0, #17
 800a388:	f002 fe47 	bl	800d01a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800a38c:	2011      	movs	r0, #17
 800a38e:	f002 fe60 	bl	800d052 <HAL_NVIC_EnableIRQ>

}
 800a392:	bf00      	nop
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	40023800 	.word	0x40023800

0800a3a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	@ 0x28
 800a3a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3a6:	f107 0314 	add.w	r3, r7, #20
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	605a      	str	r2, [r3, #4]
 800a3b0:	609a      	str	r2, [r3, #8]
 800a3b2:	60da      	str	r2, [r3, #12]
 800a3b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	613b      	str	r3, [r7, #16]
 800a3ba:	4b2e      	ldr	r3, [pc, #184]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a3bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3be:	4a2d      	ldr	r2, [pc, #180]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a3c0:	f043 0304 	orr.w	r3, r3, #4
 800a3c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3c6:	4b2b      	ldr	r3, [pc, #172]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ca:	f003 0304 	and.w	r3, r3, #4
 800a3ce:	613b      	str	r3, [r7, #16]
 800a3d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	4b27      	ldr	r3, [pc, #156]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3da:	4a26      	ldr	r2, [pc, #152]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a3dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3e2:	4b24      	ldr	r3, [pc, #144]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a3e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	60bb      	str	r3, [r7, #8]
 800a3f2:	4b20      	ldr	r3, [pc, #128]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a3f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f6:	4a1f      	ldr	r2, [pc, #124]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a3f8:	f043 0301 	orr.w	r3, r3, #1
 800a3fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	60bb      	str	r3, [r7, #8]
 800a408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a40a:	2300      	movs	r3, #0
 800a40c:	607b      	str	r3, [r7, #4]
 800a40e:	4b19      	ldr	r3, [pc, #100]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a412:	4a18      	ldr	r2, [pc, #96]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	6313      	str	r3, [r2, #48]	@ 0x30
 800a41a:	4b16      	ldr	r3, [pc, #88]	@ (800a474 <MX_GPIO_Init+0xd4>)
 800a41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a41e:	f003 0302 	and.w	r3, r3, #2
 800a422:	607b      	str	r3, [r7, #4]
 800a424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 800a426:	2200      	movs	r2, #0
 800a428:	f44f 7184 	mov.w	r1, #264	@ 0x108
 800a42c:	4812      	ldr	r0, [pc, #72]	@ (800a478 <MX_GPIO_Init+0xd8>)
 800a42e:	f003 fbc5 	bl	800dbbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a438:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800a43c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a442:	f107 0314 	add.w	r3, r7, #20
 800a446:	4619      	mov	r1, r3
 800a448:	480c      	ldr	r0, [pc, #48]	@ (800a47c <MX_GPIO_Init+0xdc>)
 800a44a:	f003 fa23 	bl	800d894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 800a44e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800a452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a454:	2301      	movs	r3, #1
 800a456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a45c:	2300      	movs	r3, #0
 800a45e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a460:	f107 0314 	add.w	r3, r7, #20
 800a464:	4619      	mov	r1, r3
 800a466:	4804      	ldr	r0, [pc, #16]	@ (800a478 <MX_GPIO_Init+0xd8>)
 800a468:	f003 fa14 	bl	800d894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800a46c:	bf00      	nop
 800a46e:	3728      	adds	r7, #40	@ 0x28
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	40023800 	.word	0x40023800
 800a478:	40020400 	.word	0x40020400
 800a47c:	40020000 	.word	0x40020000

0800a480 <HAL_ADCEx_InjectedConvCpltCallback>:
    if (GPIO_Pin == GPIO_PIN_5)
    {
        __HAL_TIM_SET_COUNTER(&htim2, 0);
    }
}*/
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a50      	ldr	r2, [pc, #320]	@ (800a5d0 <HAL_ADCEx_InjectedConvCpltCallback+0x150>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	f040 808d 	bne.w	800a5ae <HAL_ADCEx_InjectedConvCpltCallback+0x12e>


   	     cnt_val = __HAL_TIM_GET_COUNTER(&htim1);
 800a494:	4b4f      	ldr	r3, [pc, #316]	@ (800a5d4 <HAL_ADCEx_InjectedConvCpltCallback+0x154>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	4b4e      	ldr	r3, [pc, #312]	@ (800a5d8 <HAL_ADCEx_InjectedConvCpltCallback+0x158>)
 800a49e:	801a      	strh	r2, [r3, #0]
   	     adc_inj_val[0]= HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 fc38 	bl	800bd18 <HAL_ADCEx_InjectedGetValue>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	4b4b      	ldr	r3, [pc, #300]	@ (800a5dc <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 800a4ae:	801a      	strh	r2, [r3, #0]
         adc_value_A0 = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 fc30 	bl	800bd18 <HAL_ADCEx_InjectedGetValue>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	4a49      	ldr	r2, [pc, #292]	@ (800a5e0 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 800a4bc:	6013      	str	r3, [r2, #0]
         adc_inj_val[1]= HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2);
 800a4be:	2102      	movs	r1, #2
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 fc29 	bl	800bd18 <HAL_ADCEx_InjectedGetValue>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	4b44      	ldr	r3, [pc, #272]	@ (800a5dc <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 800a4cc:	805a      	strh	r2, [r3, #2]
         adc_value_A2 = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2);
 800a4ce:	2102      	movs	r1, #2
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 fc21 	bl	800bd18 <HAL_ADCEx_InjectedGetValue>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4a42      	ldr	r2, [pc, #264]	@ (800a5e4 <HAL_ADCEx_InjectedConvCpltCallback+0x164>)
 800a4da:	6013      	str	r3, [r2, #0]
         ia = (((adc_value_A0/4095.0)*3.3 - 1.65))/(50.0*0.01);
 800a4dc:	4b40      	ldr	r3, [pc, #256]	@ (800a5e0 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7f6 f82f 	bl	8000544 <__aeabi_ui2d>
 800a4e6:	a334      	add	r3, pc, #208	@ (adr r3, 800a5b8 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f7f6 f9ce 	bl	800088c <__aeabi_ddiv>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	a331      	add	r3, pc, #196	@ (adr r3, 800a5c0 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f6 f89b 	bl	8000638 <__aeabi_dmul>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	4610      	mov	r0, r2
 800a508:	4619      	mov	r1, r3
 800a50a:	a32f      	add	r3, pc, #188	@ (adr r3, 800a5c8 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	f7f5 feda 	bl	80002c8 <__aeabi_dsub>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4610      	mov	r0, r2
 800a51a:	4619      	mov	r1, r3
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	4b31      	ldr	r3, [pc, #196]	@ (800a5e8 <HAL_ADCEx_InjectedConvCpltCallback+0x168>)
 800a522:	f7f6 f9b3 	bl	800088c <__aeabi_ddiv>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4610      	mov	r0, r2
 800a52c:	4619      	mov	r1, r3
 800a52e:	f7f6 fb7b 	bl	8000c28 <__aeabi_d2f>
 800a532:	4603      	mov	r3, r0
 800a534:	4a2d      	ldr	r2, [pc, #180]	@ (800a5ec <HAL_ADCEx_InjectedConvCpltCallback+0x16c>)
 800a536:	6013      	str	r3, [r2, #0]
         ib = (((adc_value_A2/4095.0)*3.3 - 1.65))/(50.0*0.01);
 800a538:	4b2a      	ldr	r3, [pc, #168]	@ (800a5e4 <HAL_ADCEx_InjectedConvCpltCallback+0x164>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7f6 f801 	bl	8000544 <__aeabi_ui2d>
 800a542:	a31d      	add	r3, pc, #116	@ (adr r3, 800a5b8 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f7f6 f9a0 	bl	800088c <__aeabi_ddiv>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4610      	mov	r0, r2
 800a552:	4619      	mov	r1, r3
 800a554:	a31a      	add	r3, pc, #104	@ (adr r3, 800a5c0 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	f7f6 f86d 	bl	8000638 <__aeabi_dmul>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4610      	mov	r0, r2
 800a564:	4619      	mov	r1, r3
 800a566:	a318      	add	r3, pc, #96	@ (adr r3, 800a5c8 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f7f5 feac 	bl	80002c8 <__aeabi_dsub>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4610      	mov	r0, r2
 800a576:	4619      	mov	r1, r3
 800a578:	f04f 0200 	mov.w	r2, #0
 800a57c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e8 <HAL_ADCEx_InjectedConvCpltCallback+0x168>)
 800a57e:	f7f6 f985 	bl	800088c <__aeabi_ddiv>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4610      	mov	r0, r2
 800a588:	4619      	mov	r1, r3
 800a58a:	f7f6 fb4d 	bl	8000c28 <__aeabi_d2f>
 800a58e:	4603      	mov	r3, r0
 800a590:	4a17      	ldr	r2, [pc, #92]	@ (800a5f0 <HAL_ADCEx_InjectedConvCpltCallback+0x170>)
 800a592:	6013      	str	r3, [r2, #0]
         ic= -( ia + ib);
 800a594:	4b15      	ldr	r3, [pc, #84]	@ (800a5ec <HAL_ADCEx_InjectedConvCpltCallback+0x16c>)
 800a596:	ed93 7a00 	vldr	s14, [r3]
 800a59a:	4b15      	ldr	r3, [pc, #84]	@ (800a5f0 <HAL_ADCEx_InjectedConvCpltCallback+0x170>)
 800a59c:	edd3 7a00 	vldr	s15, [r3]
 800a5a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5a4:	eef1 7a67 	vneg.f32	s15, s15
 800a5a8:	4b12      	ldr	r3, [pc, #72]	@ (800a5f4 <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 800a5aa:	edc3 7a00 	vstr	s15, [r3]

    }
}
 800a5ae:	bf00      	nop
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	00000000 	.word	0x00000000
 800a5bc:	40affe00 	.word	0x40affe00
 800a5c0:	66666666 	.word	0x66666666
 800a5c4:	400a6666 	.word	0x400a6666
 800a5c8:	66666666 	.word	0x66666666
 800a5cc:	3ffa6666 	.word	0x3ffa6666
 800a5d0:	40012000 	.word	0x40012000
 800a5d4:	20000710 	.word	0x20000710
 800a5d8:	200005dc 	.word	0x200005dc
 800a5dc:	200005d8 	.word	0x200005d8
 800a5e0:	2000050c 	.word	0x2000050c
 800a5e4:	20000510 	.word	0x20000510
 800a5e8:	3fe00000 	.word	0x3fe00000
 800a5ec:	20000514 	.word	0x20000514
 800a5f0:	20000518 	.word	0x20000518
 800a5f4:	2000051c 	.word	0x2000051c

0800a5f8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM8) // Kiểm tra đúng Timer
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a0c      	ldr	r2, [pc, #48]	@ (800a638 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d102      	bne.n	800a610 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        flag_current_loop = 1;  // Đánh dấu cần thực hiện vòng dòng
 800a60a:	4b0c      	ldr	r3, [pc, #48]	@ (800a63c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800a60c:	2201      	movs	r2, #1
 800a60e:	701a      	strb	r2, [r3, #0]
    }

    if (htim->Instance == TIM7) // Kiểm tra đúng Timer
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a0a      	ldr	r2, [pc, #40]	@ (800a640 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d101      	bne.n	800a61e <HAL_TIM_PeriodElapsedCallback+0x26>
        {
            HAL_IncTick();
 800a61a:	f000 fd35 	bl	800b088 <HAL_IncTick>
        }

    if (htim == canopenNodeSTM32->timerHandle) {
 800a61e:	4b09      	ldr	r3, [pc, #36]	@ (800a644 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	429a      	cmp	r2, r3
 800a628:	d101      	bne.n	800a62e <HAL_TIM_PeriodElapsedCallback+0x36>
          canopen_app_interrupt();
 800a62a:	f7fd fa45 	bl	8007ab8 <canopen_app_interrupt>
      }

}
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	40010400 	.word	0x40010400
 800a63c:	200005e4 	.word	0x200005e4
 800a640:	40001400 	.word	0x40001400
 800a644:	200004bc 	.word	0x200004bc

0800a648 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) // Kiểm tra đúng UART2
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a05      	ldr	r2, [pc, #20]	@ (800a66c <HAL_UART_TxCpltCallback+0x24>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d102      	bne.n	800a660 <HAL_UART_TxCpltCallback+0x18>
    {
        uart_busy = 0;  // Đánh dấu UART đã sẵn sàng gửi tiếp
 800a65a:	4b05      	ldr	r3, [pc, #20]	@ (800a670 <HAL_UART_TxCpltCallback+0x28>)
 800a65c:	2200      	movs	r2, #0
 800a65e:	701a      	strb	r2, [r3, #0]
    }
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	40004400 	.word	0x40004400
 800a670:	200005e5 	.word	0x200005e5
 800a674:	00000000 	.word	0x00000000

0800a678 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a16      	ldr	r2, [pc, #88]	@ (800a6e0 <HAL_ADC_ConvCpltCallback+0x68>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d11b      	bne.n	800a6c2 <HAL_ADC_ConvCpltCallback+0x4a>
    {
        adc_dma_voltage = (adc_dma_value / 4095.0) * 3.3;
 800a68a:	4b16      	ldr	r3, [pc, #88]	@ (800a6e4 <HAL_ADC_ConvCpltCallback+0x6c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f5 ff58 	bl	8000544 <__aeabi_ui2d>
 800a694:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6d0 <HAL_ADC_ConvCpltCallback+0x58>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	f7f6 f8f7 	bl	800088c <__aeabi_ddiv>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a6d8 <HAL_ADC_ConvCpltCallback+0x60>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f7f5 ffc4 	bl	8000638 <__aeabi_dmul>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	f7f6 fab6 	bl	8000c28 <__aeabi_d2f>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	4a0a      	ldr	r2, [pc, #40]	@ (800a6e8 <HAL_ADC_ConvCpltCallback+0x70>)
 800a6c0:	6013      	str	r3, [r2, #0]
       // voltage = (adc_dma_value / 4095.0) * 3.3;
    }
}
 800a6c2:	bf00      	nop
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	f3af 8000 	nop.w
 800a6d0:	00000000 	.word	0x00000000
 800a6d4:	40affe00 	.word	0x40affe00
 800a6d8:	66666666 	.word	0x66666666
 800a6dc:	400a6666 	.word	0x400a6666
 800a6e0:	40012100 	.word	0x40012100
 800a6e4:	200005e8 	.word	0x200005e8
 800a6e8:	200005ec 	.word	0x200005ec

0800a6ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a6f0:	b672      	cpsid	i
}
 800a6f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a6f4:	bf00      	nop
 800a6f6:	e7fd      	b.n	800a6f4 <Error_Handler+0x8>

0800a6f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6fe:	2300      	movs	r3, #0
 800a700:	607b      	str	r3, [r7, #4]
 800a702:	4b10      	ldr	r3, [pc, #64]	@ (800a744 <HAL_MspInit+0x4c>)
 800a704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a706:	4a0f      	ldr	r2, [pc, #60]	@ (800a744 <HAL_MspInit+0x4c>)
 800a708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a70c:	6453      	str	r3, [r2, #68]	@ 0x44
 800a70e:	4b0d      	ldr	r3, [pc, #52]	@ (800a744 <HAL_MspInit+0x4c>)
 800a710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a716:	607b      	str	r3, [r7, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a71a:	2300      	movs	r3, #0
 800a71c:	603b      	str	r3, [r7, #0]
 800a71e:	4b09      	ldr	r3, [pc, #36]	@ (800a744 <HAL_MspInit+0x4c>)
 800a720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a722:	4a08      	ldr	r2, [pc, #32]	@ (800a744 <HAL_MspInit+0x4c>)
 800a724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a728:	6413      	str	r3, [r2, #64]	@ 0x40
 800a72a:	4b06      	ldr	r3, [pc, #24]	@ (800a744 <HAL_MspInit+0x4c>)
 800a72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a72e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800a736:	2007      	movs	r0, #7
 800a738:	f002 fc64 	bl	800d004 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	40023800 	.word	0x40023800

0800a748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08c      	sub	sp, #48	@ 0x30
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a750:	f107 031c 	add.w	r3, r7, #28
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	605a      	str	r2, [r3, #4]
 800a75a:	609a      	str	r2, [r3, #8]
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a36      	ldr	r2, [pc, #216]	@ (800a840 <HAL_ADC_MspInit+0xf8>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d130      	bne.n	800a7cc <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a76a:	2300      	movs	r3, #0
 800a76c:	61bb      	str	r3, [r7, #24]
 800a76e:	4b35      	ldr	r3, [pc, #212]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a772:	4a34      	ldr	r2, [pc, #208]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a778:	6453      	str	r3, [r2, #68]	@ 0x44
 800a77a:	4b32      	ldr	r3, [pc, #200]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a77e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	4b2e      	ldr	r3, [pc, #184]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a78c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a78e:	4a2d      	ldr	r2, [pc, #180]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a790:	f043 0301 	orr.w	r3, r3, #1
 800a794:	6313      	str	r3, [r2, #48]	@ 0x30
 800a796:	4b2b      	ldr	r3, [pc, #172]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	617b      	str	r3, [r7, #20]
 800a7a0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800a7a2:	2311      	movs	r3, #17
 800a7a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7ae:	f107 031c 	add.w	r3, r7, #28
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4824      	ldr	r0, [pc, #144]	@ (800a848 <HAL_ADC_MspInit+0x100>)
 800a7b6:	f003 f86d 	bl	800d894 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2100      	movs	r1, #0
 800a7be:	2012      	movs	r0, #18
 800a7c0:	f002 fc2b 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a7c4:	2012      	movs	r0, #18
 800a7c6:	f002 fc44 	bl	800d052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800a7ca:	e034      	b.n	800a836 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a1e      	ldr	r2, [pc, #120]	@ (800a84c <HAL_ADC_MspInit+0x104>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d12f      	bne.n	800a836 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	613b      	str	r3, [r7, #16]
 800a7da:	4b1a      	ldr	r3, [pc, #104]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a7dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7de:	4a19      	ldr	r2, [pc, #100]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a7e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a7e4:	6453      	str	r3, [r2, #68]	@ 0x44
 800a7e6:	4b17      	ldr	r3, [pc, #92]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7ee:	613b      	str	r3, [r7, #16]
 800a7f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	4b13      	ldr	r3, [pc, #76]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7fa:	4a12      	ldr	r2, [pc, #72]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a7fc:	f043 0301 	orr.w	r3, r3, #1
 800a800:	6313      	str	r3, [r2, #48]	@ 0x30
 800a802:	4b10      	ldr	r3, [pc, #64]	@ (800a844 <HAL_ADC_MspInit+0xfc>)
 800a804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a80e:	2302      	movs	r3, #2
 800a810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a812:	2303      	movs	r3, #3
 800a814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a816:	2300      	movs	r3, #0
 800a818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a81a:	f107 031c 	add.w	r3, r7, #28
 800a81e:	4619      	mov	r1, r3
 800a820:	4809      	ldr	r0, [pc, #36]	@ (800a848 <HAL_ADC_MspInit+0x100>)
 800a822:	f003 f837 	bl	800d894 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800a826:	2200      	movs	r2, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	2012      	movs	r0, #18
 800a82c:	f002 fbf5 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a830:	2012      	movs	r0, #18
 800a832:	f002 fc0e 	bl	800d052 <HAL_NVIC_EnableIRQ>
}
 800a836:	bf00      	nop
 800a838:	3730      	adds	r7, #48	@ 0x30
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	40012000 	.word	0x40012000
 800a844:	40023800 	.word	0x40023800
 800a848:	40020000 	.word	0x40020000
 800a84c:	40012100 	.word	0x40012100

0800a850 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b08a      	sub	sp, #40	@ 0x28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	605a      	str	r2, [r3, #4]
 800a862:	609a      	str	r2, [r3, #8]
 800a864:	60da      	str	r2, [r3, #12]
 800a866:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a25      	ldr	r2, [pc, #148]	@ (800a904 <HAL_CAN_MspInit+0xb4>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d144      	bne.n	800a8fc <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a872:	2300      	movs	r3, #0
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	4b24      	ldr	r3, [pc, #144]	@ (800a908 <HAL_CAN_MspInit+0xb8>)
 800a878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87a:	4a23      	ldr	r2, [pc, #140]	@ (800a908 <HAL_CAN_MspInit+0xb8>)
 800a87c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a880:	6413      	str	r3, [r2, #64]	@ 0x40
 800a882:	4b21      	ldr	r3, [pc, #132]	@ (800a908 <HAL_CAN_MspInit+0xb8>)
 800a884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a88a:	613b      	str	r3, [r7, #16]
 800a88c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
 800a892:	4b1d      	ldr	r3, [pc, #116]	@ (800a908 <HAL_CAN_MspInit+0xb8>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a896:	4a1c      	ldr	r2, [pc, #112]	@ (800a908 <HAL_CAN_MspInit+0xb8>)
 800a898:	f043 0301 	orr.w	r3, r3, #1
 800a89c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a89e:	4b1a      	ldr	r3, [pc, #104]	@ (800a908 <HAL_CAN_MspInit+0xb8>)
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a8aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a8ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800a8bc:	2309      	movs	r3, #9
 800a8be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8c0:	f107 0314 	add.w	r3, r7, #20
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4811      	ldr	r0, [pc, #68]	@ (800a90c <HAL_CAN_MspInit+0xbc>)
 800a8c8:	f002 ffe4 	bl	800d894 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	2013      	movs	r0, #19
 800a8d2:	f002 fba2 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800a8d6:	2013      	movs	r0, #19
 800a8d8:	f002 fbbb 	bl	800d052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2100      	movs	r1, #0
 800a8e0:	2014      	movs	r0, #20
 800a8e2:	f002 fb9a 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800a8e6:	2014      	movs	r0, #20
 800a8e8:	f002 fbb3 	bl	800d052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	2015      	movs	r0, #21
 800a8f2:	f002 fb92 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800a8f6:	2015      	movs	r0, #21
 800a8f8:	f002 fbab 	bl	800d052 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800a8fc:	bf00      	nop
 800a8fe:	3728      	adds	r7, #40	@ 0x28
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	40006400 	.word	0x40006400
 800a908:	40023800 	.word	0x40023800
 800a90c:	40020000 	.word	0x40020000

0800a910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08a      	sub	sp, #40	@ 0x28
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	2200      	movs	r2, #0
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	605a      	str	r2, [r3, #4]
 800a922:	609a      	str	r2, [r3, #8]
 800a924:	60da      	str	r2, [r3, #12]
 800a926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a4 <HAL_SPI_MspInit+0x94>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d133      	bne.n	800a99a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a932:	2300      	movs	r3, #0
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	4b1c      	ldr	r3, [pc, #112]	@ (800a9a8 <HAL_SPI_MspInit+0x98>)
 800a938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a93a:	4a1b      	ldr	r2, [pc, #108]	@ (800a9a8 <HAL_SPI_MspInit+0x98>)
 800a93c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a940:	6453      	str	r3, [r2, #68]	@ 0x44
 800a942:	4b19      	ldr	r3, [pc, #100]	@ (800a9a8 <HAL_SPI_MspInit+0x98>)
 800a944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a94a:	613b      	str	r3, [r7, #16]
 800a94c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a94e:	2300      	movs	r3, #0
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	4b15      	ldr	r3, [pc, #84]	@ (800a9a8 <HAL_SPI_MspInit+0x98>)
 800a954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a956:	4a14      	ldr	r2, [pc, #80]	@ (800a9a8 <HAL_SPI_MspInit+0x98>)
 800a958:	f043 0301 	orr.w	r3, r3, #1
 800a95c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a95e:	4b12      	ldr	r3, [pc, #72]	@ (800a9a8 <HAL_SPI_MspInit+0x98>)
 800a960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800a96a:	23e0      	movs	r3, #224	@ 0xe0
 800a96c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a96e:	2302      	movs	r3, #2
 800a970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a972:	2300      	movs	r3, #0
 800a974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a976:	2303      	movs	r3, #3
 800a978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a97a:	2305      	movs	r3, #5
 800a97c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a97e:	f107 0314 	add.w	r3, r7, #20
 800a982:	4619      	mov	r1, r3
 800a984:	4809      	ldr	r0, [pc, #36]	@ (800a9ac <HAL_SPI_MspInit+0x9c>)
 800a986:	f002 ff85 	bl	800d894 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800a98a:	2200      	movs	r2, #0
 800a98c:	2100      	movs	r1, #0
 800a98e:	2023      	movs	r0, #35	@ 0x23
 800a990:	f002 fb43 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800a994:	2023      	movs	r0, #35	@ 0x23
 800a996:	f002 fb5c 	bl	800d052 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800a99a:	bf00      	nop
 800a99c:	3728      	adds	r7, #40	@ 0x28
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	40013000 	.word	0x40013000
 800a9a8:	40023800 	.word	0x40023800
 800a9ac:	40020000 	.word	0x40020000

0800a9b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b088      	sub	sp, #32
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a3e      	ldr	r2, [pc, #248]	@ (800aab8 <HAL_TIM_Base_MspInit+0x108>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d10e      	bne.n	800a9e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	61fb      	str	r3, [r7, #28]
 800a9c6:	4b3d      	ldr	r3, [pc, #244]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800a9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ca:	4a3c      	ldr	r2, [pc, #240]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800a9cc:	f043 0301 	orr.w	r3, r3, #1
 800a9d0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9d2:	4b3a      	ldr	r3, [pc, #232]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800a9d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	61fb      	str	r3, [r7, #28]
 800a9dc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a9de:	e066      	b.n	800aaae <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM2)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e8:	d10e      	bne.n	800aa08 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	61bb      	str	r3, [r7, #24]
 800a9ee:	4b33      	ldr	r3, [pc, #204]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f2:	4a32      	ldr	r2, [pc, #200]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800a9f4:	f043 0301 	orr.w	r3, r3, #1
 800a9f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a9fa:	4b30      	ldr	r3, [pc, #192]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	61bb      	str	r3, [r7, #24]
 800aa04:	69bb      	ldr	r3, [r7, #24]
}
 800aa06:	e052      	b.n	800aaae <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a2c      	ldr	r2, [pc, #176]	@ (800aac0 <HAL_TIM_Base_MspInit+0x110>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d10e      	bne.n	800aa30 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800aa12:	2300      	movs	r3, #0
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	4b29      	ldr	r3, [pc, #164]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1a:	4a28      	ldr	r2, [pc, #160]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa1c:	f043 0302 	orr.w	r3, r3, #2
 800aa20:	6413      	str	r3, [r2, #64]	@ 0x40
 800aa22:	4b26      	ldr	r3, [pc, #152]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	617b      	str	r3, [r7, #20]
 800aa2c:	697b      	ldr	r3, [r7, #20]
}
 800aa2e:	e03e      	b.n	800aaae <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a23      	ldr	r2, [pc, #140]	@ (800aac4 <HAL_TIM_Base_MspInit+0x114>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d116      	bne.n	800aa68 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	613b      	str	r3, [r7, #16]
 800aa3e:	4b1f      	ldr	r3, [pc, #124]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa42:	4a1e      	ldr	r2, [pc, #120]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa44:	f043 0320 	orr.w	r3, r3, #32
 800aa48:	6413      	str	r3, [r2, #64]	@ 0x40
 800aa4a:	4b1c      	ldr	r3, [pc, #112]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	613b      	str	r3, [r7, #16]
 800aa54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800aa56:	2200      	movs	r2, #0
 800aa58:	2100      	movs	r1, #0
 800aa5a:	2037      	movs	r0, #55	@ 0x37
 800aa5c:	f002 fadd 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800aa60:	2037      	movs	r0, #55	@ 0x37
 800aa62:	f002 faf6 	bl	800d052 <HAL_NVIC_EnableIRQ>
}
 800aa66:	e022      	b.n	800aaae <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM8)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a16      	ldr	r2, [pc, #88]	@ (800aac8 <HAL_TIM_Base_MspInit+0x118>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d11d      	bne.n	800aaae <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	4b11      	ldr	r3, [pc, #68]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa7a:	4a10      	ldr	r2, [pc, #64]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa7c:	f043 0302 	orr.w	r3, r3, #2
 800aa80:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa82:	4b0e      	ldr	r3, [pc, #56]	@ (800aabc <HAL_TIM_Base_MspInit+0x10c>)
 800aa84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2100      	movs	r1, #0
 800aa92:	202c      	movs	r0, #44	@ 0x2c
 800aa94:	f002 fac1 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800aa98:	202c      	movs	r0, #44	@ 0x2c
 800aa9a:	f002 fada 	bl	800d052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	202d      	movs	r0, #45	@ 0x2d
 800aaa4:	f002 fab9 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800aaa8:	202d      	movs	r0, #45	@ 0x2d
 800aaaa:	f002 fad2 	bl	800d052 <HAL_NVIC_EnableIRQ>
}
 800aaae:	bf00      	nop
 800aab0:	3720      	adds	r7, #32
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40023800 	.word	0x40023800
 800aac0:	40000400 	.word	0x40000400
 800aac4:	40001400 	.word	0x40001400
 800aac8:	40010400 	.word	0x40010400

0800aacc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b088      	sub	sp, #32
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aad4:	f107 030c 	add.w	r3, r7, #12
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	605a      	str	r2, [r3, #4]
 800aade:	609a      	str	r2, [r3, #8]
 800aae0:	60da      	str	r2, [r3, #12]
 800aae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a12      	ldr	r2, [pc, #72]	@ (800ab34 <HAL_TIM_MspPostInit+0x68>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d11e      	bne.n	800ab2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60bb      	str	r3, [r7, #8]
 800aaf2:	4b11      	ldr	r3, [pc, #68]	@ (800ab38 <HAL_TIM_MspPostInit+0x6c>)
 800aaf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaf6:	4a10      	ldr	r2, [pc, #64]	@ (800ab38 <HAL_TIM_MspPostInit+0x6c>)
 800aaf8:	f043 0301 	orr.w	r3, r3, #1
 800aafc:	6313      	str	r3, [r2, #48]	@ 0x30
 800aafe:	4b0e      	ldr	r3, [pc, #56]	@ (800ab38 <HAL_TIM_MspPostInit+0x6c>)
 800ab00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	60bb      	str	r3, [r7, #8]
 800ab08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800ab0a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800ab0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab10:	2302      	movs	r3, #2
 800ab12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab14:	2300      	movs	r3, #0
 800ab16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab20:	f107 030c 	add.w	r3, r7, #12
 800ab24:	4619      	mov	r1, r3
 800ab26:	4805      	ldr	r0, [pc, #20]	@ (800ab3c <HAL_TIM_MspPostInit+0x70>)
 800ab28:	f002 feb4 	bl	800d894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800ab2c:	bf00      	nop
 800ab2e:	3720      	adds	r7, #32
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	40010000 	.word	0x40010000
 800ab38:	40023800 	.word	0x40023800
 800ab3c:	40020000 	.word	0x40020000

0800ab40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08c      	sub	sp, #48	@ 0x30
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab48:	f107 031c 	add.w	r3, r7, #28
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	605a      	str	r2, [r3, #4]
 800ab52:	609a      	str	r2, [r3, #8]
 800ab54:	60da      	str	r2, [r3, #12]
 800ab56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a4d      	ldr	r2, [pc, #308]	@ (800ac94 <HAL_UART_MspInit+0x154>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d12d      	bne.n	800abbe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ab62:	2300      	movs	r3, #0
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	4b4c      	ldr	r3, [pc, #304]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800ab68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6a:	4a4b      	ldr	r2, [pc, #300]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800ab6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab70:	6413      	str	r3, [r2, #64]	@ 0x40
 800ab72:	4b49      	ldr	r3, [pc, #292]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800ab74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ab7a:	61bb      	str	r3, [r7, #24]
 800ab7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab7e:	2300      	movs	r3, #0
 800ab80:	617b      	str	r3, [r7, #20]
 800ab82:	4b45      	ldr	r3, [pc, #276]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800ab84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab86:	4a44      	ldr	r2, [pc, #272]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800ab88:	f043 0304 	orr.w	r3, r3, #4
 800ab8c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab8e:	4b42      	ldr	r3, [pc, #264]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800ab90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab92:	f003 0304 	and.w	r3, r3, #4
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ab9a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ab9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aba0:	2302      	movs	r3, #2
 800aba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba4:	2300      	movs	r3, #0
 800aba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aba8:	2303      	movs	r3, #3
 800abaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800abac:	2308      	movs	r3, #8
 800abae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abb0:	f107 031c 	add.w	r3, r7, #28
 800abb4:	4619      	mov	r1, r3
 800abb6:	4839      	ldr	r0, [pc, #228]	@ (800ac9c <HAL_UART_MspInit+0x15c>)
 800abb8:	f002 fe6c 	bl	800d894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800abbc:	e066      	b.n	800ac8c <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a37      	ldr	r2, [pc, #220]	@ (800aca0 <HAL_UART_MspInit+0x160>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d161      	bne.n	800ac8c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800abc8:	2300      	movs	r3, #0
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	4b32      	ldr	r3, [pc, #200]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800abce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd0:	4a31      	ldr	r2, [pc, #196]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800abd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abd6:	6413      	str	r3, [r2, #64]	@ 0x40
 800abd8:	4b2f      	ldr	r3, [pc, #188]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800abda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abe0:	613b      	str	r3, [r7, #16]
 800abe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	4b2b      	ldr	r3, [pc, #172]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800abea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abec:	4a2a      	ldr	r2, [pc, #168]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800abee:	f043 0301 	orr.w	r3, r3, #1
 800abf2:	6313      	str	r3, [r2, #48]	@ 0x30
 800abf4:	4b28      	ldr	r3, [pc, #160]	@ (800ac98 <HAL_UART_MspInit+0x158>)
 800abf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	60fb      	str	r3, [r7, #12]
 800abfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ac00:	230c      	movs	r3, #12
 800ac02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac04:	2302      	movs	r3, #2
 800ac06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ac10:	2307      	movs	r3, #7
 800ac12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac14:	f107 031c 	add.w	r3, r7, #28
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4822      	ldr	r0, [pc, #136]	@ (800aca4 <HAL_UART_MspInit+0x164>)
 800ac1c:	f002 fe3a 	bl	800d894 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800ac20:	4b21      	ldr	r3, [pc, #132]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac22:	4a22      	ldr	r2, [pc, #136]	@ (800acac <HAL_UART_MspInit+0x16c>)
 800ac24:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800ac26:	4b20      	ldr	r3, [pc, #128]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ac2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac30:	2240      	movs	r2, #64	@ 0x40
 800ac32:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac34:	4b1c      	ldr	r3, [pc, #112]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ac3a:	4b1b      	ldr	r3, [pc, #108]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ac40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac42:	4b19      	ldr	r3, [pc, #100]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac48:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ac4e:	4b16      	ldr	r3, [pc, #88]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ac54:	4b14      	ldr	r3, [pc, #80]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ac5a:	4b13      	ldr	r3, [pc, #76]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ac60:	4811      	ldr	r0, [pc, #68]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac62:	f002 fa15 	bl	800d090 <HAL_DMA_Init>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800ac6c:	f7ff fd3e 	bl	800a6ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a0d      	ldr	r2, [pc, #52]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac74:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac76:	4a0c      	ldr	r2, [pc, #48]	@ (800aca8 <HAL_UART_MspInit+0x168>)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2100      	movs	r1, #0
 800ac80:	2026      	movs	r0, #38	@ 0x26
 800ac82:	f002 f9ca 	bl	800d01a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ac86:	2026      	movs	r0, #38	@ 0x26
 800ac88:	f002 f9e3 	bl	800d052 <HAL_NVIC_EnableIRQ>
}
 800ac8c:	bf00      	nop
 800ac8e:	3730      	adds	r7, #48	@ 0x30
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	40004c00 	.word	0x40004c00
 800ac98:	40023800 	.word	0x40023800
 800ac9c:	40020800 	.word	0x40020800
 800aca0:	40004400 	.word	0x40004400
 800aca4:	40020000 	.word	0x40020000
 800aca8:	20000908 	.word	0x20000908
 800acac:	400260a0 	.word	0x400260a0

0800acb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800acb4:	bf00      	nop
 800acb6:	e7fd      	b.n	800acb4 <NMI_Handler+0x4>

0800acb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <HardFault_Handler+0x4>

0800acc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800acc4:	bf00      	nop
 800acc6:	e7fd      	b.n	800acc4 <MemManage_Handler+0x4>

0800acc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800acc8:	b480      	push	{r7}
 800acca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800accc:	bf00      	nop
 800acce:	e7fd      	b.n	800accc <BusFault_Handler+0x4>

0800acd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800acd0:	b480      	push	{r7}
 800acd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800acd4:	bf00      	nop
 800acd6:	e7fd      	b.n	800acd4 <UsageFault_Handler+0x4>

0800acd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800acd8:	b480      	push	{r7}
 800acda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800acdc:	bf00      	nop
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ace6:	b480      	push	{r7}
 800ace8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800acea:	bf00      	nop
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800acf4:	b480      	push	{r7}
 800acf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800acf8:	bf00      	nop
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ad06:	f000 f9bf 	bl	800b088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ad0a:	bf00      	nop
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800ad14:	4802      	ldr	r0, [pc, #8]	@ (800ad20 <DMA1_Stream6_IRQHandler+0x10>)
 800ad16:	f002 fb53 	bl	800d3c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800ad1a:	bf00      	nop
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000908 	.word	0x20000908

0800ad24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ad28:	4803      	ldr	r0, [pc, #12]	@ (800ad38 <ADC_IRQHandler+0x14>)
 800ad2a:	f000 fa34 	bl	800b196 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800ad2e:	4803      	ldr	r0, [pc, #12]	@ (800ad3c <ADC_IRQHandler+0x18>)
 800ad30:	f000 fa31 	bl	800b196 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800ad34:	bf00      	nop
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20000600 	.word	0x20000600
 800ad3c:	20000648 	.word	0x20000648

0800ad40 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800ad44:	4802      	ldr	r0, [pc, #8]	@ (800ad50 <CAN1_TX_IRQHandler+0x10>)
 800ad46:	f001 fe6f 	bl	800ca28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800ad4a:	bf00      	nop
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000690 	.word	0x20000690

0800ad54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800ad58:	4802      	ldr	r0, [pc, #8]	@ (800ad64 <CAN1_RX0_IRQHandler+0x10>)
 800ad5a:	f001 fe65 	bl	800ca28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800ad5e:	bf00      	nop
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20000690 	.word	0x20000690

0800ad68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800ad6c:	4802      	ldr	r0, [pc, #8]	@ (800ad78 <CAN1_RX1_IRQHandler+0x10>)
 800ad6e:	f001 fe5b 	bl	800ca28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800ad72:	bf00      	nop
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	20000690 	.word	0x20000690

0800ad7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800ad80:	4802      	ldr	r0, [pc, #8]	@ (800ad8c <SPI1_IRQHandler+0x10>)
 800ad82:	f004 f8e3 	bl	800ef4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800ad86:	bf00      	nop
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	200006b8 	.word	0x200006b8

0800ad90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ad94:	4802      	ldr	r0, [pc, #8]	@ (800ada0 <USART2_IRQHandler+0x10>)
 800ad96:	f005 fc9f 	bl	80106d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ad9a:	bf00      	nop
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	200008c0 	.word	0x200008c0

0800ada4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ada8:	4802      	ldr	r0, [pc, #8]	@ (800adb4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800adaa:	f004 fd35 	bl	800f818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800adae:	bf00      	nop
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000830 	.word	0x20000830

0800adb8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800adbc:	4802      	ldr	r0, [pc, #8]	@ (800adc8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800adbe:	f004 fd2b 	bl	800f818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800adc2:	bf00      	nop
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20000830 	.word	0x20000830

0800adcc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800add0:	4802      	ldr	r0, [pc, #8]	@ (800addc <TIM7_IRQHandler+0x10>)
 800add2:	f004 fd21 	bl	800f818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800add6:	bf00      	nop
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	200007e8 	.word	0x200007e8

0800ade0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0
  return 1;
 800ade4:	2301      	movs	r3, #1
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <_kill>:

int _kill(int pid, int sig)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800adfa:	f007 fc9f 	bl	801273c <__errno>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2216      	movs	r2, #22
 800ae02:	601a      	str	r2, [r3, #0]
  return -1;
 800ae04:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <_exit>:

void _exit (int status)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ae18:	f04f 31ff 	mov.w	r1, #4294967295
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7ff ffe7 	bl	800adf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ae22:	bf00      	nop
 800ae24:	e7fd      	b.n	800ae22 <_exit+0x12>

0800ae26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b086      	sub	sp, #24
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
 800ae36:	e00a      	b.n	800ae4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ae38:	f3af 8000 	nop.w
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	60ba      	str	r2, [r7, #8]
 800ae44:	b2ca      	uxtb	r2, r1
 800ae46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	dbf0      	blt.n	800ae38 <_read+0x12>
  }

  return len;
 800ae56:	687b      	ldr	r3, [r7, #4]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	e009      	b.n	800ae86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	60ba      	str	r2, [r7, #8]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	3301      	adds	r3, #1
 800ae84:	617b      	str	r3, [r7, #20]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	dbf1      	blt.n	800ae72 <_write+0x12>
  }
  return len;
 800ae8e:	687b      	ldr	r3, [r7, #4]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <_close>:

int _close(int file)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800aec0:	605a      	str	r2, [r3, #4]
  return 0;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <_isatty>:

int _isatty(int file)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800aed8:	2301      	movs	r3, #1
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b085      	sub	sp, #20
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	60f8      	str	r0, [r7, #12]
 800aeee:	60b9      	str	r1, [r7, #8]
 800aef0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800af08:	4a14      	ldr	r2, [pc, #80]	@ (800af5c <_sbrk+0x5c>)
 800af0a:	4b15      	ldr	r3, [pc, #84]	@ (800af60 <_sbrk+0x60>)
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800af14:	4b13      	ldr	r3, [pc, #76]	@ (800af64 <_sbrk+0x64>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800af1c:	4b11      	ldr	r3, [pc, #68]	@ (800af64 <_sbrk+0x64>)
 800af1e:	4a12      	ldr	r2, [pc, #72]	@ (800af68 <_sbrk+0x68>)
 800af20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800af22:	4b10      	ldr	r3, [pc, #64]	@ (800af64 <_sbrk+0x64>)
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4413      	add	r3, r2
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d207      	bcs.n	800af40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800af30:	f007 fc04 	bl	801273c <__errno>
 800af34:	4603      	mov	r3, r0
 800af36:	220c      	movs	r2, #12
 800af38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800af3a:	f04f 33ff 	mov.w	r3, #4294967295
 800af3e:	e009      	b.n	800af54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800af40:	4b08      	ldr	r3, [pc, #32]	@ (800af64 <_sbrk+0x64>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800af46:	4b07      	ldr	r3, [pc, #28]	@ (800af64 <_sbrk+0x64>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4413      	add	r3, r2
 800af4e:	4a05      	ldr	r2, [pc, #20]	@ (800af64 <_sbrk+0x64>)
 800af50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800af52:	68fb      	ldr	r3, [r7, #12]
}
 800af54:	4618      	mov	r0, r3
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20020000 	.word	0x20020000
 800af60:	00000400 	.word	0x00000400
 800af64:	20000990 	.word	0x20000990
 800af68:	20000ae8 	.word	0x20000ae8

0800af6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800af6c:	b480      	push	{r7}
 800af6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800af70:	4b06      	ldr	r3, [pc, #24]	@ (800af8c <SystemInit+0x20>)
 800af72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af76:	4a05      	ldr	r2, [pc, #20]	@ (800af8c <SystemInit+0x20>)
 800af78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800af7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800af80:	bf00      	nop
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	e000ed00 	.word	0xe000ed00

0800af90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 	  ldr   sp, =_estack      /* set stack pointer */
 800af90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800afc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800af94:	f7ff ffea 	bl	800af6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800af98:	480c      	ldr	r0, [pc, #48]	@ (800afcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800af9a:	490d      	ldr	r1, [pc, #52]	@ (800afd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800af9c:	4a0d      	ldr	r2, [pc, #52]	@ (800afd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800af9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800afa0:	e002      	b.n	800afa8 <LoopCopyDataInit>

0800afa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800afa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800afa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800afa6:	3304      	adds	r3, #4

0800afa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800afa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800afaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800afac:	d3f9      	bcc.n	800afa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800afae:	4a0a      	ldr	r2, [pc, #40]	@ (800afd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800afb0:	4c0a      	ldr	r4, [pc, #40]	@ (800afdc <LoopFillZerobss+0x22>)
  movs r3, #0
 800afb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800afb4:	e001      	b.n	800afba <LoopFillZerobss>

0800afb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800afb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800afb8:	3204      	adds	r2, #4

0800afba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800afba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800afbc:	d3fb      	bcc.n	800afb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800afbe:	f007 fbc3 	bl	8012748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800afc2:	f7fe fce3 	bl	800998c <main>
  bx  lr    
 800afc6:	4770      	bx	lr
 	  ldr   sp, =_estack      /* set stack pointer */
 800afc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800afcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800afd0:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 800afd4:	080162a0 	.word	0x080162a0
  ldr r2, =_sbss
 800afd8:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 800afdc:	20000ae4 	.word	0x20000ae4

0800afe0 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800afe0:	e7fe      	b.n	800afe0 <CAN1_SCE_IRQHandler>
	...

0800afe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800afe8:	4b0e      	ldr	r3, [pc, #56]	@ (800b024 <HAL_Init+0x40>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a0d      	ldr	r2, [pc, #52]	@ (800b024 <HAL_Init+0x40>)
 800afee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800aff4:	4b0b      	ldr	r3, [pc, #44]	@ (800b024 <HAL_Init+0x40>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a0a      	ldr	r2, [pc, #40]	@ (800b024 <HAL_Init+0x40>)
 800affa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800affe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b000:	4b08      	ldr	r3, [pc, #32]	@ (800b024 <HAL_Init+0x40>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a07      	ldr	r2, [pc, #28]	@ (800b024 <HAL_Init+0x40>)
 800b006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b00a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b00c:	2003      	movs	r0, #3
 800b00e:	f001 fff9 	bl	800d004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b012:	2000      	movs	r0, #0
 800b014:	f000 f808 	bl	800b028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b018:	f7ff fb6e 	bl	800a6f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	40023c00 	.word	0x40023c00

0800b028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b030:	4b12      	ldr	r3, [pc, #72]	@ (800b07c <HAL_InitTick+0x54>)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4b12      	ldr	r3, [pc, #72]	@ (800b080 <HAL_InitTick+0x58>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	4619      	mov	r1, r3
 800b03a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b03e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b042:	fbb2 f3f3 	udiv	r3, r2, r3
 800b046:	4618      	mov	r0, r3
 800b048:	f002 f815 	bl	800d076 <HAL_SYSTICK_Config>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e00e      	b.n	800b074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b0f      	cmp	r3, #15
 800b05a:	d80a      	bhi.n	800b072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b05c:	2200      	movs	r2, #0
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	f04f 30ff 	mov.w	r0, #4294967295
 800b064:	f001 ffd9 	bl	800d01a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b068:	4a06      	ldr	r2, [pc, #24]	@ (800b084 <HAL_InitTick+0x5c>)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	e000      	b.n	800b074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b072:	2301      	movs	r3, #1
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	200002b8 	.word	0x200002b8
 800b080:	200002c0 	.word	0x200002c0
 800b084:	200002bc 	.word	0x200002bc

0800b088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b08c:	4b06      	ldr	r3, [pc, #24]	@ (800b0a8 <HAL_IncTick+0x20>)
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	461a      	mov	r2, r3
 800b092:	4b06      	ldr	r3, [pc, #24]	@ (800b0ac <HAL_IncTick+0x24>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4413      	add	r3, r2
 800b098:	4a04      	ldr	r2, [pc, #16]	@ (800b0ac <HAL_IncTick+0x24>)
 800b09a:	6013      	str	r3, [r2, #0]
}
 800b09c:	bf00      	nop
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	200002c0 	.word	0x200002c0
 800b0ac:	20000994 	.word	0x20000994

0800b0b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	af00      	add	r7, sp, #0
  return uwTick;
 800b0b4:	4b03      	ldr	r3, [pc, #12]	@ (800b0c4 <HAL_GetTick+0x14>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	20000994 	.word	0x20000994

0800b0c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b0d0:	f7ff ffee 	bl	800b0b0 <HAL_GetTick>
 800b0d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e0:	d005      	beq.n	800b0ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b10c <HAL_Delay+0x44>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b0ee:	bf00      	nop
 800b0f0:	f7ff ffde 	bl	800b0b0 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d8f7      	bhi.n	800b0f0 <HAL_Delay+0x28>
  {
  }
}
 800b100:	bf00      	nop
 800b102:	bf00      	nop
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	200002c0 	.word	0x200002c0

0800b110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e033      	b.n	800b18e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d109      	bne.n	800b142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f7ff fb0a 	bl	800a748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b146:	f003 0310 	and.w	r3, r3, #16
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d118      	bne.n	800b180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b152:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b156:	f023 0302 	bic.w	r3, r3, #2
 800b15a:	f043 0202 	orr.w	r2, r3, #2
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fb88 	bl	800b878 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b172:	f023 0303 	bic.w	r3, r3, #3
 800b176:	f043 0201 	orr.w	r2, r3, #1
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	641a      	str	r2, [r3, #64]	@ 0x40
 800b17e:	e001      	b.n	800b184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b086      	sub	sp, #24
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	617b      	str	r3, [r7, #20]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f003 0320 	and.w	r3, r3, #32
 800b1c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d049      	beq.n	800b260 <HAL_ADC_IRQHandler+0xca>
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d046      	beq.n	800b260 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d6:	f003 0310 	and.w	r3, r3, #16
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d105      	bne.n	800b1ea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d12b      	bne.n	800b250 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d127      	bne.n	800b250 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b206:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d006      	beq.n	800b21c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d119      	bne.n	800b250 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f022 0220 	bic.w	r2, r2, #32
 800b22a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b23c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d105      	bne.n	800b250 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b248:	f043 0201 	orr.w	r2, r3, #1
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff fa11 	bl	800a678 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f06f 0212 	mvn.w	r2, #18
 800b25e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b26e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d057      	beq.n	800b326 <HAL_ADC_IRQHandler+0x190>
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d054      	beq.n	800b326 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b280:	f003 0310 	and.w	r3, r3, #16
 800b284:	2b00      	cmp	r3, #0
 800b286:	d105      	bne.n	800b294 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b28c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d139      	bne.n	800b316 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d006      	beq.n	800b2be <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d12b      	bne.n	800b316 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d124      	bne.n	800b316 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d11d      	bne.n	800b316 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d119      	bne.n	800b316 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b2f0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b306:	2b00      	cmp	r3, #0
 800b308:	d105      	bne.n	800b316 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b30e:	f043 0201 	orr.w	r2, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff f8b2 	bl	800a480 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f06f 020c 	mvn.w	r2, #12
 800b324:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b334:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d017      	beq.n	800b36c <HAL_ADC_IRQHandler+0x1d6>
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d014      	beq.n	800b36c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0301 	and.w	r3, r3, #1
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10d      	bne.n	800b36c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b354:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f945 	bl	800b5ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f06f 0201 	mvn.w	r2, #1
 800b36a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f003 0320 	and.w	r3, r3, #32
 800b372:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b37a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d015      	beq.n	800b3ae <HAL_ADC_IRQHandler+0x218>
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d012      	beq.n	800b3ae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b38c:	f043 0202 	orr.w	r2, r3, #2
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f06f 0220 	mvn.w	r2, #32
 800b39c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f92e 	bl	800b600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f06f 0220 	mvn.w	r2, #32
 800b3ac:	601a      	str	r2, [r3, #0]
  }
}
 800b3ae:	bf00      	nop
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d101      	bne.n	800b3d6 <HAL_ADC_Start_DMA+0x1e>
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e0e9      	b.n	800b5aa <HAL_ADC_Start_DMA+0x1f2>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d018      	beq.n	800b41e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	689a      	ldr	r2, [r3, #8]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0201 	orr.w	r2, r2, #1
 800b3fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b3fc:	4b6d      	ldr	r3, [pc, #436]	@ (800b5b4 <HAL_ADC_Start_DMA+0x1fc>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a6d      	ldr	r2, [pc, #436]	@ (800b5b8 <HAL_ADC_Start_DMA+0x200>)
 800b402:	fba2 2303 	umull	r2, r3, r2, r3
 800b406:	0c9a      	lsrs	r2, r3, #18
 800b408:	4613      	mov	r3, r2
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	4413      	add	r3, r2
 800b40e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800b410:	e002      	b.n	800b418 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	3b01      	subs	r3, #1
 800b416:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1f9      	bne.n	800b412 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b42c:	d107      	bne.n	800b43e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b43c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b01      	cmp	r3, #1
 800b44a:	f040 80a1 	bne.w	800b590 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b452:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800b456:	f023 0301 	bic.w	r3, r3, #1
 800b45a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d007      	beq.n	800b480 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b474:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b478:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b48c:	d106      	bne.n	800b49c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b492:	f023 0206 	bic.w	r2, r3, #6
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	645a      	str	r2, [r3, #68]	@ 0x44
 800b49a:	e002      	b.n	800b4a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b4aa:	4b44      	ldr	r3, [pc, #272]	@ (800b5bc <HAL_ADC_Start_DMA+0x204>)
 800b4ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b2:	4a43      	ldr	r2, [pc, #268]	@ (800b5c0 <HAL_ADC_Start_DMA+0x208>)
 800b4b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ba:	4a42      	ldr	r2, [pc, #264]	@ (800b5c4 <HAL_ADC_Start_DMA+0x20c>)
 800b4bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4c2:	4a41      	ldr	r2, [pc, #260]	@ (800b5c8 <HAL_ADC_Start_DMA+0x210>)
 800b4c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800b4ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	685a      	ldr	r2, [r3, #4]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800b4de:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689a      	ldr	r2, [r3, #8]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b4ee:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	334c      	adds	r3, #76	@ 0x4c
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f001 fe74 	bl	800d1ec <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f003 031f 	and.w	r3, r3, #31
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d12a      	bne.n	800b566 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a2d      	ldr	r2, [pc, #180]	@ (800b5cc <HAL_ADC_Start_DMA+0x214>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d015      	beq.n	800b546 <HAL_ADC_Start_DMA+0x18e>
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a2c      	ldr	r2, [pc, #176]	@ (800b5d0 <HAL_ADC_Start_DMA+0x218>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d105      	bne.n	800b530 <HAL_ADC_Start_DMA+0x178>
 800b524:	4b25      	ldr	r3, [pc, #148]	@ (800b5bc <HAL_ADC_Start_DMA+0x204>)
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	f003 031f 	and.w	r3, r3, #31
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00a      	beq.n	800b546 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a27      	ldr	r2, [pc, #156]	@ (800b5d4 <HAL_ADC_Start_DMA+0x21c>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d136      	bne.n	800b5a8 <HAL_ADC_Start_DMA+0x1f0>
 800b53a:	4b20      	ldr	r3, [pc, #128]	@ (800b5bc <HAL_ADC_Start_DMA+0x204>)
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f003 0310 	and.w	r3, r3, #16
 800b542:	2b00      	cmp	r3, #0
 800b544:	d130      	bne.n	800b5a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b550:	2b00      	cmp	r3, #0
 800b552:	d129      	bne.n	800b5a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689a      	ldr	r2, [r3, #8]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b562:	609a      	str	r2, [r3, #8]
 800b564:	e020      	b.n	800b5a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a18      	ldr	r2, [pc, #96]	@ (800b5cc <HAL_ADC_Start_DMA+0x214>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d11b      	bne.n	800b5a8 <HAL_ADC_Start_DMA+0x1f0>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d114      	bne.n	800b5a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b58c:	609a      	str	r2, [r3, #8]
 800b58e:	e00b      	b.n	800b5a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b594:	f043 0210 	orr.w	r2, r3, #16
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5a0:	f043 0201 	orr.w	r2, r3, #1
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	200002b8 	.word	0x200002b8
 800b5b8:	431bde83 	.word	0x431bde83
 800b5bc:	40012300 	.word	0x40012300
 800b5c0:	0800ba71 	.word	0x0800ba71
 800b5c4:	0800bb2b 	.word	0x0800bb2b
 800b5c8:	0800bb47 	.word	0x0800bb47
 800b5cc:	40012000 	.word	0x40012000
 800b5d0:	40012100 	.word	0x40012100
 800b5d4:	40012200 	.word	0x40012200

0800b5d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d101      	bne.n	800b630 <HAL_ADC_ConfigChannel+0x1c>
 800b62c:	2302      	movs	r3, #2
 800b62e:	e113      	b.n	800b858 <HAL_ADC_ConfigChannel+0x244>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b09      	cmp	r3, #9
 800b63e:	d925      	bls.n	800b68c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68d9      	ldr	r1, [r3, #12]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	4613      	mov	r3, r2
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	4413      	add	r3, r2
 800b654:	3b1e      	subs	r3, #30
 800b656:	2207      	movs	r2, #7
 800b658:	fa02 f303 	lsl.w	r3, r2, r3
 800b65c:	43da      	mvns	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	400a      	ands	r2, r1
 800b664:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68d9      	ldr	r1, [r3, #12]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	b29b      	uxth	r3, r3
 800b676:	4618      	mov	r0, r3
 800b678:	4603      	mov	r3, r0
 800b67a:	005b      	lsls	r3, r3, #1
 800b67c:	4403      	add	r3, r0
 800b67e:	3b1e      	subs	r3, #30
 800b680:	409a      	lsls	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	430a      	orrs	r2, r1
 800b688:	60da      	str	r2, [r3, #12]
 800b68a:	e022      	b.n	800b6d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6919      	ldr	r1, [r3, #16]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	b29b      	uxth	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	4613      	mov	r3, r2
 800b69c:	005b      	lsls	r3, r3, #1
 800b69e:	4413      	add	r3, r2
 800b6a0:	2207      	movs	r2, #7
 800b6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a6:	43da      	mvns	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	400a      	ands	r2, r1
 800b6ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6919      	ldr	r1, [r3, #16]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	4403      	add	r3, r0
 800b6c8:	409a      	lsls	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2b06      	cmp	r3, #6
 800b6d8:	d824      	bhi.n	800b724 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685a      	ldr	r2, [r3, #4]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	3b05      	subs	r3, #5
 800b6ec:	221f      	movs	r2, #31
 800b6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f2:	43da      	mvns	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	400a      	ands	r2, r1
 800b6fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	b29b      	uxth	r3, r3
 800b708:	4618      	mov	r0, r3
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	4613      	mov	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	3b05      	subs	r3, #5
 800b716:	fa00 f203 	lsl.w	r2, r0, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	430a      	orrs	r2, r1
 800b720:	635a      	str	r2, [r3, #52]	@ 0x34
 800b722:	e04c      	b.n	800b7be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	2b0c      	cmp	r3, #12
 800b72a:	d824      	bhi.n	800b776 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	3b23      	subs	r3, #35	@ 0x23
 800b73e:	221f      	movs	r2, #31
 800b740:	fa02 f303 	lsl.w	r3, r2, r3
 800b744:	43da      	mvns	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	400a      	ands	r2, r1
 800b74c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	b29b      	uxth	r3, r3
 800b75a:	4618      	mov	r0, r3
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	4613      	mov	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	3b23      	subs	r3, #35	@ 0x23
 800b768:	fa00 f203 	lsl.w	r2, r0, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	430a      	orrs	r2, r1
 800b772:	631a      	str	r2, [r3, #48]	@ 0x30
 800b774:	e023      	b.n	800b7be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4613      	mov	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4413      	add	r3, r2
 800b786:	3b41      	subs	r3, #65	@ 0x41
 800b788:	221f      	movs	r2, #31
 800b78a:	fa02 f303 	lsl.w	r3, r2, r3
 800b78e:	43da      	mvns	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	400a      	ands	r2, r1
 800b796:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	3b41      	subs	r3, #65	@ 0x41
 800b7b2:	fa00 f203 	lsl.w	r2, r0, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b7be:	4b29      	ldr	r3, [pc, #164]	@ (800b864 <HAL_ADC_ConfigChannel+0x250>)
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a28      	ldr	r2, [pc, #160]	@ (800b868 <HAL_ADC_ConfigChannel+0x254>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d10f      	bne.n	800b7ec <HAL_ADC_ConfigChannel+0x1d8>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b12      	cmp	r3, #18
 800b7d2:	d10b      	bne.n	800b7ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b868 <HAL_ADC_ConfigChannel+0x254>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d12b      	bne.n	800b84e <HAL_ADC_ConfigChannel+0x23a>
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a1c      	ldr	r2, [pc, #112]	@ (800b86c <HAL_ADC_ConfigChannel+0x258>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d003      	beq.n	800b808 <HAL_ADC_ConfigChannel+0x1f4>
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b11      	cmp	r3, #17
 800b806:	d122      	bne.n	800b84e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a11      	ldr	r2, [pc, #68]	@ (800b86c <HAL_ADC_ConfigChannel+0x258>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d111      	bne.n	800b84e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b82a:	4b11      	ldr	r3, [pc, #68]	@ (800b870 <HAL_ADC_ConfigChannel+0x25c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a11      	ldr	r2, [pc, #68]	@ (800b874 <HAL_ADC_ConfigChannel+0x260>)
 800b830:	fba2 2303 	umull	r2, r3, r2, r3
 800b834:	0c9a      	lsrs	r2, r3, #18
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800b840:	e002      	b.n	800b848 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	3b01      	subs	r3, #1
 800b846:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1f9      	bne.n	800b842 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	40012300 	.word	0x40012300
 800b868:	40012000 	.word	0x40012000
 800b86c:	10000012 	.word	0x10000012
 800b870:	200002b8 	.word	0x200002b8
 800b874:	431bde83 	.word	0x431bde83

0800b878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b880:	4b79      	ldr	r3, [pc, #484]	@ (800ba68 <ADC_Init+0x1f0>)
 800b882:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	431a      	orrs	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b8ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6859      	ldr	r1, [r3, #4]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	021a      	lsls	r2, r3, #8
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	685a      	ldr	r2, [r3, #4]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800b8d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6859      	ldr	r1, [r3, #4]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689a      	ldr	r2, [r3, #8]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689a      	ldr	r2, [r3, #8]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b8f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6899      	ldr	r1, [r3, #8]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68da      	ldr	r2, [r3, #12]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90a:	4a58      	ldr	r2, [pc, #352]	@ (800ba6c <ADC_Init+0x1f4>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d022      	beq.n	800b956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689a      	ldr	r2, [r3, #8]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b91e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6899      	ldr	r1, [r3, #8]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	430a      	orrs	r2, r1
 800b930:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	689a      	ldr	r2, [r3, #8]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6899      	ldr	r1, [r3, #8]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	430a      	orrs	r2, r1
 800b952:	609a      	str	r2, [r3, #8]
 800b954:	e00f      	b.n	800b976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b974:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	689a      	ldr	r2, [r3, #8]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f022 0202 	bic.w	r2, r2, #2
 800b984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6899      	ldr	r1, [r3, #8]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	7e1b      	ldrb	r3, [r3, #24]
 800b990:	005a      	lsls	r2, r3, #1
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d01b      	beq.n	800b9dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800b9c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6859      	ldr	r1, [r3, #4]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	035a      	lsls	r2, r3, #13
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
 800b9da:	e007      	b.n	800b9ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b9ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800b9fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	051a      	lsls	r2, r3, #20
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ba20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	6899      	ldr	r1, [r3, #8]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba2e:	025a      	lsls	r2, r3, #9
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	430a      	orrs	r2, r1
 800ba36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	689a      	ldr	r2, [r3, #8]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6899      	ldr	r1, [r3, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	029a      	lsls	r2, r3, #10
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	609a      	str	r2, [r3, #8]
}
 800ba5c:	bf00      	nop
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	40012300 	.word	0x40012300
 800ba6c:	0f000001 	.word	0x0f000001

0800ba70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d13c      	bne.n	800bb04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d12b      	bne.n	800bafc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d127      	bne.n	800bafc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d006      	beq.n	800bac8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d119      	bne.n	800bafc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 0220 	bic.w	r2, r2, #32
 800bad6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800badc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d105      	bne.n	800bafc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baf4:	f043 0201 	orr.w	r2, r3, #1
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7fe fdbb 	bl	800a678 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bb02:	e00e      	b.n	800bb22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb08:	f003 0310 	and.w	r3, r3, #16
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f7ff fd75 	bl	800b600 <HAL_ADC_ErrorCallback>
}
 800bb16:	e004      	b.n	800bb22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
}
 800bb22:	bf00      	nop
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb36:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f7ff fd4d 	bl	800b5d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bb3e:	bf00      	nop
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb52:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2240      	movs	r2, #64	@ 0x40
 800bb58:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb5e:	f043 0204 	orr.w	r2, r3, #4
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7ff fd4a 	bl	800b600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bb6c:	bf00      	nop
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b087      	sub	sp, #28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	2300      	movs	r3, #0
 800bb86:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d101      	bne.n	800bb96 <HAL_ADCEx_InjectedStart_IT+0x22>
 800bb92:	2302      	movs	r3, #2
 800bb94:	e0b2      	b.n	800bcfc <HAL_ADCEx_InjectedStart_IT+0x188>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f003 0301 	and.w	r3, r3, #1
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d018      	beq.n	800bbde <HAL_ADCEx_InjectedStart_IT+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689a      	ldr	r2, [r3, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f042 0201 	orr.w	r2, r2, #1
 800bbba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800bbbc:	4b52      	ldr	r3, [pc, #328]	@ (800bd08 <HAL_ADCEx_InjectedStart_IT+0x194>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a52      	ldr	r2, [pc, #328]	@ (800bd0c <HAL_ADCEx_InjectedStart_IT+0x198>)
 800bbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc6:	0c9a      	lsrs	r2, r3, #18
 800bbc8:	4613      	mov	r3, r2
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	4413      	add	r3, r2
 800bbce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800bbd0:	e002      	b.n	800bbd8 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1f9      	bne.n	800bbd2 <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f003 0301 	and.w	r3, r3, #1
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d17a      	bne.n	800bce2 <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbf0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bbf4:	f023 0301 	bic.w	r3, r3, #1
 800bbf8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d102      	bne.n	800bc12 <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f06f 0204 	mvn.w	r2, #4
 800bc22:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bc32:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bc34:	4b36      	ldr	r3, [pc, #216]	@ (800bd10 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 800bc36:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f003 031f 	and.w	r3, r3, #31
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d124      	bne.n	800bc8e <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bf0c      	ite	eq
 800bc52:	2301      	moveq	r3, #1
 800bc54:	2300      	movne	r3, #0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	bf0c      	ite	eq
 800bc68:	2301      	moveq	r3, #1
 800bc6a:	2300      	movne	r3, #0
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d041      	beq.n	800bcfa <HAL_ADCEx_InjectedStart_IT+0x186>
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d03e      	beq.n	800bcfa <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	689a      	ldr	r2, [r3, #8]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800bc8a:	609a      	str	r2, [r3, #8]
 800bc8c:	e035      	b.n	800bcfa <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bf0c      	ite	eq
 800bc9c:	2301      	moveq	r3, #1
 800bc9e:	2300      	movne	r3, #0
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	bf0c      	ite	eq
 800bcb2:	2301      	moveq	r3, #1
 800bcb4:	2300      	movne	r3, #0
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a15      	ldr	r2, [pc, #84]	@ (800bd14 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d11a      	bne.n	800bcfa <HAL_ADCEx_InjectedStart_IT+0x186>
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d017      	beq.n	800bcfa <HAL_ADCEx_InjectedStart_IT+0x186>
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d014      	beq.n	800bcfa <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	689a      	ldr	r2, [r3, #8]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800bcde:	609a      	str	r2, [r3, #8]
 800bce0:	e00b      	b.n	800bcfa <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce6:	f043 0210 	orr.w	r2, r3, #16
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcf2:	f043 0201 	orr.w	r2, r3, #1
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	371c      	adds	r7, #28
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	200002b8 	.word	0x200002b8
 800bd0c:	431bde83 	.word	0x431bde83
 800bd10:	40012300 	.word	0x40012300
 800bd14:	40012000 	.word	0x40012000

0800bd18 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f06f 0204 	mvn.w	r2, #4
 800bd2e:	601a      	str	r2, [r3, #0]

  /* Return the selected ADC converted value */
  switch (InjectedRank)
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d81f      	bhi.n	800bd78 <HAL_ADCEx_InjectedGetValue+0x60>
 800bd38:	a201      	add	r2, pc, #4	@ (adr r2, 800bd40 <HAL_ADCEx_InjectedGetValue+0x28>)
 800bd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3e:	bf00      	nop
 800bd40:	0800bd6f 	.word	0x0800bd6f
 800bd44:	0800bd65 	.word	0x0800bd65
 800bd48:	0800bd5b 	.word	0x0800bd5b
 800bd4c:	0800bd51 	.word	0x0800bd51
  {
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd56:	60fb      	str	r3, [r7, #12]
    }
    break;
 800bd58:	e00f      	b.n	800bd7a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
    {
      tmp =  hadc->Instance->JDR3;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd60:	60fb      	str	r3, [r7, #12]
    }
    break;
 800bd62:	e00a      	b.n	800bd7a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
    {
      tmp =  hadc->Instance->JDR2;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd6a:	60fb      	str	r3, [r7, #12]
    }
    break;
 800bd6c:	e005      	b.n	800bd7a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd74:	60fb      	str	r3, [r7, #12]
    }
    break;
 800bd76:	e000      	b.n	800bd7a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
      break;
 800bd78:	bf00      	nop
  }
  return tmp;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d101      	bne.n	800bda0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	e17e      	b.n	800c09e <HAL_ADCEx_InjectedConfigChannel+0x316>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	d925      	bls.n	800bdfc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68d9      	ldr	r1, [r3, #12]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	005b      	lsls	r3, r3, #1
 800bdc2:	4413      	add	r3, r2
 800bdc4:	3b1e      	subs	r3, #30
 800bdc6:	2207      	movs	r2, #7
 800bdc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdcc:	43da      	mvns	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	400a      	ands	r2, r1
 800bdd4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68d9      	ldr	r1, [r3, #12]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	689a      	ldr	r2, [r3, #8]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	4618      	mov	r0, r3
 800bde8:	4603      	mov	r3, r0
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	4403      	add	r3, r0
 800bdee:	3b1e      	subs	r3, #30
 800bdf0:	409a      	lsls	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	60da      	str	r2, [r3, #12]
 800bdfa:	e022      	b.n	800be42 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6919      	ldr	r1, [r3, #16]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	b29b      	uxth	r3, r3
 800be08:	461a      	mov	r2, r3
 800be0a:	4613      	mov	r3, r2
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	4413      	add	r3, r2
 800be10:	2207      	movs	r2, #7
 800be12:	fa02 f303 	lsl.w	r3, r2, r3
 800be16:	43da      	mvns	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	400a      	ands	r2, r1
 800be1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6919      	ldr	r1, [r3, #16]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	b29b      	uxth	r3, r3
 800be30:	4618      	mov	r0, r3
 800be32:	4603      	mov	r3, r0
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	4403      	add	r3, r0
 800be38:	409a      	lsls	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800be50:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	051a      	lsls	r2, r3, #20
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	430a      	orrs	r2, r1
 800be66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	b2da      	uxtb	r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	3303      	adds	r3, #3
 800be80:	b2db      	uxtb	r3, r3
 800be82:	461a      	mov	r2, r3
 800be84:	4613      	mov	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	221f      	movs	r2, #31
 800be8c:	fa02 f303 	lsl.w	r3, r2, r3
 800be90:	43da      	mvns	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	400a      	ands	r2, r1
 800be98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	4618      	mov	r0, r3
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	b2da      	uxtb	r2, r3
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	3303      	adds	r3, #3
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	461a      	mov	r2, r3
 800bebe:	4613      	mov	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	4413      	add	r3, r2
 800bec4:	fa00 f203 	lsl.w	r2, r0, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	430a      	orrs	r2, r1
 800bece:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	4a75      	ldr	r2, [pc, #468]	@ (800c0ac <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d022      	beq.n	800bf20 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689a      	ldr	r2, [r3, #8]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800bee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6899      	ldr	r1, [r3, #8]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	699a      	ldr	r2, [r3, #24]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	430a      	orrs	r2, r1
 800befa:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	689a      	ldr	r2, [r3, #8]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800bf0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6899      	ldr	r1, [r3, #8]
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	69da      	ldr	r2, [r3, #28]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	609a      	str	r2, [r3, #8]
 800bf1e:	e00f      	b.n	800bf40 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689a      	ldr	r2, [r3, #8]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800bf2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	689a      	ldr	r2, [r3, #8]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800bf3e:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	7d5b      	ldrb	r3, [r3, #21]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d008      	beq.n	800bf5a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf56:	605a      	str	r2, [r3, #4]
 800bf58:	e007      	b.n	800bf6a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf68:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	7d1b      	ldrb	r3, [r3, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d008      	beq.n	800bf84 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bf80:	605a      	str	r2, [r3, #4]
 800bf82:	e007      	b.n	800bf94 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bf92:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d02e      	beq.n	800bffa <HAL_ADCEx_InjectedConfigChannel+0x272>
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d840      	bhi.n	800c022 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d002      	beq.n	800bfaa <HAL_ADCEx_InjectedConfigChannel+0x222>
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d014      	beq.n	800bfd2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 800bfa8:	e03b      	b.n	800c022 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	6812      	ldr	r2, [r2, #0]
 800bfb4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800bfb8:	f023 030f 	bic.w	r3, r3, #15
 800bfbc:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	6959      	ldr	r1, [r3, #20]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	615a      	str	r2, [r3, #20]
      break;
 800bfd0:	e03b      	b.n	800c04a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	6812      	ldr	r2, [r2, #0]
 800bfdc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800bfe0:	f023 030f 	bic.w	r3, r3, #15
 800bfe4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	6999      	ldr	r1, [r3, #24]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	68da      	ldr	r2, [r3, #12]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	430a      	orrs	r2, r1
 800bff6:	619a      	str	r2, [r3, #24]
      break;
 800bff8:	e027      	b.n	800c04a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	69db      	ldr	r3, [r3, #28]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	6812      	ldr	r2, [r2, #0]
 800c004:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c008:	f023 030f 	bic.w	r3, r3, #15
 800c00c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69d9      	ldr	r1, [r3, #28]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	68da      	ldr	r2, [r3, #12]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	61da      	str	r2, [r3, #28]
      break;
 800c020:	e013      	b.n	800c04a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	6812      	ldr	r2, [r2, #0]
 800c02c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c030:	f023 030f 	bic.w	r3, r3, #15
 800c034:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6a19      	ldr	r1, [r3, #32]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	621a      	str	r2, [r3, #32]
      break;
 800c048:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c04a:	4b19      	ldr	r3, [pc, #100]	@ (800c0b0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800c04c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a18      	ldr	r2, [pc, #96]	@ (800c0b4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d109      	bne.n	800c06c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b12      	cmp	r3, #18
 800c05e:	d105      	bne.n	800c06c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a10      	ldr	r2, [pc, #64]	@ (800c0b4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d10e      	bne.n	800c094 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a0f      	ldr	r2, [pc, #60]	@ (800c0b8 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d003      	beq.n	800c088 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b11      	cmp	r3, #17
 800c086:	d105      	bne.n	800c094 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	000f0001 	.word	0x000f0001
 800c0b0:	40012300 	.word	0x40012300
 800c0b4:	40012000 	.word	0x40012000
 800c0b8:	10000012 	.word	0x10000012

0800c0bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e0ed      	b.n	800c2aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d102      	bne.n	800c0e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7fe fbb8 	bl	800a850 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 0201 	orr.w	r2, r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c0f0:	f7fe ffde 	bl	800b0b0 <HAL_GetTick>
 800c0f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c0f6:	e012      	b.n	800c11e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c0f8:	f7fe ffda 	bl	800b0b0 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b0a      	cmp	r3, #10
 800c104:	d90b      	bls.n	800c11e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2205      	movs	r2, #5
 800c116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e0c5      	b.n	800c2aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0e5      	beq.n	800c0f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 0202 	bic.w	r2, r2, #2
 800c13a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c13c:	f7fe ffb8 	bl	800b0b0 <HAL_GetTick>
 800c140:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c142:	e012      	b.n	800c16a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c144:	f7fe ffb4 	bl	800b0b0 <HAL_GetTick>
 800c148:	4602      	mov	r2, r0
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	2b0a      	cmp	r3, #10
 800c150:	d90b      	bls.n	800c16a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c156:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2205      	movs	r2, #5
 800c162:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e09f      	b.n	800c2aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1e5      	bne.n	800c144 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	7e1b      	ldrb	r3, [r3, #24]
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d108      	bne.n	800c192 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	e007      	b.n	800c1a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c1a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	7e5b      	ldrb	r3, [r3, #25]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d108      	bne.n	800c1bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	e007      	b.n	800c1cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c1ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7e9b      	ldrb	r3, [r3, #26]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d108      	bne.n	800c1e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f042 0220 	orr.w	r2, r2, #32
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	e007      	b.n	800c1f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f022 0220 	bic.w	r2, r2, #32
 800c1f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	7edb      	ldrb	r3, [r3, #27]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d108      	bne.n	800c210 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f022 0210 	bic.w	r2, r2, #16
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	e007      	b.n	800c220 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f042 0210 	orr.w	r2, r2, #16
 800c21e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	7f1b      	ldrb	r3, [r3, #28]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d108      	bne.n	800c23a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f042 0208 	orr.w	r2, r2, #8
 800c236:	601a      	str	r2, [r3, #0]
 800c238:	e007      	b.n	800c24a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f022 0208 	bic.w	r2, r2, #8
 800c248:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	7f5b      	ldrb	r3, [r3, #29]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d108      	bne.n	800c264 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f042 0204 	orr.w	r2, r2, #4
 800c260:	601a      	str	r2, [r3, #0]
 800c262:	e007      	b.n	800c274 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 0204 	bic.w	r2, r2, #4
 800c272:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689a      	ldr	r2, [r3, #8]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	431a      	orrs	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	431a      	orrs	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	ea42 0103 	orr.w	r1, r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	1e5a      	subs	r2, r3, #1
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	430a      	orrs	r2, r1
 800c298:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800c2cc:	7cfb      	ldrb	r3, [r7, #19]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d003      	beq.n	800c2da <HAL_CAN_ConfigFilter+0x26>
 800c2d2:	7cfb      	ldrb	r3, [r7, #19]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	f040 80be 	bne.w	800c456 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800c2da:	4b65      	ldr	r3, [pc, #404]	@ (800c470 <HAL_CAN_ConfigFilter+0x1bc>)
 800c2dc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c2e4:	f043 0201 	orr.w	r2, r3, #1
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c2f4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c308:	021b      	lsls	r3, r3, #8
 800c30a:	431a      	orrs	r2, r3
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	f003 031f 	and.w	r3, r3, #31
 800c31a:	2201      	movs	r2, #1
 800c31c:	fa02 f303 	lsl.w	r3, r2, r3
 800c320:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	43db      	mvns	r3, r3
 800c32c:	401a      	ands	r2, r3
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	69db      	ldr	r3, [r3, #28]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d123      	bne.n	800c384 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	43db      	mvns	r3, r3
 800c346:	401a      	ands	r2, r3
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800c35e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	3248      	adds	r2, #72	@ 0x48
 800c364:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c378:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c37a:	6979      	ldr	r1, [r7, #20]
 800c37c:	3348      	adds	r3, #72	@ 0x48
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	440b      	add	r3, r1
 800c382:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	69db      	ldr	r3, [r3, #28]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d122      	bne.n	800c3d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	431a      	orrs	r2, r3
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800c3ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	3248      	adds	r2, #72	@ 0x48
 800c3b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c3c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c3c8:	6979      	ldr	r1, [r7, #20]
 800c3ca:	3348      	adds	r3, #72	@ 0x48
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	440b      	add	r3, r1
 800c3d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d109      	bne.n	800c3ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	43db      	mvns	r3, r3
 800c3e4:	401a      	ands	r2, r3
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800c3ec:	e007      	b.n	800c3fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	431a      	orrs	r2, r3
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d109      	bne.n	800c41a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	43db      	mvns	r3, r3
 800c410:	401a      	ands	r2, r3
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800c418:	e007      	b.n	800c42a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	431a      	orrs	r2, r3
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d107      	bne.n	800c442 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	431a      	orrs	r2, r3
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800c448:	f023 0201 	bic.w	r2, r3, #1
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	e006      	b.n	800c464 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c462:	2301      	movs	r3, #1
  }
}
 800c464:	4618      	mov	r0, r3
 800c466:	371c      	adds	r7, #28
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	40006400 	.word	0x40006400

0800c474 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b01      	cmp	r3, #1
 800c486:	d12e      	bne.n	800c4e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2202      	movs	r2, #2
 800c48c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f022 0201 	bic.w	r2, r2, #1
 800c49e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c4a0:	f7fe fe06 	bl	800b0b0 <HAL_GetTick>
 800c4a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800c4a6:	e012      	b.n	800c4ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c4a8:	f7fe fe02 	bl	800b0b0 <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	2b0a      	cmp	r3, #10
 800c4b4:	d90b      	bls.n	800c4ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2205      	movs	r2, #5
 800c4c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e012      	b.n	800c4f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1e5      	bne.n	800c4a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e006      	b.n	800c4f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
  }
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d133      	bne.n	800c578 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f042 0201 	orr.w	r2, r2, #1
 800c51e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c520:	f7fe fdc6 	bl	800b0b0 <HAL_GetTick>
 800c524:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c526:	e012      	b.n	800c54e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c528:	f7fe fdc2 	bl	800b0b0 <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	2b0a      	cmp	r3, #10
 800c534:	d90b      	bls.n	800c54e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c53a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2205      	movs	r2, #5
 800c546:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e01b      	b.n	800c586 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	f003 0301 	and.w	r3, r3, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0e5      	beq.n	800c528 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f022 0202 	bic.w	r2, r2, #2
 800c56a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	e006      	b.n	800c586 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c57c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c584:	2301      	movs	r3, #1
  }
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800c58e:	b480      	push	{r7}
 800c590:	b089      	sub	sp, #36	@ 0x24
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	607a      	str	r2, [r7, #4]
 800c59a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c5a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800c5ac:	7ffb      	ldrb	r3, [r7, #31]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d003      	beq.n	800c5ba <HAL_CAN_AddTxMessage+0x2c>
 800c5b2:	7ffb      	ldrb	r3, [r7, #31]
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	f040 80ad 	bne.w	800c714 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10a      	bne.n	800c5da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d105      	bne.n	800c5da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f000 8095 	beq.w	800c704 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	0e1b      	lsrs	r3, r3, #24
 800c5de:	f003 0303 	and.w	r3, r3, #3
 800c5e2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	409a      	lsls	r2, r3
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10d      	bne.n	800c612 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800c600:	68f9      	ldr	r1, [r7, #12]
 800c602:	6809      	ldr	r1, [r1, #0]
 800c604:	431a      	orrs	r2, r3
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	3318      	adds	r3, #24
 800c60a:	011b      	lsls	r3, r3, #4
 800c60c:	440b      	add	r3, r1
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	e00f      	b.n	800c632 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c61c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800c626:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	3318      	adds	r3, #24
 800c62c:	011b      	lsls	r3, r3, #4
 800c62e:	440b      	add	r3, r1
 800c630:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6819      	ldr	r1, [r3, #0]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	691a      	ldr	r2, [r3, #16]
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	3318      	adds	r3, #24
 800c63e:	011b      	lsls	r3, r3, #4
 800c640:	440b      	add	r3, r1
 800c642:	3304      	adds	r3, #4
 800c644:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	7d1b      	ldrb	r3, [r3, #20]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d111      	bne.n	800c672 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	3318      	adds	r3, #24
 800c656:	011b      	lsls	r3, r3, #4
 800c658:	4413      	add	r3, r2
 800c65a:	3304      	adds	r3, #4
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	6811      	ldr	r1, [r2, #0]
 800c662:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	3318      	adds	r3, #24
 800c66a:	011b      	lsls	r3, r3, #4
 800c66c:	440b      	add	r3, r1
 800c66e:	3304      	adds	r3, #4
 800c670:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	3307      	adds	r3, #7
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	061a      	lsls	r2, r3, #24
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3306      	adds	r3, #6
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	041b      	lsls	r3, r3, #16
 800c682:	431a      	orrs	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3305      	adds	r3, #5
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	021b      	lsls	r3, r3, #8
 800c68c:	4313      	orrs	r3, r2
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	3204      	adds	r2, #4
 800c692:	7812      	ldrb	r2, [r2, #0]
 800c694:	4610      	mov	r0, r2
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	6811      	ldr	r1, [r2, #0]
 800c69a:	ea43 0200 	orr.w	r2, r3, r0
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	011b      	lsls	r3, r3, #4
 800c6a2:	440b      	add	r3, r1
 800c6a4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800c6a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3303      	adds	r3, #3
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	061a      	lsls	r2, r3, #24
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3302      	adds	r3, #2
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	041b      	lsls	r3, r3, #16
 800c6ba:	431a      	orrs	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	021b      	lsls	r3, r3, #8
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	7812      	ldrb	r2, [r2, #0]
 800c6ca:	4610      	mov	r0, r2
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	6811      	ldr	r1, [r2, #0]
 800c6d0:	ea43 0200 	orr.w	r2, r3, r0
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	011b      	lsls	r3, r3, #4
 800c6d8:	440b      	add	r3, r1
 800c6da:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800c6de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	3318      	adds	r3, #24
 800c6e8:	011b      	lsls	r3, r3, #4
 800c6ea:	4413      	add	r3, r2
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	6811      	ldr	r1, [r2, #0]
 800c6f2:	f043 0201 	orr.w	r2, r3, #1
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	3318      	adds	r3, #24
 800c6fa:	011b      	lsls	r3, r3, #4
 800c6fc:	440b      	add	r3, r1
 800c6fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800c700:	2300      	movs	r3, #0
 800c702:	e00e      	b.n	800c722 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c708:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	e006      	b.n	800c722 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c718:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c720:	2301      	movs	r3, #1
  }
}
 800c722:	4618      	mov	r0, r3
 800c724:	3724      	adds	r7, #36	@ 0x24
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800c72e:	b480      	push	{r7}
 800c730:	b085      	sub	sp, #20
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800c736:	2300      	movs	r3, #0
 800c738:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c740:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800c742:	7afb      	ldrb	r3, [r7, #11]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d002      	beq.n	800c74e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800c748:	7afb      	ldrb	r3, [r7, #11]
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d11d      	bne.n	800c78a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3301      	adds	r3, #1
 800c760:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	3301      	adds	r3, #1
 800c774:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	3301      	adds	r3, #1
 800c788:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800c78a:	68fb      	ldr	r3, [r7, #12]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800c798:	b480      	push	{r7}
 800c79a:	b087      	sub	sp, #28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c7ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d003      	beq.n	800c7bc <HAL_CAN_GetRxMessage+0x24>
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	f040 8103 	bne.w	800c9c2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10e      	bne.n	800c7e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f003 0303 	and.w	r3, r3, #3
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d116      	bne.n	800c7fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e0f7      	b.n	800c9d0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	f003 0303 	and.w	r3, r3, #3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d107      	bne.n	800c7fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e0e8      	b.n	800c9d0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	331b      	adds	r3, #27
 800c806:	011b      	lsls	r3, r3, #4
 800c808:	4413      	add	r3, r2
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f003 0204 	and.w	r2, r3, #4
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10c      	bne.n	800c836 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	331b      	adds	r3, #27
 800c824:	011b      	lsls	r3, r3, #4
 800c826:	4413      	add	r3, r2
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	0d5b      	lsrs	r3, r3, #21
 800c82c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	e00b      	b.n	800c84e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	331b      	adds	r3, #27
 800c83e:	011b      	lsls	r3, r3, #4
 800c840:	4413      	add	r3, r2
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	08db      	lsrs	r3, r3, #3
 800c846:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	331b      	adds	r3, #27
 800c856:	011b      	lsls	r3, r3, #4
 800c858:	4413      	add	r3, r2
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 0202 	and.w	r2, r3, #2
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	331b      	adds	r3, #27
 800c86c:	011b      	lsls	r3, r3, #4
 800c86e:	4413      	add	r3, r2
 800c870:	3304      	adds	r3, #4
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 0308 	and.w	r3, r3, #8
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2208      	movs	r2, #8
 800c880:	611a      	str	r2, [r3, #16]
 800c882:	e00b      	b.n	800c89c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	331b      	adds	r3, #27
 800c88c:	011b      	lsls	r3, r3, #4
 800c88e:	4413      	add	r3, r2
 800c890:	3304      	adds	r3, #4
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 020f 	and.w	r2, r3, #15
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	331b      	adds	r3, #27
 800c8a4:	011b      	lsls	r3, r3, #4
 800c8a6:	4413      	add	r3, r2
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	0a1b      	lsrs	r3, r3, #8
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	331b      	adds	r3, #27
 800c8bc:	011b      	lsls	r3, r3, #4
 800c8be:	4413      	add	r3, r2
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	0c1b      	lsrs	r3, r3, #16
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	011b      	lsls	r3, r3, #4
 800c8d4:	4413      	add	r3, r2
 800c8d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	011b      	lsls	r3, r3, #4
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	0a1a      	lsrs	r2, r3, #8
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	011b      	lsls	r3, r3, #4
 800c904:	4413      	add	r3, r2
 800c906:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	0c1a      	lsrs	r2, r3, #16
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	3302      	adds	r3, #2
 800c912:	b2d2      	uxtb	r2, r2
 800c914:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	011b      	lsls	r3, r3, #4
 800c91e:	4413      	add	r3, r2
 800c920:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	0e1a      	lsrs	r2, r3, #24
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	3303      	adds	r3, #3
 800c92c:	b2d2      	uxtb	r2, r2
 800c92e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	011b      	lsls	r3, r3, #4
 800c938:	4413      	add	r3, r2
 800c93a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	3304      	adds	r3, #4
 800c944:	b2d2      	uxtb	r2, r2
 800c946:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	011b      	lsls	r3, r3, #4
 800c950:	4413      	add	r3, r2
 800c952:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	0a1a      	lsrs	r2, r3, #8
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	3305      	adds	r3, #5
 800c95e:	b2d2      	uxtb	r2, r2
 800c960:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	011b      	lsls	r3, r3, #4
 800c96a:	4413      	add	r3, r2
 800c96c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	0c1a      	lsrs	r2, r3, #16
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	3306      	adds	r3, #6
 800c978:	b2d2      	uxtb	r2, r2
 800c97a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	011b      	lsls	r3, r3, #4
 800c984:	4413      	add	r3, r2
 800c986:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	0e1a      	lsrs	r2, r3, #24
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	3307      	adds	r3, #7
 800c992:	b2d2      	uxtb	r2, r2
 800c994:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d108      	bne.n	800c9ae <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68da      	ldr	r2, [r3, #12]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f042 0220 	orr.w	r2, r2, #32
 800c9aa:	60da      	str	r2, [r3, #12]
 800c9ac:	e007      	b.n	800c9be <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	691a      	ldr	r2, [r3, #16]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f042 0220 	orr.w	r2, r2, #32
 800c9bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e006      	b.n	800c9d0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
  }
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	371c      	adds	r7, #28
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d002      	beq.n	800c9fa <HAL_CAN_ActivateNotification+0x1e>
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d109      	bne.n	800ca0e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	6959      	ldr	r1, [r3, #20]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	683a      	ldr	r2, [r7, #0]
 800ca06:	430a      	orrs	r2, r1
 800ca08:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e006      	b.n	800ca1c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
  }
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08a      	sub	sp, #40	@ 0x28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800ca30:	2300      	movs	r3, #0
 800ca32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800ca64:	6a3b      	ldr	r3, [r7, #32]
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d07c      	beq.n	800cb68 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d023      	beq.n	800cac0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	f003 0302 	and.w	r3, r3, #2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7fb fbfe 	bl	800828c <HAL_CAN_TxMailbox0CompleteCallback>
 800ca90:	e016      	b.n	800cac0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d004      	beq.n	800caa6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800caa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800caa4:	e00c      	b.n	800cac0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	f003 0308 	and.w	r3, r3, #8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d004      	beq.n	800caba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cab6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cab8:	e002      	b.n	800cac0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f96b 	bl	800cd96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d024      	beq.n	800cb14 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cad2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7fb fbe4 	bl	80082ac <HAL_CAN_TxMailbox1CompleteCallback>
 800cae4:	e016      	b.n	800cb14 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800caf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800caf6:	627b      	str	r3, [r7, #36]	@ 0x24
 800caf8:	e00c      	b.n	800cb14 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d004      	beq.n	800cb0e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb0c:	e002      	b.n	800cb14 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f94b 	bl	800cdaa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d024      	beq.n	800cb68 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800cb26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d003      	beq.n	800cb3a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7fb fbca 	bl	80082cc <HAL_CAN_TxMailbox2CompleteCallback>
 800cb38:	e016      	b.n	800cb68 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d004      	beq.n	800cb4e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb4c:	e00c      	b.n	800cb68 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d004      	beq.n	800cb62 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800cb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb60:	e002      	b.n	800cb68 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f92b 	bl	800cdbe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	f003 0308 	and.w	r3, r3, #8
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00c      	beq.n	800cb8c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	f003 0310 	and.w	r3, r3, #16
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d007      	beq.n	800cb8c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2210      	movs	r2, #16
 800cb8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800cb8c:	6a3b      	ldr	r3, [r7, #32]
 800cb8e:	f003 0304 	and.w	r3, r3, #4
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00b      	beq.n	800cbae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f003 0308 	and.w	r3, r3, #8
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d006      	beq.n	800cbae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2208      	movs	r2, #8
 800cba6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 f912 	bl	800cdd2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	f003 0302 	and.w	r3, r3, #2
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d009      	beq.n	800cbcc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	f003 0303 	and.w	r3, r3, #3
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7fb faf4 	bl	80081b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00c      	beq.n	800cbf0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f003 0310 	and.w	r3, r3, #16
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d007      	beq.n	800cbf0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cbe6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2210      	movs	r2, #16
 800cbee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	f003 0320 	and.w	r3, r3, #32
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00b      	beq.n	800cc12 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	f003 0308 	and.w	r3, r3, #8
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d006      	beq.n	800cc12 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2208      	movs	r2, #8
 800cc0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 f8ea 	bl	800cde6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	f003 0310 	and.w	r3, r3, #16
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d009      	beq.n	800cc30 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	f003 0303 	and.w	r3, r3, #3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d002      	beq.n	800cc30 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7fb facf 	bl	80081ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00b      	beq.n	800cc52 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	f003 0310 	and.w	r3, r3, #16
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d006      	beq.n	800cc52 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2210      	movs	r2, #16
 800cc4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 f8d4 	bl	800cdfa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00b      	beq.n	800cc74 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	f003 0308 	and.w	r3, r3, #8
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d006      	beq.n	800cc74 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2208      	movs	r2, #8
 800cc6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 f8cd 	bl	800ce0e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800cc74:	6a3b      	ldr	r3, [r7, #32]
 800cc76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d07b      	beq.n	800cd76 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	f003 0304 	and.w	r3, r3, #4
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d072      	beq.n	800cd6e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800cc88:	6a3b      	ldr	r3, [r7, #32]
 800cc8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d008      	beq.n	800cca4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d003      	beq.n	800cca4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800cc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9e:	f043 0301 	orr.w	r3, r3, #1
 800cca2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d008      	beq.n	800ccc0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d003      	beq.n	800ccc0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccba:	f043 0302 	orr.w	r3, r3, #2
 800ccbe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ccc0:	6a3b      	ldr	r3, [r7, #32]
 800ccc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d008      	beq.n	800ccdc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d003      	beq.n	800ccdc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd6:	f043 0304 	orr.w	r3, r3, #4
 800ccda:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ccdc:	6a3b      	ldr	r3, [r7, #32]
 800ccde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d043      	beq.n	800cd6e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d03e      	beq.n	800cd6e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ccf6:	2b60      	cmp	r3, #96	@ 0x60
 800ccf8:	d02b      	beq.n	800cd52 <HAL_CAN_IRQHandler+0x32a>
 800ccfa:	2b60      	cmp	r3, #96	@ 0x60
 800ccfc:	d82e      	bhi.n	800cd5c <HAL_CAN_IRQHandler+0x334>
 800ccfe:	2b50      	cmp	r3, #80	@ 0x50
 800cd00:	d022      	beq.n	800cd48 <HAL_CAN_IRQHandler+0x320>
 800cd02:	2b50      	cmp	r3, #80	@ 0x50
 800cd04:	d82a      	bhi.n	800cd5c <HAL_CAN_IRQHandler+0x334>
 800cd06:	2b40      	cmp	r3, #64	@ 0x40
 800cd08:	d019      	beq.n	800cd3e <HAL_CAN_IRQHandler+0x316>
 800cd0a:	2b40      	cmp	r3, #64	@ 0x40
 800cd0c:	d826      	bhi.n	800cd5c <HAL_CAN_IRQHandler+0x334>
 800cd0e:	2b30      	cmp	r3, #48	@ 0x30
 800cd10:	d010      	beq.n	800cd34 <HAL_CAN_IRQHandler+0x30c>
 800cd12:	2b30      	cmp	r3, #48	@ 0x30
 800cd14:	d822      	bhi.n	800cd5c <HAL_CAN_IRQHandler+0x334>
 800cd16:	2b10      	cmp	r3, #16
 800cd18:	d002      	beq.n	800cd20 <HAL_CAN_IRQHandler+0x2f8>
 800cd1a:	2b20      	cmp	r3, #32
 800cd1c:	d005      	beq.n	800cd2a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800cd1e:	e01d      	b.n	800cd5c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800cd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd22:	f043 0308 	orr.w	r3, r3, #8
 800cd26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cd28:	e019      	b.n	800cd5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2c:	f043 0310 	orr.w	r3, r3, #16
 800cd30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cd32:	e014      	b.n	800cd5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800cd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd36:	f043 0320 	orr.w	r3, r3, #32
 800cd3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cd3c:	e00f      	b.n	800cd5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cd46:	e00a      	b.n	800cd5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800cd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cd50:	e005      	b.n	800cd5e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800cd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800cd5a:	e000      	b.n	800cd5e <HAL_CAN_IRQHandler+0x336>
            break;
 800cd5c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	699a      	ldr	r2, [r3, #24]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800cd6c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2204      	movs	r2, #4
 800cd74:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800cd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d008      	beq.n	800cd8e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f84a 	bl	800ce22 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800cd8e:	bf00      	nop
 800cd90:	3728      	adds	r7, #40	@ 0x28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800cd9e:	bf00      	nop
 800cda0:	370c      	adds	r7, #12
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800cdb2:	bf00      	nop
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800cdc6:	bf00      	nop
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800cdd2:	b480      	push	{r7}
 800cdd4:	b083      	sub	sp, #12
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800cdda:	bf00      	nop
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b083      	sub	sp, #12
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800cdee:	bf00      	nop
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800ce02:	bf00      	nop
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800ce0e:	b480      	push	{r7}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800ce16:	bf00      	nop
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b083      	sub	sp, #12
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800ce2a:	bf00      	nop
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
	...

0800ce38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f003 0307 	and.w	r3, r3, #7
 800ce46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ce48:	4b0c      	ldr	r3, [pc, #48]	@ (800ce7c <__NVIC_SetPriorityGrouping+0x44>)
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ce54:	4013      	ands	r3, r2
 800ce56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ce60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ce64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ce6a:	4a04      	ldr	r2, [pc, #16]	@ (800ce7c <__NVIC_SetPriorityGrouping+0x44>)
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	60d3      	str	r3, [r2, #12]
}
 800ce70:	bf00      	nop
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	e000ed00 	.word	0xe000ed00

0800ce80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ce80:	b480      	push	{r7}
 800ce82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ce84:	4b04      	ldr	r3, [pc, #16]	@ (800ce98 <__NVIC_GetPriorityGrouping+0x18>)
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	0a1b      	lsrs	r3, r3, #8
 800ce8a:	f003 0307 	and.w	r3, r3, #7
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	e000ed00 	.word	0xe000ed00

0800ce9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	4603      	mov	r3, r0
 800cea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	db0b      	blt.n	800cec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ceae:	79fb      	ldrb	r3, [r7, #7]
 800ceb0:	f003 021f 	and.w	r2, r3, #31
 800ceb4:	4907      	ldr	r1, [pc, #28]	@ (800ced4 <__NVIC_EnableIRQ+0x38>)
 800ceb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceba:	095b      	lsrs	r3, r3, #5
 800cebc:	2001      	movs	r0, #1
 800cebe:	fa00 f202 	lsl.w	r2, r0, r2
 800cec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cec6:	bf00      	nop
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	e000e100 	.word	0xe000e100

0800ced8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	6039      	str	r1, [r7, #0]
 800cee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	db0a      	blt.n	800cf02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	490c      	ldr	r1, [pc, #48]	@ (800cf24 <__NVIC_SetPriority+0x4c>)
 800cef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cef6:	0112      	lsls	r2, r2, #4
 800cef8:	b2d2      	uxtb	r2, r2
 800cefa:	440b      	add	r3, r1
 800cefc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cf00:	e00a      	b.n	800cf18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	4908      	ldr	r1, [pc, #32]	@ (800cf28 <__NVIC_SetPriority+0x50>)
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	f003 030f 	and.w	r3, r3, #15
 800cf0e:	3b04      	subs	r3, #4
 800cf10:	0112      	lsls	r2, r2, #4
 800cf12:	b2d2      	uxtb	r2, r2
 800cf14:	440b      	add	r3, r1
 800cf16:	761a      	strb	r2, [r3, #24]
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	e000e100 	.word	0xe000e100
 800cf28:	e000ed00 	.word	0xe000ed00

0800cf2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b089      	sub	sp, #36	@ 0x24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f003 0307 	and.w	r3, r3, #7
 800cf3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	f1c3 0307 	rsb	r3, r3, #7
 800cf46:	2b04      	cmp	r3, #4
 800cf48:	bf28      	it	cs
 800cf4a:	2304      	movcs	r3, #4
 800cf4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	3304      	adds	r3, #4
 800cf52:	2b06      	cmp	r3, #6
 800cf54:	d902      	bls.n	800cf5c <NVIC_EncodePriority+0x30>
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	3b03      	subs	r3, #3
 800cf5a:	e000      	b.n	800cf5e <NVIC_EncodePriority+0x32>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf60:	f04f 32ff 	mov.w	r2, #4294967295
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	fa02 f303 	lsl.w	r3, r2, r3
 800cf6a:	43da      	mvns	r2, r3
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	401a      	ands	r2, r3
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cf74:	f04f 31ff 	mov.w	r1, #4294967295
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf7e:	43d9      	mvns	r1, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cf84:	4313      	orrs	r3, r2
         );
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3724      	adds	r7, #36	@ 0x24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
	...

0800cf94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cf98:	f3bf 8f4f 	dsb	sy
}
 800cf9c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cf9e:	4b06      	ldr	r3, [pc, #24]	@ (800cfb8 <__NVIC_SystemReset+0x24>)
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cfa6:	4904      	ldr	r1, [pc, #16]	@ (800cfb8 <__NVIC_SystemReset+0x24>)
 800cfa8:	4b04      	ldr	r3, [pc, #16]	@ (800cfbc <__NVIC_SystemReset+0x28>)
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cfae:	f3bf 8f4f 	dsb	sy
}
 800cfb2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cfb4:	bf00      	nop
 800cfb6:	e7fd      	b.n	800cfb4 <__NVIC_SystemReset+0x20>
 800cfb8:	e000ed00 	.word	0xe000ed00
 800cfbc:	05fa0004 	.word	0x05fa0004

0800cfc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cfd0:	d301      	bcc.n	800cfd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e00f      	b.n	800cff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cfd6:	4a0a      	ldr	r2, [pc, #40]	@ (800d000 <SysTick_Config+0x40>)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cfde:	210f      	movs	r1, #15
 800cfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe4:	f7ff ff78 	bl	800ced8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cfe8:	4b05      	ldr	r3, [pc, #20]	@ (800d000 <SysTick_Config+0x40>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cfee:	4b04      	ldr	r3, [pc, #16]	@ (800d000 <SysTick_Config+0x40>)
 800cff0:	2207      	movs	r2, #7
 800cff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	e000e010 	.word	0xe000e010

0800d004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7ff ff13 	bl	800ce38 <__NVIC_SetPriorityGrouping>
}
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b086      	sub	sp, #24
 800d01e:	af00      	add	r7, sp, #0
 800d020:	4603      	mov	r3, r0
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	607a      	str	r2, [r7, #4]
 800d026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d028:	2300      	movs	r3, #0
 800d02a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d02c:	f7ff ff28 	bl	800ce80 <__NVIC_GetPriorityGrouping>
 800d030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	68b9      	ldr	r1, [r7, #8]
 800d036:	6978      	ldr	r0, [r7, #20]
 800d038:	f7ff ff78 	bl	800cf2c <NVIC_EncodePriority>
 800d03c:	4602      	mov	r2, r0
 800d03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d042:	4611      	mov	r1, r2
 800d044:	4618      	mov	r0, r3
 800d046:	f7ff ff47 	bl	800ced8 <__NVIC_SetPriority>
}
 800d04a:	bf00      	nop
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b082      	sub	sp, #8
 800d056:	af00      	add	r7, sp, #0
 800d058:	4603      	mov	r3, r0
 800d05a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d05c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff ff1b 	bl	800ce9c <__NVIC_EnableIRQ>
}
 800d066:	bf00      	nop
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800d072:	f7ff ff8f 	bl	800cf94 <__NVIC_SystemReset>

0800d076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b082      	sub	sp, #8
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff ff9e 	bl	800cfc0 <SysTick_Config>
 800d084:	4603      	mov	r3, r0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
	...

0800d090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800d098:	2300      	movs	r3, #0
 800d09a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800d09c:	f7fe f808 	bl	800b0b0 <HAL_GetTick>
 800d0a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e099      	b.n	800d1e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2202      	movs	r2, #2
 800d0b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f022 0201 	bic.w	r2, r2, #1
 800d0ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d0cc:	e00f      	b.n	800d0ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d0ce:	f7fd ffef 	bl	800b0b0 <HAL_GetTick>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	2b05      	cmp	r3, #5
 800d0da:	d908      	bls.n	800d0ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2220      	movs	r2, #32
 800d0e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e078      	b.n	800d1e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f003 0301 	and.w	r3, r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1e8      	bne.n	800d0ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	4b38      	ldr	r3, [pc, #224]	@ (800d1e8 <HAL_DMA_Init+0x158>)
 800d108:	4013      	ands	r3, r2
 800d10a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d11a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6a1b      	ldr	r3, [r3, #32]
 800d138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d144:	2b04      	cmp	r3, #4
 800d146:	d107      	bne.n	800d158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d150:	4313      	orrs	r3, r2
 800d152:	697a      	ldr	r2, [r7, #20]
 800d154:	4313      	orrs	r3, r2
 800d156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	f023 0307 	bic.w	r3, r3, #7
 800d16e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	4313      	orrs	r3, r2
 800d178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d17e:	2b04      	cmp	r3, #4
 800d180:	d117      	bne.n	800d1b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	4313      	orrs	r3, r2
 800d18a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00e      	beq.n	800d1b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 fb01 	bl	800d79c <DMA_CheckFifoParam>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d008      	beq.n	800d1b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2240      	movs	r2, #64	@ 0x40
 800d1a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e016      	b.n	800d1e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 fab8 	bl	800d730 <DMA_CalcBaseAndBitshift>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1c8:	223f      	movs	r2, #63	@ 0x3f
 800d1ca:	409a      	lsls	r2, r3
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3718      	adds	r7, #24
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	f010803f 	.word	0xf010803f

0800d1ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d101      	bne.n	800d212 <HAL_DMA_Start_IT+0x26>
 800d20e:	2302      	movs	r3, #2
 800d210:	e040      	b.n	800d294 <HAL_DMA_Start_IT+0xa8>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b01      	cmp	r3, #1
 800d224:	d12f      	bne.n	800d286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2202      	movs	r2, #2
 800d22a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	68b9      	ldr	r1, [r7, #8]
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f000 fa4a 	bl	800d6d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d244:	223f      	movs	r2, #63	@ 0x3f
 800d246:	409a      	lsls	r2, r3
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f042 0216 	orr.w	r2, r2, #22
 800d25a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f042 0208 	orr.w	r2, r2, #8
 800d272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f042 0201 	orr.w	r2, r2, #1
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	e005      	b.n	800d292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800d28e:	2302      	movs	r3, #2
 800d290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800d292:	7dfb      	ldrb	r3, [r7, #23]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3718      	adds	r7, #24
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d2aa:	f7fd ff01 	bl	800b0b0 <HAL_GetTick>
 800d2ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d008      	beq.n	800d2ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2280      	movs	r2, #128	@ 0x80
 800d2c0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e052      	b.n	800d374 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f022 0216 	bic.w	r2, r2, #22
 800d2dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	695a      	ldr	r2, [r3, #20]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d2ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d103      	bne.n	800d2fe <HAL_DMA_Abort+0x62>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d007      	beq.n	800d30e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f022 0208 	bic.w	r2, r2, #8
 800d30c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f022 0201 	bic.w	r2, r2, #1
 800d31c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d31e:	e013      	b.n	800d348 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d320:	f7fd fec6 	bl	800b0b0 <HAL_GetTick>
 800d324:	4602      	mov	r2, r0
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	2b05      	cmp	r3, #5
 800d32c:	d90c      	bls.n	800d348 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2220      	movs	r2, #32
 800d332:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2203      	movs	r2, #3
 800d338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e015      	b.n	800d374 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1e4      	bne.n	800d320 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d35a:	223f      	movs	r2, #63	@ 0x3f
 800d35c:	409a      	lsls	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2201      	movs	r2, #1
 800d366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d004      	beq.n	800d39a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2280      	movs	r2, #128	@ 0x80
 800d394:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e00c      	b.n	800d3b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2205      	movs	r2, #5
 800d39e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f022 0201 	bic.w	r2, r2, #1
 800d3b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d3cc:	4b8e      	ldr	r3, [pc, #568]	@ (800d608 <HAL_DMA_IRQHandler+0x248>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a8e      	ldr	r2, [pc, #568]	@ (800d60c <HAL_DMA_IRQHandler+0x24c>)
 800d3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d6:	0a9b      	lsrs	r3, r3, #10
 800d3d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3ea:	2208      	movs	r2, #8
 800d3ec:	409a      	lsls	r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	4013      	ands	r3, r2
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d01a      	beq.n	800d42c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 0304 	and.w	r3, r3, #4
 800d400:	2b00      	cmp	r3, #0
 800d402:	d013      	beq.n	800d42c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f022 0204 	bic.w	r2, r2, #4
 800d412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d418:	2208      	movs	r2, #8
 800d41a:	409a      	lsls	r2, r3
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d424:	f043 0201 	orr.w	r2, r3, #1
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d430:	2201      	movs	r2, #1
 800d432:	409a      	lsls	r2, r3
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4013      	ands	r3, r2
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d012      	beq.n	800d462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	695b      	ldr	r3, [r3, #20]
 800d442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00b      	beq.n	800d462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d44e:	2201      	movs	r2, #1
 800d450:	409a      	lsls	r2, r3
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d45a:	f043 0202 	orr.w	r2, r3, #2
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d466:	2204      	movs	r2, #4
 800d468:	409a      	lsls	r2, r3
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	4013      	ands	r3, r2
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d012      	beq.n	800d498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 0302 	and.w	r3, r3, #2
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00b      	beq.n	800d498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d484:	2204      	movs	r2, #4
 800d486:	409a      	lsls	r2, r3
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d490:	f043 0204 	orr.w	r2, r3, #4
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d49c:	2210      	movs	r2, #16
 800d49e:	409a      	lsls	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d043      	beq.n	800d530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f003 0308 	and.w	r3, r3, #8
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d03c      	beq.n	800d530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4ba:	2210      	movs	r2, #16
 800d4bc:	409a      	lsls	r2, r3
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d018      	beq.n	800d502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d108      	bne.n	800d4f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d024      	beq.n	800d530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	4798      	blx	r3
 800d4ee:	e01f      	b.n	800d530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d01b      	beq.n	800d530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	4798      	blx	r3
 800d500:	e016      	b.n	800d530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d107      	bne.n	800d520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f022 0208 	bic.w	r2, r2, #8
 800d51e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d524:	2b00      	cmp	r3, #0
 800d526:	d003      	beq.n	800d530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d534:	2220      	movs	r2, #32
 800d536:	409a      	lsls	r2, r3
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	4013      	ands	r3, r2
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f000 808f 	beq.w	800d660 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f003 0310 	and.w	r3, r3, #16
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 8087 	beq.w	800d660 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d556:	2220      	movs	r2, #32
 800d558:	409a      	lsls	r2, r3
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b05      	cmp	r3, #5
 800d568:	d136      	bne.n	800d5d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f022 0216 	bic.w	r2, r2, #22
 800d578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	695a      	ldr	r2, [r3, #20]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d103      	bne.n	800d59a <HAL_DMA_IRQHandler+0x1da>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d596:	2b00      	cmp	r3, #0
 800d598:	d007      	beq.n	800d5aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f022 0208 	bic.w	r2, r2, #8
 800d5a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5ae:	223f      	movs	r2, #63	@ 0x3f
 800d5b0:	409a      	lsls	r2, r3
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d07e      	beq.n	800d6cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	4798      	blx	r3
        }
        return;
 800d5d6:	e079      	b.n	800d6cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d01d      	beq.n	800d622 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10d      	bne.n	800d610 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d031      	beq.n	800d660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	4798      	blx	r3
 800d604:	e02c      	b.n	800d660 <HAL_DMA_IRQHandler+0x2a0>
 800d606:	bf00      	nop
 800d608:	200002b8 	.word	0x200002b8
 800d60c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d023      	beq.n	800d660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	4798      	blx	r3
 800d620:	e01e      	b.n	800d660 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10f      	bne.n	800d650 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f022 0210 	bic.w	r2, r2, #16
 800d63e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d654:	2b00      	cmp	r3, #0
 800d656:	d003      	beq.n	800d660 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d664:	2b00      	cmp	r3, #0
 800d666:	d032      	beq.n	800d6ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	2b00      	cmp	r3, #0
 800d672:	d022      	beq.n	800d6ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2205      	movs	r2, #5
 800d678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f022 0201 	bic.w	r2, r2, #1
 800d68a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	3301      	adds	r3, #1
 800d690:	60bb      	str	r3, [r7, #8]
 800d692:	697a      	ldr	r2, [r7, #20]
 800d694:	429a      	cmp	r2, r3
 800d696:	d307      	bcc.n	800d6a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f003 0301 	and.w	r3, r3, #1
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1f2      	bne.n	800d68c <HAL_DMA_IRQHandler+0x2cc>
 800d6a6:	e000      	b.n	800d6aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 800d6a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d005      	beq.n	800d6ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	4798      	blx	r3
 800d6ca:	e000      	b.n	800d6ce <HAL_DMA_IRQHandler+0x30e>
        return;
 800d6cc:	bf00      	nop
    }
  }
}
 800d6ce:	3718      	adds	r7, #24
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d6f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	2b40      	cmp	r3, #64	@ 0x40
 800d700:	d108      	bne.n	800d714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d712:	e007      	b.n	800d724 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	60da      	str	r2, [r3, #12]
}
 800d724:	bf00      	nop
 800d726:	3714      	adds	r7, #20
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	3b10      	subs	r3, #16
 800d740:	4a14      	ldr	r2, [pc, #80]	@ (800d794 <DMA_CalcBaseAndBitshift+0x64>)
 800d742:	fba2 2303 	umull	r2, r3, r2, r3
 800d746:	091b      	lsrs	r3, r3, #4
 800d748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d74a:	4a13      	ldr	r2, [pc, #76]	@ (800d798 <DMA_CalcBaseAndBitshift+0x68>)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	4413      	add	r3, r2
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	461a      	mov	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d909      	bls.n	800d772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800d766:	f023 0303 	bic.w	r3, r3, #3
 800d76a:	1d1a      	adds	r2, r3, #4
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	659a      	str	r2, [r3, #88]	@ 0x58
 800d770:	e007      	b.n	800d782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800d77a:	f023 0303 	bic.w	r3, r3, #3
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800d786:	4618      	mov	r0, r3
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	aaaaaaab 	.word	0xaaaaaaab
 800d798:	08015d40 	.word	0x08015d40

0800d79c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d11f      	bne.n	800d7f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2b03      	cmp	r3, #3
 800d7ba:	d856      	bhi.n	800d86a <DMA_CheckFifoParam+0xce>
 800d7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d7c4 <DMA_CheckFifoParam+0x28>)
 800d7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c2:	bf00      	nop
 800d7c4:	0800d7d5 	.word	0x0800d7d5
 800d7c8:	0800d7e7 	.word	0x0800d7e7
 800d7cc:	0800d7d5 	.word	0x0800d7d5
 800d7d0:	0800d86b 	.word	0x0800d86b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d046      	beq.n	800d86e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d7e4:	e043      	b.n	800d86e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d7ee:	d140      	bne.n	800d872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d7f4:	e03d      	b.n	800d872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7fe:	d121      	bne.n	800d844 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2b03      	cmp	r3, #3
 800d804:	d837      	bhi.n	800d876 <DMA_CheckFifoParam+0xda>
 800d806:	a201      	add	r2, pc, #4	@ (adr r2, 800d80c <DMA_CheckFifoParam+0x70>)
 800d808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d80c:	0800d81d 	.word	0x0800d81d
 800d810:	0800d823 	.word	0x0800d823
 800d814:	0800d81d 	.word	0x0800d81d
 800d818:	0800d835 	.word	0x0800d835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	73fb      	strb	r3, [r7, #15]
      break;
 800d820:	e030      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d826:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d025      	beq.n	800d87a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d832:	e022      	b.n	800d87a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d838:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d83c:	d11f      	bne.n	800d87e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800d83e:	2301      	movs	r3, #1
 800d840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d842:	e01c      	b.n	800d87e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b02      	cmp	r3, #2
 800d848:	d903      	bls.n	800d852 <DMA_CheckFifoParam+0xb6>
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	2b03      	cmp	r3, #3
 800d84e:	d003      	beq.n	800d858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d850:	e018      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	73fb      	strb	r3, [r7, #15]
      break;
 800d856:	e015      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d85c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00e      	beq.n	800d882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	73fb      	strb	r3, [r7, #15]
      break;
 800d868:	e00b      	b.n	800d882 <DMA_CheckFifoParam+0xe6>
      break;
 800d86a:	bf00      	nop
 800d86c:	e00a      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
      break;
 800d86e:	bf00      	nop
 800d870:	e008      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
      break;
 800d872:	bf00      	nop
 800d874:	e006      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
      break;
 800d876:	bf00      	nop
 800d878:	e004      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
      break;
 800d87a:	bf00      	nop
 800d87c:	e002      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
      break;   
 800d87e:	bf00      	nop
 800d880:	e000      	b.n	800d884 <DMA_CheckFifoParam+0xe8>
      break;
 800d882:	bf00      	nop
    }
  } 
  
  return status; 
 800d884:	7bfb      	ldrb	r3, [r7, #15]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop

0800d894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d894:	b480      	push	{r7}
 800d896:	b089      	sub	sp, #36	@ 0x24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	61fb      	str	r3, [r7, #28]
 800d8ae:	e165      	b.n	800db7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	f040 8154 	bne.w	800db76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	f003 0303 	and.w	r3, r3, #3
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d005      	beq.n	800d8e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	d130      	bne.n	800d948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	2203      	movs	r2, #3
 800d8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f6:	43db      	mvns	r3, r3
 800d8f8:	69ba      	ldr	r2, [r7, #24]
 800d8fa:	4013      	ands	r3, r2
 800d8fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	68da      	ldr	r2, [r3, #12]
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	005b      	lsls	r3, r3, #1
 800d906:	fa02 f303 	lsl.w	r3, r2, r3
 800d90a:	69ba      	ldr	r2, [r7, #24]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	69ba      	ldr	r2, [r7, #24]
 800d914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d91c:	2201      	movs	r2, #1
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	fa02 f303 	lsl.w	r3, r2, r3
 800d924:	43db      	mvns	r3, r3
 800d926:	69ba      	ldr	r2, [r7, #24]
 800d928:	4013      	ands	r3, r2
 800d92a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	091b      	lsrs	r3, r3, #4
 800d932:	f003 0201 	and.w	r2, r3, #1
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	fa02 f303 	lsl.w	r3, r2, r3
 800d93c:	69ba      	ldr	r2, [r7, #24]
 800d93e:	4313      	orrs	r3, r2
 800d940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	f003 0303 	and.w	r3, r3, #3
 800d950:	2b03      	cmp	r3, #3
 800d952:	d017      	beq.n	800d984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	2203      	movs	r2, #3
 800d960:	fa02 f303 	lsl.w	r3, r2, r3
 800d964:	43db      	mvns	r3, r3
 800d966:	69ba      	ldr	r2, [r7, #24]
 800d968:	4013      	ands	r3, r2
 800d96a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	689a      	ldr	r2, [r3, #8]
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	fa02 f303 	lsl.w	r3, r2, r3
 800d978:	69ba      	ldr	r2, [r7, #24]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	69ba      	ldr	r2, [r7, #24]
 800d982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	f003 0303 	and.w	r3, r3, #3
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d123      	bne.n	800d9d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	08da      	lsrs	r2, r3, #3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	3208      	adds	r2, #8
 800d998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d99c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	f003 0307 	and.w	r3, r3, #7
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	220f      	movs	r2, #15
 800d9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ac:	43db      	mvns	r3, r3
 800d9ae:	69ba      	ldr	r2, [r7, #24]
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	691a      	ldr	r2, [r3, #16]
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	f003 0307 	and.w	r3, r3, #7
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c4:	69ba      	ldr	r2, [r7, #24]
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	08da      	lsrs	r2, r3, #3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	3208      	adds	r2, #8
 800d9d2:	69b9      	ldr	r1, [r7, #24]
 800d9d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	2203      	movs	r2, #3
 800d9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9e8:	43db      	mvns	r3, r3
 800d9ea:	69ba      	ldr	r2, [r7, #24]
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	f003 0203 	and.w	r2, r3, #3
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800da00:	69ba      	ldr	r2, [r7, #24]
 800da02:	4313      	orrs	r3, r2
 800da04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	69ba      	ldr	r2, [r7, #24]
 800da0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 80ae 	beq.w	800db76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da1a:	2300      	movs	r3, #0
 800da1c:	60fb      	str	r3, [r7, #12]
 800da1e:	4b5d      	ldr	r3, [pc, #372]	@ (800db94 <HAL_GPIO_Init+0x300>)
 800da20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da22:	4a5c      	ldr	r2, [pc, #368]	@ (800db94 <HAL_GPIO_Init+0x300>)
 800da24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da28:	6453      	str	r3, [r2, #68]	@ 0x44
 800da2a:	4b5a      	ldr	r3, [pc, #360]	@ (800db94 <HAL_GPIO_Init+0x300>)
 800da2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da32:	60fb      	str	r3, [r7, #12]
 800da34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800da36:	4a58      	ldr	r2, [pc, #352]	@ (800db98 <HAL_GPIO_Init+0x304>)
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	089b      	lsrs	r3, r3, #2
 800da3c:	3302      	adds	r3, #2
 800da3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	f003 0303 	and.w	r3, r3, #3
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	220f      	movs	r2, #15
 800da4e:	fa02 f303 	lsl.w	r3, r2, r3
 800da52:	43db      	mvns	r3, r3
 800da54:	69ba      	ldr	r2, [r7, #24]
 800da56:	4013      	ands	r3, r2
 800da58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a4f      	ldr	r2, [pc, #316]	@ (800db9c <HAL_GPIO_Init+0x308>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d025      	beq.n	800daae <HAL_GPIO_Init+0x21a>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a4e      	ldr	r2, [pc, #312]	@ (800dba0 <HAL_GPIO_Init+0x30c>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d01f      	beq.n	800daaa <HAL_GPIO_Init+0x216>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4a4d      	ldr	r2, [pc, #308]	@ (800dba4 <HAL_GPIO_Init+0x310>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d019      	beq.n	800daa6 <HAL_GPIO_Init+0x212>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a4c      	ldr	r2, [pc, #304]	@ (800dba8 <HAL_GPIO_Init+0x314>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d013      	beq.n	800daa2 <HAL_GPIO_Init+0x20e>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a4b      	ldr	r2, [pc, #300]	@ (800dbac <HAL_GPIO_Init+0x318>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d00d      	beq.n	800da9e <HAL_GPIO_Init+0x20a>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a4a      	ldr	r2, [pc, #296]	@ (800dbb0 <HAL_GPIO_Init+0x31c>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d007      	beq.n	800da9a <HAL_GPIO_Init+0x206>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a49      	ldr	r2, [pc, #292]	@ (800dbb4 <HAL_GPIO_Init+0x320>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d101      	bne.n	800da96 <HAL_GPIO_Init+0x202>
 800da92:	2306      	movs	r3, #6
 800da94:	e00c      	b.n	800dab0 <HAL_GPIO_Init+0x21c>
 800da96:	2307      	movs	r3, #7
 800da98:	e00a      	b.n	800dab0 <HAL_GPIO_Init+0x21c>
 800da9a:	2305      	movs	r3, #5
 800da9c:	e008      	b.n	800dab0 <HAL_GPIO_Init+0x21c>
 800da9e:	2304      	movs	r3, #4
 800daa0:	e006      	b.n	800dab0 <HAL_GPIO_Init+0x21c>
 800daa2:	2303      	movs	r3, #3
 800daa4:	e004      	b.n	800dab0 <HAL_GPIO_Init+0x21c>
 800daa6:	2302      	movs	r3, #2
 800daa8:	e002      	b.n	800dab0 <HAL_GPIO_Init+0x21c>
 800daaa:	2301      	movs	r3, #1
 800daac:	e000      	b.n	800dab0 <HAL_GPIO_Init+0x21c>
 800daae:	2300      	movs	r3, #0
 800dab0:	69fa      	ldr	r2, [r7, #28]
 800dab2:	f002 0203 	and.w	r2, r2, #3
 800dab6:	0092      	lsls	r2, r2, #2
 800dab8:	4093      	lsls	r3, r2
 800daba:	69ba      	ldr	r2, [r7, #24]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dac0:	4935      	ldr	r1, [pc, #212]	@ (800db98 <HAL_GPIO_Init+0x304>)
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	089b      	lsrs	r3, r3, #2
 800dac6:	3302      	adds	r3, #2
 800dac8:	69ba      	ldr	r2, [r7, #24]
 800daca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800dace:	4b3a      	ldr	r3, [pc, #232]	@ (800dbb8 <HAL_GPIO_Init+0x324>)
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	43db      	mvns	r3, r3
 800dad8:	69ba      	ldr	r2, [r7, #24]
 800dada:	4013      	ands	r3, r2
 800dadc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d003      	beq.n	800daf2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800daea:	69ba      	ldr	r2, [r7, #24]
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	4313      	orrs	r3, r2
 800daf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800daf2:	4a31      	ldr	r2, [pc, #196]	@ (800dbb8 <HAL_GPIO_Init+0x324>)
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800daf8:	4b2f      	ldr	r3, [pc, #188]	@ (800dbb8 <HAL_GPIO_Init+0x324>)
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	43db      	mvns	r3, r3
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	4013      	ands	r3, r2
 800db06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800db14:	69ba      	ldr	r2, [r7, #24]
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	4313      	orrs	r3, r2
 800db1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800db1c:	4a26      	ldr	r2, [pc, #152]	@ (800dbb8 <HAL_GPIO_Init+0x324>)
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800db22:	4b25      	ldr	r3, [pc, #148]	@ (800dbb8 <HAL_GPIO_Init+0x324>)
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	43db      	mvns	r3, r3
 800db2c:	69ba      	ldr	r2, [r7, #24]
 800db2e:	4013      	ands	r3, r2
 800db30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d003      	beq.n	800db46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800db3e:	69ba      	ldr	r2, [r7, #24]
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	4313      	orrs	r3, r2
 800db44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800db46:	4a1c      	ldr	r2, [pc, #112]	@ (800dbb8 <HAL_GPIO_Init+0x324>)
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800db4c:	4b1a      	ldr	r3, [pc, #104]	@ (800dbb8 <HAL_GPIO_Init+0x324>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	43db      	mvns	r3, r3
 800db56:	69ba      	ldr	r2, [r7, #24]
 800db58:	4013      	ands	r3, r2
 800db5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800db64:	2b00      	cmp	r3, #0
 800db66:	d003      	beq.n	800db70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800db68:	69ba      	ldr	r2, [r7, #24]
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800db70:	4a11      	ldr	r2, [pc, #68]	@ (800dbb8 <HAL_GPIO_Init+0x324>)
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	3301      	adds	r3, #1
 800db7a:	61fb      	str	r3, [r7, #28]
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	2b0f      	cmp	r3, #15
 800db80:	f67f ae96 	bls.w	800d8b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800db84:	bf00      	nop
 800db86:	bf00      	nop
 800db88:	3724      	adds	r7, #36	@ 0x24
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	40023800 	.word	0x40023800
 800db98:	40013800 	.word	0x40013800
 800db9c:	40020000 	.word	0x40020000
 800dba0:	40020400 	.word	0x40020400
 800dba4:	40020800 	.word	0x40020800
 800dba8:	40020c00 	.word	0x40020c00
 800dbac:	40021000 	.word	0x40021000
 800dbb0:	40021400 	.word	0x40021400
 800dbb4:	40021800 	.word	0x40021800
 800dbb8:	40013c00 	.word	0x40013c00

0800dbbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	807b      	strh	r3, [r7, #2]
 800dbc8:	4613      	mov	r3, r2
 800dbca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800dbcc:	787b      	ldrb	r3, [r7, #1]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d003      	beq.n	800dbda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dbd2:	887a      	ldrh	r2, [r7, #2]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800dbd8:	e003      	b.n	800dbe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800dbda:	887b      	ldrh	r3, [r7, #2]
 800dbdc:	041a      	lsls	r2, r3, #16
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	619a      	str	r2, [r3, #24]
}
 800dbe2:	bf00      	nop
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr
	...

0800dbf0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	603b      	str	r3, [r7, #0]
 800dbfe:	4b20      	ldr	r3, [pc, #128]	@ (800dc80 <HAL_PWREx_EnableOverDrive+0x90>)
 800dc00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc02:	4a1f      	ldr	r2, [pc, #124]	@ (800dc80 <HAL_PWREx_EnableOverDrive+0x90>)
 800dc04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dc08:	6413      	str	r3, [r2, #64]	@ 0x40
 800dc0a:	4b1d      	ldr	r3, [pc, #116]	@ (800dc80 <HAL_PWREx_EnableOverDrive+0x90>)
 800dc0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dc12:	603b      	str	r3, [r7, #0]
 800dc14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800dc16:	4b1b      	ldr	r3, [pc, #108]	@ (800dc84 <HAL_PWREx_EnableOverDrive+0x94>)
 800dc18:	2201      	movs	r2, #1
 800dc1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dc1c:	f7fd fa48 	bl	800b0b0 <HAL_GetTick>
 800dc20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dc22:	e009      	b.n	800dc38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dc24:	f7fd fa44 	bl	800b0b0 <HAL_GetTick>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc32:	d901      	bls.n	800dc38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800dc34:	2303      	movs	r3, #3
 800dc36:	e01f      	b.n	800dc78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dc38:	4b13      	ldr	r3, [pc, #76]	@ (800dc88 <HAL_PWREx_EnableOverDrive+0x98>)
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dc40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc44:	d1ee      	bne.n	800dc24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800dc46:	4b11      	ldr	r3, [pc, #68]	@ (800dc8c <HAL_PWREx_EnableOverDrive+0x9c>)
 800dc48:	2201      	movs	r2, #1
 800dc4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dc4c:	f7fd fa30 	bl	800b0b0 <HAL_GetTick>
 800dc50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dc52:	e009      	b.n	800dc68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dc54:	f7fd fa2c 	bl	800b0b0 <HAL_GetTick>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc62:	d901      	bls.n	800dc68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800dc64:	2303      	movs	r3, #3
 800dc66:	e007      	b.n	800dc78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dc68:	4b07      	ldr	r3, [pc, #28]	@ (800dc88 <HAL_PWREx_EnableOverDrive+0x98>)
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc74:	d1ee      	bne.n	800dc54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	40023800 	.word	0x40023800
 800dc84:	420e0040 	.word	0x420e0040
 800dc88:	40007000 	.word	0x40007000
 800dc8c:	420e0044 	.word	0x420e0044

0800dc90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e0cc      	b.n	800de3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dca4:	4b68      	ldr	r3, [pc, #416]	@ (800de48 <HAL_RCC_ClockConfig+0x1b8>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f003 030f 	and.w	r3, r3, #15
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d90c      	bls.n	800dccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcb2:	4b65      	ldr	r3, [pc, #404]	@ (800de48 <HAL_RCC_ClockConfig+0x1b8>)
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	b2d2      	uxtb	r2, r2
 800dcb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcba:	4b63      	ldr	r3, [pc, #396]	@ (800de48 <HAL_RCC_ClockConfig+0x1b8>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f003 030f 	and.w	r3, r3, #15
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d001      	beq.n	800dccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e0b8      	b.n	800de3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 0302 	and.w	r3, r3, #2
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d020      	beq.n	800dd1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f003 0304 	and.w	r3, r3, #4
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d005      	beq.n	800dcf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dce4:	4b59      	ldr	r3, [pc, #356]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	4a58      	ldr	r2, [pc, #352]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dcea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800dcee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f003 0308 	and.w	r3, r3, #8
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d005      	beq.n	800dd08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dcfc:	4b53      	ldr	r3, [pc, #332]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	4a52      	ldr	r2, [pc, #328]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dd02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800dd06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dd08:	4b50      	ldr	r3, [pc, #320]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	494d      	ldr	r1, [pc, #308]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dd16:	4313      	orrs	r3, r2
 800dd18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f003 0301 	and.w	r3, r3, #1
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d044      	beq.n	800ddb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d107      	bne.n	800dd3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd2e:	4b47      	ldr	r3, [pc, #284]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d119      	bne.n	800dd6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e07f      	b.n	800de3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d003      	beq.n	800dd4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dd4a:	2b03      	cmp	r3, #3
 800dd4c:	d107      	bne.n	800dd5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dd4e:	4b3f      	ldr	r3, [pc, #252]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d109      	bne.n	800dd6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e06f      	b.n	800de3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd5e:	4b3b      	ldr	r3, [pc, #236]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f003 0302 	and.w	r3, r3, #2
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e067      	b.n	800de3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dd6e:	4b37      	ldr	r3, [pc, #220]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f023 0203 	bic.w	r2, r3, #3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	4934      	ldr	r1, [pc, #208]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dd80:	f7fd f996 	bl	800b0b0 <HAL_GetTick>
 800dd84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd86:	e00a      	b.n	800dd9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dd88:	f7fd f992 	bl	800b0b0 <HAL_GetTick>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d901      	bls.n	800dd9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	e04f      	b.n	800de3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dd9e:	4b2b      	ldr	r3, [pc, #172]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	f003 020c 	and.w	r2, r3, #12
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d1eb      	bne.n	800dd88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ddb0:	4b25      	ldr	r3, [pc, #148]	@ (800de48 <HAL_RCC_ClockConfig+0x1b8>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 030f 	and.w	r3, r3, #15
 800ddb8:	683a      	ldr	r2, [r7, #0]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d20c      	bcs.n	800ddd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ddbe:	4b22      	ldr	r3, [pc, #136]	@ (800de48 <HAL_RCC_ClockConfig+0x1b8>)
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	b2d2      	uxtb	r2, r2
 800ddc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ddc6:	4b20      	ldr	r3, [pc, #128]	@ (800de48 <HAL_RCC_ClockConfig+0x1b8>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f003 030f 	and.w	r3, r3, #15
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d001      	beq.n	800ddd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e032      	b.n	800de3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f003 0304 	and.w	r3, r3, #4
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d008      	beq.n	800ddf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dde4:	4b19      	ldr	r3, [pc, #100]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	4916      	ldr	r1, [pc, #88]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f003 0308 	and.w	r3, r3, #8
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d009      	beq.n	800de16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800de02:	4b12      	ldr	r3, [pc, #72]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	00db      	lsls	r3, r3, #3
 800de10:	490e      	ldr	r1, [pc, #56]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800de12:	4313      	orrs	r3, r2
 800de14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800de16:	f000 f855 	bl	800dec4 <HAL_RCC_GetSysClockFreq>
 800de1a:	4602      	mov	r2, r0
 800de1c:	4b0b      	ldr	r3, [pc, #44]	@ (800de4c <HAL_RCC_ClockConfig+0x1bc>)
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	091b      	lsrs	r3, r3, #4
 800de22:	f003 030f 	and.w	r3, r3, #15
 800de26:	490a      	ldr	r1, [pc, #40]	@ (800de50 <HAL_RCC_ClockConfig+0x1c0>)
 800de28:	5ccb      	ldrb	r3, [r1, r3]
 800de2a:	fa22 f303 	lsr.w	r3, r2, r3
 800de2e:	4a09      	ldr	r2, [pc, #36]	@ (800de54 <HAL_RCC_ClockConfig+0x1c4>)
 800de30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800de32:	4b09      	ldr	r3, [pc, #36]	@ (800de58 <HAL_RCC_ClockConfig+0x1c8>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4618      	mov	r0, r3
 800de38:	f7fd f8f6 	bl	800b028 <HAL_InitTick>

  return HAL_OK;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	40023c00 	.word	0x40023c00
 800de4c:	40023800 	.word	0x40023800
 800de50:	08015d28 	.word	0x08015d28
 800de54:	200002b8 	.word	0x200002b8
 800de58:	200002bc 	.word	0x200002bc

0800de5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800de5c:	b480      	push	{r7}
 800de5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800de60:	4b03      	ldr	r3, [pc, #12]	@ (800de70 <HAL_RCC_GetHCLKFreq+0x14>)
 800de62:	681b      	ldr	r3, [r3, #0]
}
 800de64:	4618      	mov	r0, r3
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	200002b8 	.word	0x200002b8

0800de74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800de78:	f7ff fff0 	bl	800de5c <HAL_RCC_GetHCLKFreq>
 800de7c:	4602      	mov	r2, r0
 800de7e:	4b05      	ldr	r3, [pc, #20]	@ (800de94 <HAL_RCC_GetPCLK1Freq+0x20>)
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	0a9b      	lsrs	r3, r3, #10
 800de84:	f003 0307 	and.w	r3, r3, #7
 800de88:	4903      	ldr	r1, [pc, #12]	@ (800de98 <HAL_RCC_GetPCLK1Freq+0x24>)
 800de8a:	5ccb      	ldrb	r3, [r1, r3]
 800de8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800de90:	4618      	mov	r0, r3
 800de92:	bd80      	pop	{r7, pc}
 800de94:	40023800 	.word	0x40023800
 800de98:	08015d38 	.word	0x08015d38

0800de9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dea0:	f7ff ffdc 	bl	800de5c <HAL_RCC_GetHCLKFreq>
 800dea4:	4602      	mov	r2, r0
 800dea6:	4b05      	ldr	r3, [pc, #20]	@ (800debc <HAL_RCC_GetPCLK2Freq+0x20>)
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	0b5b      	lsrs	r3, r3, #13
 800deac:	f003 0307 	and.w	r3, r3, #7
 800deb0:	4903      	ldr	r1, [pc, #12]	@ (800dec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800deb2:	5ccb      	ldrb	r3, [r1, r3]
 800deb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800deb8:	4618      	mov	r0, r3
 800deba:	bd80      	pop	{r7, pc}
 800debc:	40023800 	.word	0x40023800
 800dec0:	08015d38 	.word	0x08015d38

0800dec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dec8:	b0ae      	sub	sp, #184	@ 0xb8
 800deca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800decc:	2300      	movs	r3, #0
 800dece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800ded8:	2300      	movs	r3, #0
 800deda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800dede:	2300      	movs	r3, #0
 800dee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800dee4:	2300      	movs	r3, #0
 800dee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800deea:	4bcb      	ldr	r3, [pc, #812]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	f003 030c 	and.w	r3, r3, #12
 800def2:	2b0c      	cmp	r3, #12
 800def4:	f200 8206 	bhi.w	800e304 <HAL_RCC_GetSysClockFreq+0x440>
 800def8:	a201      	add	r2, pc, #4	@ (adr r2, 800df00 <HAL_RCC_GetSysClockFreq+0x3c>)
 800defa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defe:	bf00      	nop
 800df00:	0800df35 	.word	0x0800df35
 800df04:	0800e305 	.word	0x0800e305
 800df08:	0800e305 	.word	0x0800e305
 800df0c:	0800e305 	.word	0x0800e305
 800df10:	0800df3d 	.word	0x0800df3d
 800df14:	0800e305 	.word	0x0800e305
 800df18:	0800e305 	.word	0x0800e305
 800df1c:	0800e305 	.word	0x0800e305
 800df20:	0800df45 	.word	0x0800df45
 800df24:	0800e305 	.word	0x0800e305
 800df28:	0800e305 	.word	0x0800e305
 800df2c:	0800e305 	.word	0x0800e305
 800df30:	0800e135 	.word	0x0800e135
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800df34:	4bb9      	ldr	r3, [pc, #740]	@ (800e21c <HAL_RCC_GetSysClockFreq+0x358>)
 800df36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800df3a:	e1e7      	b.n	800e30c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800df3c:	4bb8      	ldr	r3, [pc, #736]	@ (800e220 <HAL_RCC_GetSysClockFreq+0x35c>)
 800df3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800df42:	e1e3      	b.n	800e30c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800df44:	4bb4      	ldr	r3, [pc, #720]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800df50:	4bb1      	ldr	r3, [pc, #708]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d071      	beq.n	800e040 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800df5c:	4bae      	ldr	r3, [pc, #696]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	099b      	lsrs	r3, r3, #6
 800df62:	2200      	movs	r2, #0
 800df64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800df68:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800df6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800df70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800df78:	2300      	movs	r3, #0
 800df7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800df82:	4622      	mov	r2, r4
 800df84:	462b      	mov	r3, r5
 800df86:	f04f 0000 	mov.w	r0, #0
 800df8a:	f04f 0100 	mov.w	r1, #0
 800df8e:	0159      	lsls	r1, r3, #5
 800df90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800df94:	0150      	lsls	r0, r2, #5
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4621      	mov	r1, r4
 800df9c:	1a51      	subs	r1, r2, r1
 800df9e:	6439      	str	r1, [r7, #64]	@ 0x40
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	eb63 0301 	sbc.w	r3, r3, r1
 800dfa6:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfa8:	f04f 0200 	mov.w	r2, #0
 800dfac:	f04f 0300 	mov.w	r3, #0
 800dfb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800dfb4:	4649      	mov	r1, r9
 800dfb6:	018b      	lsls	r3, r1, #6
 800dfb8:	4641      	mov	r1, r8
 800dfba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dfbe:	4641      	mov	r1, r8
 800dfc0:	018a      	lsls	r2, r1, #6
 800dfc2:	4641      	mov	r1, r8
 800dfc4:	1a51      	subs	r1, r2, r1
 800dfc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800dfc8:	4649      	mov	r1, r9
 800dfca:	eb63 0301 	sbc.w	r3, r3, r1
 800dfce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dfd0:	f04f 0200 	mov.w	r2, #0
 800dfd4:	f04f 0300 	mov.w	r3, #0
 800dfd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800dfdc:	4649      	mov	r1, r9
 800dfde:	00cb      	lsls	r3, r1, #3
 800dfe0:	4641      	mov	r1, r8
 800dfe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dfe6:	4641      	mov	r1, r8
 800dfe8:	00ca      	lsls	r2, r1, #3
 800dfea:	4610      	mov	r0, r2
 800dfec:	4619      	mov	r1, r3
 800dfee:	4603      	mov	r3, r0
 800dff0:	4622      	mov	r2, r4
 800dff2:	189b      	adds	r3, r3, r2
 800dff4:	633b      	str	r3, [r7, #48]	@ 0x30
 800dff6:	462b      	mov	r3, r5
 800dff8:	460a      	mov	r2, r1
 800dffa:	eb42 0303 	adc.w	r3, r2, r3
 800dffe:	637b      	str	r3, [r7, #52]	@ 0x34
 800e000:	f04f 0200 	mov.w	r2, #0
 800e004:	f04f 0300 	mov.w	r3, #0
 800e008:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e00c:	4629      	mov	r1, r5
 800e00e:	024b      	lsls	r3, r1, #9
 800e010:	4621      	mov	r1, r4
 800e012:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e016:	4621      	mov	r1, r4
 800e018:	024a      	lsls	r2, r1, #9
 800e01a:	4610      	mov	r0, r2
 800e01c:	4619      	mov	r1, r3
 800e01e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e022:	2200      	movs	r2, #0
 800e024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e028:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e02c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e030:	f7f2 fe4a 	bl	8000cc8 <__aeabi_uldivmod>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	4613      	mov	r3, r2
 800e03a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e03e:	e067      	b.n	800e110 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e040:	4b75      	ldr	r3, [pc, #468]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	099b      	lsrs	r3, r3, #6
 800e046:	2200      	movs	r2, #0
 800e048:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e04c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e050:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e05a:	2300      	movs	r3, #0
 800e05c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e05e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e062:	4622      	mov	r2, r4
 800e064:	462b      	mov	r3, r5
 800e066:	f04f 0000 	mov.w	r0, #0
 800e06a:	f04f 0100 	mov.w	r1, #0
 800e06e:	0159      	lsls	r1, r3, #5
 800e070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e074:	0150      	lsls	r0, r2, #5
 800e076:	4602      	mov	r2, r0
 800e078:	460b      	mov	r3, r1
 800e07a:	4621      	mov	r1, r4
 800e07c:	1a51      	subs	r1, r2, r1
 800e07e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e080:	4629      	mov	r1, r5
 800e082:	eb63 0301 	sbc.w	r3, r3, r1
 800e086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e088:	f04f 0200 	mov.w	r2, #0
 800e08c:	f04f 0300 	mov.w	r3, #0
 800e090:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800e094:	4649      	mov	r1, r9
 800e096:	018b      	lsls	r3, r1, #6
 800e098:	4641      	mov	r1, r8
 800e09a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e09e:	4641      	mov	r1, r8
 800e0a0:	018a      	lsls	r2, r1, #6
 800e0a2:	4641      	mov	r1, r8
 800e0a4:	ebb2 0a01 	subs.w	sl, r2, r1
 800e0a8:	4649      	mov	r1, r9
 800e0aa:	eb63 0b01 	sbc.w	fp, r3, r1
 800e0ae:	f04f 0200 	mov.w	r2, #0
 800e0b2:	f04f 0300 	mov.w	r3, #0
 800e0b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e0ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e0be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e0c2:	4692      	mov	sl, r2
 800e0c4:	469b      	mov	fp, r3
 800e0c6:	4623      	mov	r3, r4
 800e0c8:	eb1a 0303 	adds.w	r3, sl, r3
 800e0cc:	623b      	str	r3, [r7, #32]
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	eb4b 0303 	adc.w	r3, fp, r3
 800e0d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0d6:	f04f 0200 	mov.w	r2, #0
 800e0da:	f04f 0300 	mov.w	r3, #0
 800e0de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800e0e2:	4629      	mov	r1, r5
 800e0e4:	028b      	lsls	r3, r1, #10
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	028a      	lsls	r2, r1, #10
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800e0fc:	677a      	str	r2, [r7, #116]	@ 0x74
 800e0fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800e102:	f7f2 fde1 	bl	8000cc8 <__aeabi_uldivmod>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4613      	mov	r3, r2
 800e10c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800e110:	4b41      	ldr	r3, [pc, #260]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	0c1b      	lsrs	r3, r3, #16
 800e116:	f003 0303 	and.w	r3, r3, #3
 800e11a:	3301      	adds	r3, #1
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800e122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e12e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e132:	e0eb      	b.n	800e30c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e134:	4b38      	ldr	r3, [pc, #224]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e13c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e140:	4b35      	ldr	r3, [pc, #212]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d06b      	beq.n	800e224 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e14c:	4b32      	ldr	r3, [pc, #200]	@ (800e218 <HAL_RCC_GetSysClockFreq+0x354>)
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	099b      	lsrs	r3, r3, #6
 800e152:	2200      	movs	r2, #0
 800e154:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e156:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e158:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e15e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e160:	2300      	movs	r3, #0
 800e162:	667b      	str	r3, [r7, #100]	@ 0x64
 800e164:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e168:	4622      	mov	r2, r4
 800e16a:	462b      	mov	r3, r5
 800e16c:	f04f 0000 	mov.w	r0, #0
 800e170:	f04f 0100 	mov.w	r1, #0
 800e174:	0159      	lsls	r1, r3, #5
 800e176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e17a:	0150      	lsls	r0, r2, #5
 800e17c:	4602      	mov	r2, r0
 800e17e:	460b      	mov	r3, r1
 800e180:	4621      	mov	r1, r4
 800e182:	1a51      	subs	r1, r2, r1
 800e184:	61b9      	str	r1, [r7, #24]
 800e186:	4629      	mov	r1, r5
 800e188:	eb63 0301 	sbc.w	r3, r3, r1
 800e18c:	61fb      	str	r3, [r7, #28]
 800e18e:	f04f 0200 	mov.w	r2, #0
 800e192:	f04f 0300 	mov.w	r3, #0
 800e196:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800e19a:	4659      	mov	r1, fp
 800e19c:	018b      	lsls	r3, r1, #6
 800e19e:	4651      	mov	r1, sl
 800e1a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e1a4:	4651      	mov	r1, sl
 800e1a6:	018a      	lsls	r2, r1, #6
 800e1a8:	4651      	mov	r1, sl
 800e1aa:	ebb2 0801 	subs.w	r8, r2, r1
 800e1ae:	4659      	mov	r1, fp
 800e1b0:	eb63 0901 	sbc.w	r9, r3, r1
 800e1b4:	f04f 0200 	mov.w	r2, #0
 800e1b8:	f04f 0300 	mov.w	r3, #0
 800e1bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e1c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e1c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e1c8:	4690      	mov	r8, r2
 800e1ca:	4699      	mov	r9, r3
 800e1cc:	4623      	mov	r3, r4
 800e1ce:	eb18 0303 	adds.w	r3, r8, r3
 800e1d2:	613b      	str	r3, [r7, #16]
 800e1d4:	462b      	mov	r3, r5
 800e1d6:	eb49 0303 	adc.w	r3, r9, r3
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	f04f 0200 	mov.w	r2, #0
 800e1e0:	f04f 0300 	mov.w	r3, #0
 800e1e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	024b      	lsls	r3, r1, #9
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	024a      	lsls	r2, r1, #9
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1fe:	2200      	movs	r2, #0
 800e200:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e202:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e204:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e208:	f7f2 fd5e 	bl	8000cc8 <__aeabi_uldivmod>
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	4613      	mov	r3, r2
 800e212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e216:	e065      	b.n	800e2e4 <HAL_RCC_GetSysClockFreq+0x420>
 800e218:	40023800 	.word	0x40023800
 800e21c:	00f42400 	.word	0x00f42400
 800e220:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e224:	4b3d      	ldr	r3, [pc, #244]	@ (800e31c <HAL_RCC_GetSysClockFreq+0x458>)
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	099b      	lsrs	r3, r3, #6
 800e22a:	2200      	movs	r2, #0
 800e22c:	4618      	mov	r0, r3
 800e22e:	4611      	mov	r1, r2
 800e230:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e234:	653b      	str	r3, [r7, #80]	@ 0x50
 800e236:	2300      	movs	r3, #0
 800e238:	657b      	str	r3, [r7, #84]	@ 0x54
 800e23a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800e23e:	4642      	mov	r2, r8
 800e240:	464b      	mov	r3, r9
 800e242:	f04f 0000 	mov.w	r0, #0
 800e246:	f04f 0100 	mov.w	r1, #0
 800e24a:	0159      	lsls	r1, r3, #5
 800e24c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e250:	0150      	lsls	r0, r2, #5
 800e252:	4602      	mov	r2, r0
 800e254:	460b      	mov	r3, r1
 800e256:	4641      	mov	r1, r8
 800e258:	1a51      	subs	r1, r2, r1
 800e25a:	60b9      	str	r1, [r7, #8]
 800e25c:	4649      	mov	r1, r9
 800e25e:	eb63 0301 	sbc.w	r3, r3, r1
 800e262:	60fb      	str	r3, [r7, #12]
 800e264:	f04f 0200 	mov.w	r2, #0
 800e268:	f04f 0300 	mov.w	r3, #0
 800e26c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e270:	4659      	mov	r1, fp
 800e272:	018b      	lsls	r3, r1, #6
 800e274:	4651      	mov	r1, sl
 800e276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e27a:	4651      	mov	r1, sl
 800e27c:	018a      	lsls	r2, r1, #6
 800e27e:	4651      	mov	r1, sl
 800e280:	1a54      	subs	r4, r2, r1
 800e282:	4659      	mov	r1, fp
 800e284:	eb63 0501 	sbc.w	r5, r3, r1
 800e288:	f04f 0200 	mov.w	r2, #0
 800e28c:	f04f 0300 	mov.w	r3, #0
 800e290:	00eb      	lsls	r3, r5, #3
 800e292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e296:	00e2      	lsls	r2, r4, #3
 800e298:	4614      	mov	r4, r2
 800e29a:	461d      	mov	r5, r3
 800e29c:	4643      	mov	r3, r8
 800e29e:	18e3      	adds	r3, r4, r3
 800e2a0:	603b      	str	r3, [r7, #0]
 800e2a2:	464b      	mov	r3, r9
 800e2a4:	eb45 0303 	adc.w	r3, r5, r3
 800e2a8:	607b      	str	r3, [r7, #4]
 800e2aa:	f04f 0200 	mov.w	r2, #0
 800e2ae:	f04f 0300 	mov.w	r3, #0
 800e2b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	028b      	lsls	r3, r1, #10
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	028a      	lsls	r2, r1, #10
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e2d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e2d6:	f7f2 fcf7 	bl	8000cc8 <__aeabi_uldivmod>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	4613      	mov	r3, r2
 800e2e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800e2e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e31c <HAL_RCC_GetSysClockFreq+0x458>)
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	0f1b      	lsrs	r3, r3, #28
 800e2ea:	f003 0307 	and.w	r3, r3, #7
 800e2ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800e2f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e2f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e302:	e003      	b.n	800e30c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e304:	4b06      	ldr	r3, [pc, #24]	@ (800e320 <HAL_RCC_GetSysClockFreq+0x45c>)
 800e306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800e30a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e30c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800e310:	4618      	mov	r0, r3
 800e312:	37b8      	adds	r7, #184	@ 0xb8
 800e314:	46bd      	mov	sp, r7
 800e316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e31a:	bf00      	nop
 800e31c:	40023800 	.word	0x40023800
 800e320:	00f42400 	.word	0x00f42400

0800e324 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e332:	2301      	movs	r3, #1
 800e334:	e28d      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f003 0301 	and.w	r3, r3, #1
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 8083 	beq.w	800e44a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e344:	4b94      	ldr	r3, [pc, #592]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	f003 030c 	and.w	r3, r3, #12
 800e34c:	2b04      	cmp	r3, #4
 800e34e:	d019      	beq.n	800e384 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e350:	4b91      	ldr	r3, [pc, #580]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	f003 030c 	and.w	r3, r3, #12
        || \
 800e358:	2b08      	cmp	r3, #8
 800e35a:	d106      	bne.n	800e36a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e35c:	4b8e      	ldr	r3, [pc, #568]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e368:	d00c      	beq.n	800e384 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e36a:	4b8b      	ldr	r3, [pc, #556]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800e372:	2b0c      	cmp	r3, #12
 800e374:	d112      	bne.n	800e39c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e376:	4b88      	ldr	r3, [pc, #544]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e37e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e382:	d10b      	bne.n	800e39c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e384:	4b84      	ldr	r3, [pc, #528]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d05b      	beq.n	800e448 <HAL_RCC_OscConfig+0x124>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d157      	bne.n	800e448 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	e25a      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3a4:	d106      	bne.n	800e3b4 <HAL_RCC_OscConfig+0x90>
 800e3a6:	4b7c      	ldr	r3, [pc, #496]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a7b      	ldr	r2, [pc, #492]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e3b0:	6013      	str	r3, [r2, #0]
 800e3b2:	e01d      	b.n	800e3f0 <HAL_RCC_OscConfig+0xcc>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e3bc:	d10c      	bne.n	800e3d8 <HAL_RCC_OscConfig+0xb4>
 800e3be:	4b76      	ldr	r3, [pc, #472]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a75      	ldr	r2, [pc, #468]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e3c8:	6013      	str	r3, [r2, #0]
 800e3ca:	4b73      	ldr	r3, [pc, #460]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a72      	ldr	r2, [pc, #456]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e3d4:	6013      	str	r3, [r2, #0]
 800e3d6:	e00b      	b.n	800e3f0 <HAL_RCC_OscConfig+0xcc>
 800e3d8:	4b6f      	ldr	r3, [pc, #444]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a6e      	ldr	r2, [pc, #440]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e3e2:	6013      	str	r3, [r2, #0]
 800e3e4:	4b6c      	ldr	r3, [pc, #432]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a6b      	ldr	r2, [pc, #428]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e3ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e3ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d013      	beq.n	800e420 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3f8:	f7fc fe5a 	bl	800b0b0 <HAL_GetTick>
 800e3fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e3fe:	e008      	b.n	800e412 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e400:	f7fc fe56 	bl	800b0b0 <HAL_GetTick>
 800e404:	4602      	mov	r2, r0
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	2b64      	cmp	r3, #100	@ 0x64
 800e40c:	d901      	bls.n	800e412 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e40e:	2303      	movs	r3, #3
 800e410:	e21f      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e412:	4b61      	ldr	r3, [pc, #388]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d0f0      	beq.n	800e400 <HAL_RCC_OscConfig+0xdc>
 800e41e:	e014      	b.n	800e44a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e420:	f7fc fe46 	bl	800b0b0 <HAL_GetTick>
 800e424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e426:	e008      	b.n	800e43a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e428:	f7fc fe42 	bl	800b0b0 <HAL_GetTick>
 800e42c:	4602      	mov	r2, r0
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	1ad3      	subs	r3, r2, r3
 800e432:	2b64      	cmp	r3, #100	@ 0x64
 800e434:	d901      	bls.n	800e43a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800e436:	2303      	movs	r3, #3
 800e438:	e20b      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e43a:	4b57      	ldr	r3, [pc, #348]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1f0      	bne.n	800e428 <HAL_RCC_OscConfig+0x104>
 800e446:	e000      	b.n	800e44a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f003 0302 	and.w	r3, r3, #2
 800e452:	2b00      	cmp	r3, #0
 800e454:	d06f      	beq.n	800e536 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e456:	4b50      	ldr	r3, [pc, #320]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	f003 030c 	and.w	r3, r3, #12
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d017      	beq.n	800e492 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e462:	4b4d      	ldr	r3, [pc, #308]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e464:	689b      	ldr	r3, [r3, #8]
 800e466:	f003 030c 	and.w	r3, r3, #12
        || \
 800e46a:	2b08      	cmp	r3, #8
 800e46c:	d105      	bne.n	800e47a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e46e:	4b4a      	ldr	r3, [pc, #296]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00b      	beq.n	800e492 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e47a:	4b47      	ldr	r3, [pc, #284]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800e482:	2b0c      	cmp	r3, #12
 800e484:	d11c      	bne.n	800e4c0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e486:	4b44      	ldr	r3, [pc, #272]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d116      	bne.n	800e4c0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e492:	4b41      	ldr	r3, [pc, #260]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f003 0302 	and.w	r3, r3, #2
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d005      	beq.n	800e4aa <HAL_RCC_OscConfig+0x186>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d001      	beq.n	800e4aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e1d3      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e4aa:	4b3b      	ldr	r3, [pc, #236]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	00db      	lsls	r3, r3, #3
 800e4b8:	4937      	ldr	r1, [pc, #220]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e4be:	e03a      	b.n	800e536 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d020      	beq.n	800e50a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e4c8:	4b34      	ldr	r3, [pc, #208]	@ (800e59c <HAL_RCC_OscConfig+0x278>)
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4ce:	f7fc fdef 	bl	800b0b0 <HAL_GetTick>
 800e4d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e4d4:	e008      	b.n	800e4e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e4d6:	f7fc fdeb 	bl	800b0b0 <HAL_GetTick>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d901      	bls.n	800e4e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	e1b4      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e4e8:	4b2b      	ldr	r3, [pc, #172]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f003 0302 	and.w	r3, r3, #2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d0f0      	beq.n	800e4d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e4f4:	4b28      	ldr	r3, [pc, #160]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	00db      	lsls	r3, r3, #3
 800e502:	4925      	ldr	r1, [pc, #148]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e504:	4313      	orrs	r3, r2
 800e506:	600b      	str	r3, [r1, #0]
 800e508:	e015      	b.n	800e536 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e50a:	4b24      	ldr	r3, [pc, #144]	@ (800e59c <HAL_RCC_OscConfig+0x278>)
 800e50c:	2200      	movs	r2, #0
 800e50e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e510:	f7fc fdce 	bl	800b0b0 <HAL_GetTick>
 800e514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e516:	e008      	b.n	800e52a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e518:	f7fc fdca 	bl	800b0b0 <HAL_GetTick>
 800e51c:	4602      	mov	r2, r0
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	2b02      	cmp	r3, #2
 800e524:	d901      	bls.n	800e52a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800e526:	2303      	movs	r3, #3
 800e528:	e193      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e52a:	4b1b      	ldr	r3, [pc, #108]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f003 0302 	and.w	r3, r3, #2
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1f0      	bne.n	800e518 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f003 0308 	and.w	r3, r3, #8
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d036      	beq.n	800e5b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d016      	beq.n	800e578 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e54a:	4b15      	ldr	r3, [pc, #84]	@ (800e5a0 <HAL_RCC_OscConfig+0x27c>)
 800e54c:	2201      	movs	r2, #1
 800e54e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e550:	f7fc fdae 	bl	800b0b0 <HAL_GetTick>
 800e554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e556:	e008      	b.n	800e56a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e558:	f7fc fdaa 	bl	800b0b0 <HAL_GetTick>
 800e55c:	4602      	mov	r2, r0
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	1ad3      	subs	r3, r2, r3
 800e562:	2b02      	cmp	r3, #2
 800e564:	d901      	bls.n	800e56a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800e566:	2303      	movs	r3, #3
 800e568:	e173      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e56a:	4b0b      	ldr	r3, [pc, #44]	@ (800e598 <HAL_RCC_OscConfig+0x274>)
 800e56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e56e:	f003 0302 	and.w	r3, r3, #2
 800e572:	2b00      	cmp	r3, #0
 800e574:	d0f0      	beq.n	800e558 <HAL_RCC_OscConfig+0x234>
 800e576:	e01b      	b.n	800e5b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e578:	4b09      	ldr	r3, [pc, #36]	@ (800e5a0 <HAL_RCC_OscConfig+0x27c>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e57e:	f7fc fd97 	bl	800b0b0 <HAL_GetTick>
 800e582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e584:	e00e      	b.n	800e5a4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e586:	f7fc fd93 	bl	800b0b0 <HAL_GetTick>
 800e58a:	4602      	mov	r2, r0
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	2b02      	cmp	r3, #2
 800e592:	d907      	bls.n	800e5a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800e594:	2303      	movs	r3, #3
 800e596:	e15c      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
 800e598:	40023800 	.word	0x40023800
 800e59c:	42470000 	.word	0x42470000
 800e5a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e5a4:	4b8a      	ldr	r3, [pc, #552]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e5a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5a8:	f003 0302 	and.w	r3, r3, #2
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1ea      	bne.n	800e586 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f003 0304 	and.w	r3, r3, #4
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 8097 	beq.w	800e6ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e5c2:	4b83      	ldr	r3, [pc, #524]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10f      	bne.n	800e5ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	60bb      	str	r3, [r7, #8]
 800e5d2:	4b7f      	ldr	r3, [pc, #508]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e5d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5d6:	4a7e      	ldr	r2, [pc, #504]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e5d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e5dc:	6413      	str	r3, [r2, #64]	@ 0x40
 800e5de:	4b7c      	ldr	r3, [pc, #496]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e5e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e5e6:	60bb      	str	r3, [r7, #8]
 800e5e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e5ee:	4b79      	ldr	r3, [pc, #484]	@ (800e7d4 <HAL_RCC_OscConfig+0x4b0>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d118      	bne.n	800e62c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e5fa:	4b76      	ldr	r3, [pc, #472]	@ (800e7d4 <HAL_RCC_OscConfig+0x4b0>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a75      	ldr	r2, [pc, #468]	@ (800e7d4 <HAL_RCC_OscConfig+0x4b0>)
 800e600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e606:	f7fc fd53 	bl	800b0b0 <HAL_GetTick>
 800e60a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e60c:	e008      	b.n	800e620 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e60e:	f7fc fd4f 	bl	800b0b0 <HAL_GetTick>
 800e612:	4602      	mov	r2, r0
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d901      	bls.n	800e620 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800e61c:	2303      	movs	r3, #3
 800e61e:	e118      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e620:	4b6c      	ldr	r3, [pc, #432]	@ (800e7d4 <HAL_RCC_OscConfig+0x4b0>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d0f0      	beq.n	800e60e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	2b01      	cmp	r3, #1
 800e632:	d106      	bne.n	800e642 <HAL_RCC_OscConfig+0x31e>
 800e634:	4b66      	ldr	r3, [pc, #408]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e638:	4a65      	ldr	r2, [pc, #404]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e63a:	f043 0301 	orr.w	r3, r3, #1
 800e63e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e640:	e01c      	b.n	800e67c <HAL_RCC_OscConfig+0x358>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	2b05      	cmp	r3, #5
 800e648:	d10c      	bne.n	800e664 <HAL_RCC_OscConfig+0x340>
 800e64a:	4b61      	ldr	r3, [pc, #388]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e64c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e64e:	4a60      	ldr	r2, [pc, #384]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e650:	f043 0304 	orr.w	r3, r3, #4
 800e654:	6713      	str	r3, [r2, #112]	@ 0x70
 800e656:	4b5e      	ldr	r3, [pc, #376]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e65a:	4a5d      	ldr	r2, [pc, #372]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e65c:	f043 0301 	orr.w	r3, r3, #1
 800e660:	6713      	str	r3, [r2, #112]	@ 0x70
 800e662:	e00b      	b.n	800e67c <HAL_RCC_OscConfig+0x358>
 800e664:	4b5a      	ldr	r3, [pc, #360]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e668:	4a59      	ldr	r2, [pc, #356]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e66a:	f023 0301 	bic.w	r3, r3, #1
 800e66e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e670:	4b57      	ldr	r3, [pc, #348]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e674:	4a56      	ldr	r2, [pc, #344]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e676:	f023 0304 	bic.w	r3, r3, #4
 800e67a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	689b      	ldr	r3, [r3, #8]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d015      	beq.n	800e6b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e684:	f7fc fd14 	bl	800b0b0 <HAL_GetTick>
 800e688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e68a:	e00a      	b.n	800e6a2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e68c:	f7fc fd10 	bl	800b0b0 <HAL_GetTick>
 800e690:	4602      	mov	r2, r0
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d901      	bls.n	800e6a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	e0d7      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e6a2:	4b4b      	ldr	r3, [pc, #300]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e6a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6a6:	f003 0302 	and.w	r3, r3, #2
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d0ee      	beq.n	800e68c <HAL_RCC_OscConfig+0x368>
 800e6ae:	e014      	b.n	800e6da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e6b0:	f7fc fcfe 	bl	800b0b0 <HAL_GetTick>
 800e6b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e6b6:	e00a      	b.n	800e6ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e6b8:	f7fc fcfa 	bl	800b0b0 <HAL_GetTick>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d901      	bls.n	800e6ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e6ca:	2303      	movs	r3, #3
 800e6cc:	e0c1      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e6ce:	4b40      	ldr	r3, [pc, #256]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e6d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6d2:	f003 0302 	and.w	r3, r3, #2
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1ee      	bne.n	800e6b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e6da:	7dfb      	ldrb	r3, [r7, #23]
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d105      	bne.n	800e6ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e6e0:	4b3b      	ldr	r3, [pc, #236]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e6e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6e4:	4a3a      	ldr	r2, [pc, #232]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e6e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e6ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	699b      	ldr	r3, [r3, #24]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f000 80ad 	beq.w	800e850 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e6f6:	4b36      	ldr	r3, [pc, #216]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	f003 030c 	and.w	r3, r3, #12
 800e6fe:	2b08      	cmp	r3, #8
 800e700:	d060      	beq.n	800e7c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	699b      	ldr	r3, [r3, #24]
 800e706:	2b02      	cmp	r3, #2
 800e708:	d145      	bne.n	800e796 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e70a:	4b33      	ldr	r3, [pc, #204]	@ (800e7d8 <HAL_RCC_OscConfig+0x4b4>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e710:	f7fc fcce 	bl	800b0b0 <HAL_GetTick>
 800e714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e716:	e008      	b.n	800e72a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e718:	f7fc fcca 	bl	800b0b0 <HAL_GetTick>
 800e71c:	4602      	mov	r2, r0
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	2b02      	cmp	r3, #2
 800e724:	d901      	bls.n	800e72a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800e726:	2303      	movs	r3, #3
 800e728:	e093      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e72a:	4b29      	ldr	r3, [pc, #164]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e732:	2b00      	cmp	r3, #0
 800e734:	d1f0      	bne.n	800e718 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	69da      	ldr	r2, [r3, #28]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a1b      	ldr	r3, [r3, #32]
 800e73e:	431a      	orrs	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e744:	019b      	lsls	r3, r3, #6
 800e746:	431a      	orrs	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e74c:	085b      	lsrs	r3, r3, #1
 800e74e:	3b01      	subs	r3, #1
 800e750:	041b      	lsls	r3, r3, #16
 800e752:	431a      	orrs	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e758:	061b      	lsls	r3, r3, #24
 800e75a:	431a      	orrs	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e760:	071b      	lsls	r3, r3, #28
 800e762:	491b      	ldr	r1, [pc, #108]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e764:	4313      	orrs	r3, r2
 800e766:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e768:	4b1b      	ldr	r3, [pc, #108]	@ (800e7d8 <HAL_RCC_OscConfig+0x4b4>)
 800e76a:	2201      	movs	r2, #1
 800e76c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e76e:	f7fc fc9f 	bl	800b0b0 <HAL_GetTick>
 800e772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e774:	e008      	b.n	800e788 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e776:	f7fc fc9b 	bl	800b0b0 <HAL_GetTick>
 800e77a:	4602      	mov	r2, r0
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	2b02      	cmp	r3, #2
 800e782:	d901      	bls.n	800e788 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800e784:	2303      	movs	r3, #3
 800e786:	e064      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e788:	4b11      	ldr	r3, [pc, #68]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e790:	2b00      	cmp	r3, #0
 800e792:	d0f0      	beq.n	800e776 <HAL_RCC_OscConfig+0x452>
 800e794:	e05c      	b.n	800e850 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e796:	4b10      	ldr	r3, [pc, #64]	@ (800e7d8 <HAL_RCC_OscConfig+0x4b4>)
 800e798:	2200      	movs	r2, #0
 800e79a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e79c:	f7fc fc88 	bl	800b0b0 <HAL_GetTick>
 800e7a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e7a2:	e008      	b.n	800e7b6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e7a4:	f7fc fc84 	bl	800b0b0 <HAL_GetTick>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d901      	bls.n	800e7b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	e04d      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e7b6:	4b06      	ldr	r3, [pc, #24]	@ (800e7d0 <HAL_RCC_OscConfig+0x4ac>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1f0      	bne.n	800e7a4 <HAL_RCC_OscConfig+0x480>
 800e7c2:	e045      	b.n	800e850 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	699b      	ldr	r3, [r3, #24]
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d107      	bne.n	800e7dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e040      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
 800e7d0:	40023800 	.word	0x40023800
 800e7d4:	40007000 	.word	0x40007000
 800e7d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e7dc:	4b1f      	ldr	r3, [pc, #124]	@ (800e85c <HAL_RCC_OscConfig+0x538>)
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d030      	beq.n	800e84c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d129      	bne.n	800e84c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e802:	429a      	cmp	r2, r3
 800e804:	d122      	bne.n	800e84c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e80c:	4013      	ands	r3, r2
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e814:	4293      	cmp	r3, r2
 800e816:	d119      	bne.n	800e84c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e822:	085b      	lsrs	r3, r3, #1
 800e824:	3b01      	subs	r3, #1
 800e826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e828:	429a      	cmp	r2, r3
 800e82a:	d10f      	bne.n	800e84c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e838:	429a      	cmp	r2, r3
 800e83a:	d107      	bne.n	800e84c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e846:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e848:	429a      	cmp	r2, r3
 800e84a:	d001      	beq.n	800e850 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e84c:	2301      	movs	r3, #1
 800e84e:	e000      	b.n	800e852 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3718      	adds	r7, #24
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	40023800 	.word	0x40023800

0800e860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d101      	bne.n	800e872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e86e:	2301      	movs	r3, #1
 800e870:	e07b      	b.n	800e96a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e876:	2b00      	cmp	r3, #0
 800e878:	d108      	bne.n	800e88c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e882:	d009      	beq.n	800e898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	61da      	str	r2, [r3, #28]
 800e88a:	e005      	b.n	800e898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d106      	bne.n	800e8b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7fc f82c 	bl	800a910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2202      	movs	r2, #2
 800e8bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e8ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e8e0:	431a      	orrs	r2, r3
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e8ea:	431a      	orrs	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	f003 0302 	and.w	r3, r3, #2
 800e8f4:	431a      	orrs	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	695b      	ldr	r3, [r3, #20]
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	431a      	orrs	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e908:	431a      	orrs	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	69db      	ldr	r3, [r3, #28]
 800e90e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e912:	431a      	orrs	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6a1b      	ldr	r3, [r3, #32]
 800e918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e91c:	ea42 0103 	orr.w	r1, r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e924:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	430a      	orrs	r2, r1
 800e92e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	699b      	ldr	r3, [r3, #24]
 800e934:	0c1b      	lsrs	r3, r3, #16
 800e936:	f003 0104 	and.w	r1, r3, #4
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e93e:	f003 0210 	and.w	r2, r3, #16
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	430a      	orrs	r2, r1
 800e948:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	69da      	ldr	r2, [r3, #28]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e958:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}

0800e972 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b088      	sub	sp, #32
 800e976:	af00      	add	r7, sp, #0
 800e978:	60f8      	str	r0, [r7, #12]
 800e97a:	60b9      	str	r1, [r7, #8]
 800e97c:	603b      	str	r3, [r7, #0]
 800e97e:	4613      	mov	r3, r2
 800e980:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e982:	f7fc fb95 	bl	800b0b0 <HAL_GetTick>
 800e986:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800e988:	88fb      	ldrh	r3, [r7, #6]
 800e98a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e992:	b2db      	uxtb	r3, r3
 800e994:	2b01      	cmp	r3, #1
 800e996:	d001      	beq.n	800e99c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800e998:	2302      	movs	r3, #2
 800e99a:	e12a      	b.n	800ebf2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d002      	beq.n	800e9a8 <HAL_SPI_Transmit+0x36>
 800e9a2:	88fb      	ldrh	r3, [r7, #6]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d101      	bne.n	800e9ac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e122      	b.n	800ebf2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d101      	bne.n	800e9ba <HAL_SPI_Transmit+0x48>
 800e9b6:	2302      	movs	r3, #2
 800e9b8:	e11b      	b.n	800ebf2 <HAL_SPI_Transmit+0x280>
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2203      	movs	r2, #3
 800e9c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	88fa      	ldrh	r2, [r7, #6]
 800e9da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	88fa      	ldrh	r2, [r7, #6]
 800e9e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea08:	d10f      	bne.n	800ea2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ea18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea34:	2b40      	cmp	r3, #64	@ 0x40
 800ea36:	d007      	beq.n	800ea48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea50:	d152      	bne.n	800eaf8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <HAL_SPI_Transmit+0xee>
 800ea5a:	8b7b      	ldrh	r3, [r7, #26]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d145      	bne.n	800eaec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea64:	881a      	ldrh	r2, [r3, #0]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea70:	1c9a      	adds	r2, r3, #2
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	3b01      	subs	r3, #1
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ea84:	e032      	b.n	800eaec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	f003 0302 	and.w	r3, r3, #2
 800ea90:	2b02      	cmp	r3, #2
 800ea92:	d112      	bne.n	800eaba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea98:	881a      	ldrh	r2, [r3, #0]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaa4:	1c9a      	adds	r2, r3, #2
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	3b01      	subs	r3, #1
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800eab8:	e018      	b.n	800eaec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eaba:	f7fc faf9 	bl	800b0b0 <HAL_GetTick>
 800eabe:	4602      	mov	r2, r0
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d803      	bhi.n	800ead2 <HAL_SPI_Transmit+0x160>
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead0:	d102      	bne.n	800ead8 <HAL_SPI_Transmit+0x166>
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d109      	bne.n	800eaec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800eae8:	2303      	movs	r3, #3
 800eaea:	e082      	b.n	800ebf2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1c7      	bne.n	800ea86 <HAL_SPI_Transmit+0x114>
 800eaf6:	e053      	b.n	800eba0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <HAL_SPI_Transmit+0x194>
 800eb00:	8b7b      	ldrh	r3, [r7, #26]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d147      	bne.n	800eb96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	330c      	adds	r3, #12
 800eb10:	7812      	ldrb	r2, [r2, #0]
 800eb12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb18:	1c5a      	adds	r2, r3, #1
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	3b01      	subs	r3, #1
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800eb2c:	e033      	b.n	800eb96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	f003 0302 	and.w	r3, r3, #2
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d113      	bne.n	800eb64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	330c      	adds	r3, #12
 800eb46:	7812      	ldrb	r2, [r2, #0]
 800eb48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb4e:	1c5a      	adds	r2, r3, #1
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	86da      	strh	r2, [r3, #54]	@ 0x36
 800eb62:	e018      	b.n	800eb96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb64:	f7fc faa4 	bl	800b0b0 <HAL_GetTick>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d803      	bhi.n	800eb7c <HAL_SPI_Transmit+0x20a>
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb7a:	d102      	bne.n	800eb82 <HAL_SPI_Transmit+0x210>
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d109      	bne.n	800eb96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800eb92:	2303      	movs	r3, #3
 800eb94:	e02d      	b.n	800ebf2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1c6      	bne.n	800eb2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eba0:	69fa      	ldr	r2, [r7, #28]
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f000 fb6b 	bl	800f280 <SPI_EndRxTxTransaction>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d002      	beq.n	800ebb6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2220      	movs	r2, #32
 800ebb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10a      	bne.n	800ebd4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	617b      	str	r3, [r7, #20]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	617b      	str	r3, [r7, #20]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	617b      	str	r3, [r7, #20]
 800ebd2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	e000      	b.n	800ebf2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800ebf0:	2300      	movs	r3, #0
  }
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3720      	adds	r7, #32
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b08a      	sub	sp, #40	@ 0x28
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	60f8      	str	r0, [r7, #12]
 800ec02:	60b9      	str	r1, [r7, #8]
 800ec04:	607a      	str	r2, [r7, #4]
 800ec06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec0c:	f7fc fa50 	bl	800b0b0 <HAL_GetTick>
 800ec10:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ec18:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ec20:	887b      	ldrh	r3, [r7, #2]
 800ec22:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec24:	7ffb      	ldrb	r3, [r7, #31]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d00c      	beq.n	800ec44 <HAL_SPI_TransmitReceive+0x4a>
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec30:	d106      	bne.n	800ec40 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d102      	bne.n	800ec40 <HAL_SPI_TransmitReceive+0x46>
 800ec3a:	7ffb      	ldrb	r3, [r7, #31]
 800ec3c:	2b04      	cmp	r3, #4
 800ec3e:	d001      	beq.n	800ec44 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800ec40:	2302      	movs	r3, #2
 800ec42:	e17f      	b.n	800ef44 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d005      	beq.n	800ec56 <HAL_SPI_TransmitReceive+0x5c>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <HAL_SPI_TransmitReceive+0x5c>
 800ec50:	887b      	ldrh	r3, [r7, #2]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d101      	bne.n	800ec5a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e174      	b.n	800ef44 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d101      	bne.n	800ec68 <HAL_SPI_TransmitReceive+0x6e>
 800ec64:	2302      	movs	r3, #2
 800ec66:	e16d      	b.n	800ef44 <HAL_SPI_TransmitReceive+0x34a>
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	2b04      	cmp	r3, #4
 800ec7a:	d003      	beq.n	800ec84 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2205      	movs	r2, #5
 800ec80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2200      	movs	r2, #0
 800ec88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	887a      	ldrh	r2, [r7, #2]
 800ec94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	887a      	ldrh	r2, [r7, #2]
 800ec9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	68ba      	ldr	r2, [r7, #8]
 800eca0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	887a      	ldrh	r2, [r7, #2]
 800eca6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	887a      	ldrh	r2, [r7, #2]
 800ecac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecc4:	2b40      	cmp	r3, #64	@ 0x40
 800ecc6:	d007      	beq.n	800ecd8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ecd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ece0:	d17e      	bne.n	800ede0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d002      	beq.n	800ecf0 <HAL_SPI_TransmitReceive+0xf6>
 800ecea:	8afb      	ldrh	r3, [r7, #22]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d16c      	bne.n	800edca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecf4:	881a      	ldrh	r2, [r3, #0]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed00:	1c9a      	adds	r2, r3, #2
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed14:	e059      	b.n	800edca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	f003 0302 	and.w	r3, r3, #2
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d11b      	bne.n	800ed5c <HAL_SPI_TransmitReceive+0x162>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d016      	beq.n	800ed5c <HAL_SPI_TransmitReceive+0x162>
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d113      	bne.n	800ed5c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed38:	881a      	ldrh	r2, [r3, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed44:	1c9a      	adds	r2, r3, #2
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	3b01      	subs	r3, #1
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	f003 0301 	and.w	r3, r3, #1
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d119      	bne.n	800ed9e <HAL_SPI_TransmitReceive+0x1a4>
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d014      	beq.n	800ed9e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	68da      	ldr	r2, [r3, #12]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed7e:	b292      	uxth	r2, r2
 800ed80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed86:	1c9a      	adds	r2, r3, #2
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	3b01      	subs	r3, #1
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ed9e:	f7fc f987 	bl	800b0b0 <HAL_GetTick>
 800eda2:	4602      	mov	r2, r0
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edaa:	429a      	cmp	r2, r3
 800edac:	d80d      	bhi.n	800edca <HAL_SPI_TransmitReceive+0x1d0>
 800edae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb4:	d009      	beq.n	800edca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2201      	movs	r2, #1
 800edba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800edc6:	2303      	movs	r3, #3
 800edc8:	e0bc      	b.n	800ef44 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800edce:	b29b      	uxth	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d1a0      	bne.n	800ed16 <HAL_SPI_TransmitReceive+0x11c>
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800edd8:	b29b      	uxth	r3, r3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d19b      	bne.n	800ed16 <HAL_SPI_TransmitReceive+0x11c>
 800edde:	e082      	b.n	800eee6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d002      	beq.n	800edee <HAL_SPI_TransmitReceive+0x1f4>
 800ede8:	8afb      	ldrh	r3, [r7, #22]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d171      	bne.n	800eed2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	330c      	adds	r3, #12
 800edf8:	7812      	ldrb	r2, [r2, #0]
 800edfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee00:	1c5a      	adds	r2, r3, #1
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee14:	e05d      	b.n	800eed2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	f003 0302 	and.w	r3, r3, #2
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d11c      	bne.n	800ee5e <HAL_SPI_TransmitReceive+0x264>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d017      	beq.n	800ee5e <HAL_SPI_TransmitReceive+0x264>
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d114      	bne.n	800ee5e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	330c      	adds	r3, #12
 800ee3e:	7812      	ldrb	r2, [r2, #0]
 800ee40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee46:	1c5a      	adds	r2, r3, #1
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	3b01      	subs	r3, #1
 800ee54:	b29a      	uxth	r2, r3
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	f003 0301 	and.w	r3, r3, #1
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d119      	bne.n	800eea0 <HAL_SPI_TransmitReceive+0x2a6>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d014      	beq.n	800eea0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	68da      	ldr	r2, [r3, #12]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee80:	b2d2      	uxtb	r2, r2
 800ee82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee88:	1c5a      	adds	r2, r3, #1
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	3b01      	subs	r3, #1
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eea0:	f7fc f906 	bl	800b0b0 <HAL_GetTick>
 800eea4:	4602      	mov	r2, r0
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	1ad3      	subs	r3, r2, r3
 800eeaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d803      	bhi.n	800eeb8 <HAL_SPI_TransmitReceive+0x2be>
 800eeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb6:	d102      	bne.n	800eebe <HAL_SPI_TransmitReceive+0x2c4>
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d109      	bne.n	800eed2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800eece:	2303      	movs	r3, #3
 800eed0:	e038      	b.n	800ef44 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d19c      	bne.n	800ee16 <HAL_SPI_TransmitReceive+0x21c>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d197      	bne.n	800ee16 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eee6:	6a3a      	ldr	r2, [r7, #32]
 800eee8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f000 f9c8 	bl	800f280 <SPI_EndRxTxTransaction>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d008      	beq.n	800ef08 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2220      	movs	r2, #32
 800eefa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ef04:	2301      	movs	r3, #1
 800ef06:	e01d      	b.n	800ef44 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10a      	bne.n	800ef26 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef10:	2300      	movs	r3, #0
 800ef12:	613b      	str	r3, [r7, #16]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	613b      	str	r3, [r7, #16]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	613b      	str	r3, [r7, #16]
 800ef24:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2200      	movs	r2, #0
 800ef32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d001      	beq.n	800ef42 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e000      	b.n	800ef44 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800ef42:	2300      	movs	r3, #0
  }
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3728      	adds	r7, #40	@ 0x28
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b088      	sub	sp, #32
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d10e      	bne.n	800ef8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d009      	beq.n	800ef8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d004      	beq.n	800ef8c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	4798      	blx	r3
    return;
 800ef8a:	e0ce      	b.n	800f12a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	f003 0302 	and.w	r3, r3, #2
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d009      	beq.n	800efaa <HAL_SPI_IRQHandler+0x5e>
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d004      	beq.n	800efaa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	4798      	blx	r3
    return;
 800efa8:	e0bf      	b.n	800f12a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800efaa:	69bb      	ldr	r3, [r7, #24]
 800efac:	f003 0320 	and.w	r3, r3, #32
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10a      	bne.n	800efca <HAL_SPI_IRQHandler+0x7e>
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d105      	bne.n	800efca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f000 80b0 	beq.w	800f12a <HAL_SPI_IRQHandler+0x1de>
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	f003 0320 	and.w	r3, r3, #32
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 80aa 	beq.w	800f12a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d023      	beq.n	800f028 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	2b03      	cmp	r3, #3
 800efea:	d011      	beq.n	800f010 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eff0:	f043 0204 	orr.w	r2, r3, #4
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eff8:	2300      	movs	r3, #0
 800effa:	617b      	str	r3, [r7, #20]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	617b      	str	r3, [r7, #20]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	617b      	str	r3, [r7, #20]
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	e00b      	b.n	800f028 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f010:	2300      	movs	r3, #0
 800f012:	613b      	str	r3, [r7, #16]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	613b      	str	r3, [r7, #16]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	613b      	str	r3, [r7, #16]
 800f024:	693b      	ldr	r3, [r7, #16]
        return;
 800f026:	e080      	b.n	800f12a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	f003 0320 	and.w	r3, r3, #32
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d014      	beq.n	800f05c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f036:	f043 0201 	orr.w	r2, r3, #1
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f03e:	2300      	movs	r3, #0
 800f040:	60fb      	str	r3, [r7, #12]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	60fb      	str	r3, [r7, #12]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f058:	601a      	str	r2, [r3, #0]
 800f05a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00c      	beq.n	800f080 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f06a:	f043 0208 	orr.w	r2, r3, #8
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f072:	2300      	movs	r3, #0
 800f074:	60bb      	str	r3, [r7, #8]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	60bb      	str	r3, [r7, #8]
 800f07e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f084:	2b00      	cmp	r3, #0
 800f086:	d04f      	beq.n	800f128 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	685a      	ldr	r2, [r3, #4]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f096:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	f003 0302 	and.w	r3, r3, #2
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d104      	bne.n	800f0b4 <HAL_SPI_IRQHandler+0x168>
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	f003 0301 	and.w	r3, r3, #1
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d034      	beq.n	800f11e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	685a      	ldr	r2, [r3, #4]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f022 0203 	bic.w	r2, r2, #3
 800f0c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d011      	beq.n	800f0f0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0d0:	4a17      	ldr	r2, [pc, #92]	@ (800f130 <HAL_SPI_IRQHandler+0x1e4>)
 800f0d2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fe f94f 	bl	800d37c <HAL_DMA_Abort_IT>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d005      	beq.n	800f0f0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d016      	beq.n	800f126 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f130 <HAL_SPI_IRQHandler+0x1e4>)
 800f0fe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f104:	4618      	mov	r0, r3
 800f106:	f7fe f939 	bl	800d37c <HAL_DMA_Abort_IT>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00a      	beq.n	800f126 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f114:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800f11c:	e003      	b.n	800f126 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 f808 	bl	800f134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f124:	e000      	b.n	800f128 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800f126:	bf00      	nop
    return;
 800f128:	bf00      	nop
  }
}
 800f12a:	3720      	adds	r7, #32
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	0800f149 	.word	0x0800f149

0800f134 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f13c:	bf00      	nop
 800f13e:	370c      	adds	r7, #12
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f154:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f7ff ffe6 	bl	800f134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f168:	bf00      	nop
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	603b      	str	r3, [r7, #0]
 800f17c:	4613      	mov	r3, r2
 800f17e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f180:	f7fb ff96 	bl	800b0b0 <HAL_GetTick>
 800f184:	4602      	mov	r2, r0
 800f186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f188:	1a9b      	subs	r3, r3, r2
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	4413      	add	r3, r2
 800f18e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f190:	f7fb ff8e 	bl	800b0b0 <HAL_GetTick>
 800f194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f196:	4b39      	ldr	r3, [pc, #228]	@ (800f27c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	015b      	lsls	r3, r3, #5
 800f19c:	0d1b      	lsrs	r3, r3, #20
 800f19e:	69fa      	ldr	r2, [r7, #28]
 800f1a0:	fb02 f303 	mul.w	r3, r2, r3
 800f1a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f1a6:	e054      	b.n	800f252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ae:	d050      	beq.n	800f252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f1b0:	f7fb ff7e 	bl	800b0b0 <HAL_GetTick>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	69fa      	ldr	r2, [r7, #28]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d902      	bls.n	800f1c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d13d      	bne.n	800f242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	685a      	ldr	r2, [r3, #4]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f1d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f1de:	d111      	bne.n	800f204 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1e8:	d004      	beq.n	800f1f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f1f2:	d107      	bne.n	800f204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f20c:	d10f      	bne.n	800f22e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f21c:	601a      	str	r2, [r3, #0]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f22c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2201      	movs	r2, #1
 800f232:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f23e:	2303      	movs	r3, #3
 800f240:	e017      	b.n	800f272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d101      	bne.n	800f24c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f248:	2300      	movs	r3, #0
 800f24a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	3b01      	subs	r3, #1
 800f250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	689a      	ldr	r2, [r3, #8]
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	4013      	ands	r3, r2
 800f25c:	68ba      	ldr	r2, [r7, #8]
 800f25e:	429a      	cmp	r2, r3
 800f260:	bf0c      	ite	eq
 800f262:	2301      	moveq	r3, #1
 800f264:	2300      	movne	r3, #0
 800f266:	b2db      	uxtb	r3, r3
 800f268:	461a      	mov	r2, r3
 800f26a:	79fb      	ldrb	r3, [r7, #7]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d19b      	bne.n	800f1a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f270:	2300      	movs	r3, #0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3720      	adds	r7, #32
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	200002b8 	.word	0x200002b8

0800f280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b088      	sub	sp, #32
 800f284:	af02      	add	r7, sp, #8
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	9300      	str	r3, [sp, #0]
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	2201      	movs	r2, #1
 800f294:	2102      	movs	r1, #2
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f7ff ff6a 	bl	800f170 <SPI_WaitFlagStateUntilTimeout>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d007      	beq.n	800f2b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2a6:	f043 0220 	orr.w	r2, r3, #32
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800f2ae:	2303      	movs	r3, #3
 800f2b0:	e032      	b.n	800f318 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f2b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f320 <SPI_EndRxTxTransaction+0xa0>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4a1b      	ldr	r2, [pc, #108]	@ (800f324 <SPI_EndRxTxTransaction+0xa4>)
 800f2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800f2bc:	0d5b      	lsrs	r3, r3, #21
 800f2be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f2c2:	fb02 f303 	mul.w	r3, r2, r3
 800f2c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f2d0:	d112      	bne.n	800f2f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	2180      	movs	r1, #128	@ 0x80
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f7ff ff47 	bl	800f170 <SPI_WaitFlagStateUntilTimeout>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d016      	beq.n	800f316 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2ec:	f043 0220 	orr.w	r2, r3, #32
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f2f4:	2303      	movs	r3, #3
 800f2f6:	e00f      	b.n	800f318 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00a      	beq.n	800f314 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	3b01      	subs	r3, #1
 800f302:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f30e:	2b80      	cmp	r3, #128	@ 0x80
 800f310:	d0f2      	beq.n	800f2f8 <SPI_EndRxTxTransaction+0x78>
 800f312:	e000      	b.n	800f316 <SPI_EndRxTxTransaction+0x96>
        break;
 800f314:	bf00      	nop
  }

  return HAL_OK;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3718      	adds	r7, #24
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	200002b8 	.word	0x200002b8
 800f324:	165e9f81 	.word	0x165e9f81

0800f328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d101      	bne.n	800f33a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f336:	2301      	movs	r3, #1
 800f338:	e041      	b.n	800f3be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f340:	b2db      	uxtb	r3, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	d106      	bne.n	800f354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f7fb fb2e 	bl	800a9b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2202      	movs	r2, #2
 800f358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	3304      	adds	r3, #4
 800f364:	4619      	mov	r1, r3
 800f366:	4610      	mov	r0, r2
 800f368:	f000 fcf8 	bl	800fd5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2201      	movs	r2, #1
 800f378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2201      	movs	r2, #1
 800f380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2201      	movs	r2, #1
 800f388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2201      	movs	r2, #1
 800f398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
	...

0800f3c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b085      	sub	sp, #20
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d001      	beq.n	800f3e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e046      	b.n	800f46e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2202      	movs	r2, #2
 800f3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4a23      	ldr	r2, [pc, #140]	@ (800f47c <HAL_TIM_Base_Start+0xb4>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d022      	beq.n	800f438 <HAL_TIM_Base_Start+0x70>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3fa:	d01d      	beq.n	800f438 <HAL_TIM_Base_Start+0x70>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4a1f      	ldr	r2, [pc, #124]	@ (800f480 <HAL_TIM_Base_Start+0xb8>)
 800f402:	4293      	cmp	r3, r2
 800f404:	d018      	beq.n	800f438 <HAL_TIM_Base_Start+0x70>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4a1e      	ldr	r2, [pc, #120]	@ (800f484 <HAL_TIM_Base_Start+0xbc>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d013      	beq.n	800f438 <HAL_TIM_Base_Start+0x70>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4a1c      	ldr	r2, [pc, #112]	@ (800f488 <HAL_TIM_Base_Start+0xc0>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d00e      	beq.n	800f438 <HAL_TIM_Base_Start+0x70>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a1b      	ldr	r2, [pc, #108]	@ (800f48c <HAL_TIM_Base_Start+0xc4>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d009      	beq.n	800f438 <HAL_TIM_Base_Start+0x70>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a19      	ldr	r2, [pc, #100]	@ (800f490 <HAL_TIM_Base_Start+0xc8>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d004      	beq.n	800f438 <HAL_TIM_Base_Start+0x70>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	4a18      	ldr	r2, [pc, #96]	@ (800f494 <HAL_TIM_Base_Start+0xcc>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d111      	bne.n	800f45c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	f003 0307 	and.w	r3, r3, #7
 800f442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2b06      	cmp	r3, #6
 800f448:	d010      	beq.n	800f46c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f042 0201 	orr.w	r2, r2, #1
 800f458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f45a:	e007      	b.n	800f46c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f042 0201 	orr.w	r2, r2, #1
 800f46a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3714      	adds	r7, #20
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	40010000 	.word	0x40010000
 800f480:	40000400 	.word	0x40000400
 800f484:	40000800 	.word	0x40000800
 800f488:	40000c00 	.word	0x40000c00
 800f48c:	40010400 	.word	0x40010400
 800f490:	40014000 	.word	0x40014000
 800f494:	40001800 	.word	0x40001800

0800f498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d001      	beq.n	800f4b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	e04e      	b.n	800f54e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2202      	movs	r2, #2
 800f4b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	68da      	ldr	r2, [r3, #12]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f042 0201 	orr.w	r2, r2, #1
 800f4c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a23      	ldr	r2, [pc, #140]	@ (800f55c <HAL_TIM_Base_Start_IT+0xc4>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d022      	beq.n	800f518 <HAL_TIM_Base_Start_IT+0x80>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4da:	d01d      	beq.n	800f518 <HAL_TIM_Base_Start_IT+0x80>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	4a1f      	ldr	r2, [pc, #124]	@ (800f560 <HAL_TIM_Base_Start_IT+0xc8>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d018      	beq.n	800f518 <HAL_TIM_Base_Start_IT+0x80>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4a1e      	ldr	r2, [pc, #120]	@ (800f564 <HAL_TIM_Base_Start_IT+0xcc>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d013      	beq.n	800f518 <HAL_TIM_Base_Start_IT+0x80>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4a1c      	ldr	r2, [pc, #112]	@ (800f568 <HAL_TIM_Base_Start_IT+0xd0>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d00e      	beq.n	800f518 <HAL_TIM_Base_Start_IT+0x80>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4a1b      	ldr	r2, [pc, #108]	@ (800f56c <HAL_TIM_Base_Start_IT+0xd4>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d009      	beq.n	800f518 <HAL_TIM_Base_Start_IT+0x80>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a19      	ldr	r2, [pc, #100]	@ (800f570 <HAL_TIM_Base_Start_IT+0xd8>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d004      	beq.n	800f518 <HAL_TIM_Base_Start_IT+0x80>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	4a18      	ldr	r2, [pc, #96]	@ (800f574 <HAL_TIM_Base_Start_IT+0xdc>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d111      	bne.n	800f53c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	f003 0307 	and.w	r3, r3, #7
 800f522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2b06      	cmp	r3, #6
 800f528:	d010      	beq.n	800f54c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f042 0201 	orr.w	r2, r2, #1
 800f538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f53a:	e007      	b.n	800f54c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f042 0201 	orr.w	r2, r2, #1
 800f54a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3714      	adds	r7, #20
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	40010000 	.word	0x40010000
 800f560:	40000400 	.word	0x40000400
 800f564:	40000800 	.word	0x40000800
 800f568:	40000c00 	.word	0x40000c00
 800f56c:	40010400 	.word	0x40010400
 800f570:	40014000 	.word	0x40014000
 800f574:	40001800 	.word	0x40001800

0800f578 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68da      	ldr	r2, [r3, #12]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f022 0201 	bic.w	r2, r2, #1
 800f58e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	6a1a      	ldr	r2, [r3, #32]
 800f596:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f59a:	4013      	ands	r3, r2
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d10f      	bne.n	800f5c0 <HAL_TIM_Base_Stop_IT+0x48>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	6a1a      	ldr	r2, [r3, #32]
 800f5a6:	f240 4344 	movw	r3, #1092	@ 0x444
 800f5aa:	4013      	ands	r3, r2
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d107      	bne.n	800f5c0 <HAL_TIM_Base_Stop_IT+0x48>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f022 0201 	bic.w	r2, r2, #1
 800f5be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b082      	sub	sp, #8
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d101      	bne.n	800f5e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e041      	b.n	800f66c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d106      	bne.n	800f602 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f000 f839 	bl	800f674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2202      	movs	r2, #2
 800f606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681a      	ldr	r2, [r3, #0]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	3304      	adds	r3, #4
 800f612:	4619      	mov	r1, r3
 800f614:	4610      	mov	r0, r2
 800f616:	f000 fba1 	bl	800fd5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2201      	movs	r2, #1
 800f61e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2201      	movs	r2, #1
 800f626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2201      	movs	r2, #1
 800f62e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2201      	movs	r2, #1
 800f636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2201      	movs	r2, #1
 800f63e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2201      	movs	r2, #1
 800f646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2201      	movs	r2, #1
 800f64e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2201      	movs	r2, #1
 800f656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2201      	movs	r2, #1
 800f65e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2201      	movs	r2, #1
 800f666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f67c:	bf00      	nop
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d109      	bne.n	800f6ac <HAL_TIM_PWM_Start+0x24>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	bf14      	ite	ne
 800f6a4:	2301      	movne	r3, #1
 800f6a6:	2300      	moveq	r3, #0
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	e022      	b.n	800f6f2 <HAL_TIM_PWM_Start+0x6a>
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	2b04      	cmp	r3, #4
 800f6b0:	d109      	bne.n	800f6c6 <HAL_TIM_PWM_Start+0x3e>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	bf14      	ite	ne
 800f6be:	2301      	movne	r3, #1
 800f6c0:	2300      	moveq	r3, #0
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	e015      	b.n	800f6f2 <HAL_TIM_PWM_Start+0x6a>
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	2b08      	cmp	r3, #8
 800f6ca:	d109      	bne.n	800f6e0 <HAL_TIM_PWM_Start+0x58>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	bf14      	ite	ne
 800f6d8:	2301      	movne	r3, #1
 800f6da:	2300      	moveq	r3, #0
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	e008      	b.n	800f6f2 <HAL_TIM_PWM_Start+0x6a>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	bf14      	ite	ne
 800f6ec:	2301      	movne	r3, #1
 800f6ee:	2300      	moveq	r3, #0
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d001      	beq.n	800f6fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e07c      	b.n	800f7f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d104      	bne.n	800f70a <HAL_TIM_PWM_Start+0x82>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2202      	movs	r2, #2
 800f704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f708:	e013      	b.n	800f732 <HAL_TIM_PWM_Start+0xaa>
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	2b04      	cmp	r3, #4
 800f70e:	d104      	bne.n	800f71a <HAL_TIM_PWM_Start+0x92>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2202      	movs	r2, #2
 800f714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f718:	e00b      	b.n	800f732 <HAL_TIM_PWM_Start+0xaa>
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	2b08      	cmp	r3, #8
 800f71e:	d104      	bne.n	800f72a <HAL_TIM_PWM_Start+0xa2>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2202      	movs	r2, #2
 800f724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f728:	e003      	b.n	800f732 <HAL_TIM_PWM_Start+0xaa>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2202      	movs	r2, #2
 800f72e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2201      	movs	r2, #1
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f000 fe04 	bl	8010348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4a2d      	ldr	r2, [pc, #180]	@ (800f7fc <HAL_TIM_PWM_Start+0x174>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d004      	beq.n	800f754 <HAL_TIM_PWM_Start+0xcc>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	4a2c      	ldr	r2, [pc, #176]	@ (800f800 <HAL_TIM_PWM_Start+0x178>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d101      	bne.n	800f758 <HAL_TIM_PWM_Start+0xd0>
 800f754:	2301      	movs	r3, #1
 800f756:	e000      	b.n	800f75a <HAL_TIM_PWM_Start+0xd2>
 800f758:	2300      	movs	r3, #0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d007      	beq.n	800f76e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f76c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4a22      	ldr	r2, [pc, #136]	@ (800f7fc <HAL_TIM_PWM_Start+0x174>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d022      	beq.n	800f7be <HAL_TIM_PWM_Start+0x136>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f780:	d01d      	beq.n	800f7be <HAL_TIM_PWM_Start+0x136>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a1f      	ldr	r2, [pc, #124]	@ (800f804 <HAL_TIM_PWM_Start+0x17c>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d018      	beq.n	800f7be <HAL_TIM_PWM_Start+0x136>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4a1d      	ldr	r2, [pc, #116]	@ (800f808 <HAL_TIM_PWM_Start+0x180>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d013      	beq.n	800f7be <HAL_TIM_PWM_Start+0x136>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4a1c      	ldr	r2, [pc, #112]	@ (800f80c <HAL_TIM_PWM_Start+0x184>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d00e      	beq.n	800f7be <HAL_TIM_PWM_Start+0x136>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4a16      	ldr	r2, [pc, #88]	@ (800f800 <HAL_TIM_PWM_Start+0x178>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d009      	beq.n	800f7be <HAL_TIM_PWM_Start+0x136>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	4a18      	ldr	r2, [pc, #96]	@ (800f810 <HAL_TIM_PWM_Start+0x188>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d004      	beq.n	800f7be <HAL_TIM_PWM_Start+0x136>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	4a16      	ldr	r2, [pc, #88]	@ (800f814 <HAL_TIM_PWM_Start+0x18c>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d111      	bne.n	800f7e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	f003 0307 	and.w	r3, r3, #7
 800f7c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2b06      	cmp	r3, #6
 800f7ce:	d010      	beq.n	800f7f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f042 0201 	orr.w	r2, r2, #1
 800f7de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7e0:	e007      	b.n	800f7f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f042 0201 	orr.w	r2, r2, #1
 800f7f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f7f2:	2300      	movs	r3, #0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	40010000 	.word	0x40010000
 800f800:	40010400 	.word	0x40010400
 800f804:	40000400 	.word	0x40000400
 800f808:	40000800 	.word	0x40000800
 800f80c:	40000c00 	.word	0x40000c00
 800f810:	40014000 	.word	0x40014000
 800f814:	40001800 	.word	0x40001800

0800f818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	691b      	ldr	r3, [r3, #16]
 800f82e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	f003 0302 	and.w	r3, r3, #2
 800f836:	2b00      	cmp	r3, #0
 800f838:	d020      	beq.n	800f87c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f003 0302 	and.w	r3, r3, #2
 800f840:	2b00      	cmp	r3, #0
 800f842:	d01b      	beq.n	800f87c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f06f 0202 	mvn.w	r2, #2
 800f84c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2201      	movs	r2, #1
 800f852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	699b      	ldr	r3, [r3, #24]
 800f85a:	f003 0303 	and.w	r3, r3, #3
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 fa5b 	bl	800fd1e <HAL_TIM_IC_CaptureCallback>
 800f868:	e005      	b.n	800f876 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 fa4d 	bl	800fd0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fa5e 	bl	800fd32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	f003 0304 	and.w	r3, r3, #4
 800f882:	2b00      	cmp	r3, #0
 800f884:	d020      	beq.n	800f8c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f003 0304 	and.w	r3, r3, #4
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d01b      	beq.n	800f8c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f06f 0204 	mvn.w	r2, #4
 800f898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2202      	movs	r2, #2
 800f89e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	699b      	ldr	r3, [r3, #24]
 800f8a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d003      	beq.n	800f8b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 fa35 	bl	800fd1e <HAL_TIM_IC_CaptureCallback>
 800f8b4:	e005      	b.n	800f8c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 fa27 	bl	800fd0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 fa38 	bl	800fd32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	f003 0308 	and.w	r3, r3, #8
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d020      	beq.n	800f914 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f003 0308 	and.w	r3, r3, #8
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d01b      	beq.n	800f914 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f06f 0208 	mvn.w	r2, #8
 800f8e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2204      	movs	r2, #4
 800f8ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	69db      	ldr	r3, [r3, #28]
 800f8f2:	f003 0303 	and.w	r3, r3, #3
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d003      	beq.n	800f902 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f000 fa0f 	bl	800fd1e <HAL_TIM_IC_CaptureCallback>
 800f900:	e005      	b.n	800f90e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 fa01 	bl	800fd0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fa12 	bl	800fd32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	f003 0310 	and.w	r3, r3, #16
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d020      	beq.n	800f960 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f003 0310 	and.w	r3, r3, #16
 800f924:	2b00      	cmp	r3, #0
 800f926:	d01b      	beq.n	800f960 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f06f 0210 	mvn.w	r2, #16
 800f930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2208      	movs	r2, #8
 800f936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	69db      	ldr	r3, [r3, #28]
 800f93e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f942:	2b00      	cmp	r3, #0
 800f944:	d003      	beq.n	800f94e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f000 f9e9 	bl	800fd1e <HAL_TIM_IC_CaptureCallback>
 800f94c:	e005      	b.n	800f95a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 f9db 	bl	800fd0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 f9ec 	bl	800fd32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2200      	movs	r2, #0
 800f95e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	f003 0301 	and.w	r3, r3, #1
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00c      	beq.n	800f984 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f003 0301 	and.w	r3, r3, #1
 800f970:	2b00      	cmp	r3, #0
 800f972:	d007      	beq.n	800f984 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f06f 0201 	mvn.w	r2, #1
 800f97c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f7fa fe3a 	bl	800a5f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00c      	beq.n	800f9a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f994:	2b00      	cmp	r3, #0
 800f996:	d007      	beq.n	800f9a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f000 fdce 	bl	8010544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d00c      	beq.n	800f9cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d007      	beq.n	800f9cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f9c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f9bd 	bl	800fd46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	f003 0320 	and.w	r3, r3, #32
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00c      	beq.n	800f9f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f003 0320 	and.w	r3, r3, #32
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d007      	beq.n	800f9f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f06f 0220 	mvn.w	r2, #32
 800f9e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 fda0 	bl	8010530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f9f0:	bf00      	nop
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b086      	sub	sp, #24
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d101      	bne.n	800fa16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fa12:	2302      	movs	r3, #2
 800fa14:	e0ae      	b.n	800fb74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2201      	movs	r2, #1
 800fa1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2b0c      	cmp	r3, #12
 800fa22:	f200 809f 	bhi.w	800fb64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fa26:	a201      	add	r2, pc, #4	@ (adr r2, 800fa2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2c:	0800fa61 	.word	0x0800fa61
 800fa30:	0800fb65 	.word	0x0800fb65
 800fa34:	0800fb65 	.word	0x0800fb65
 800fa38:	0800fb65 	.word	0x0800fb65
 800fa3c:	0800faa1 	.word	0x0800faa1
 800fa40:	0800fb65 	.word	0x0800fb65
 800fa44:	0800fb65 	.word	0x0800fb65
 800fa48:	0800fb65 	.word	0x0800fb65
 800fa4c:	0800fae3 	.word	0x0800fae3
 800fa50:	0800fb65 	.word	0x0800fb65
 800fa54:	0800fb65 	.word	0x0800fb65
 800fa58:	0800fb65 	.word	0x0800fb65
 800fa5c:	0800fb23 	.word	0x0800fb23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	68b9      	ldr	r1, [r7, #8]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 fa24 	bl	800feb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	699a      	ldr	r2, [r3, #24]
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f042 0208 	orr.w	r2, r2, #8
 800fa7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	699a      	ldr	r2, [r3, #24]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f022 0204 	bic.w	r2, r2, #4
 800fa8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6999      	ldr	r1, [r3, #24]
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	691a      	ldr	r2, [r3, #16]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	430a      	orrs	r2, r1
 800fa9c:	619a      	str	r2, [r3, #24]
      break;
 800fa9e:	e064      	b.n	800fb6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	68b9      	ldr	r1, [r7, #8]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f000 fa74 	bl	800ff94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	699a      	ldr	r2, [r3, #24]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800faba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	699a      	ldr	r2, [r3, #24]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800faca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	6999      	ldr	r1, [r3, #24]
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	021a      	lsls	r2, r3, #8
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	430a      	orrs	r2, r1
 800fade:	619a      	str	r2, [r3, #24]
      break;
 800fae0:	e043      	b.n	800fb6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68b9      	ldr	r1, [r7, #8]
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 fac9 	bl	8010080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	69da      	ldr	r2, [r3, #28]
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f042 0208 	orr.w	r2, r2, #8
 800fafc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	69da      	ldr	r2, [r3, #28]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f022 0204 	bic.w	r2, r2, #4
 800fb0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	69d9      	ldr	r1, [r3, #28]
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	691a      	ldr	r2, [r3, #16]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	430a      	orrs	r2, r1
 800fb1e:	61da      	str	r2, [r3, #28]
      break;
 800fb20:	e023      	b.n	800fb6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	68b9      	ldr	r1, [r7, #8]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 fb1d 	bl	8010168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	69da      	ldr	r2, [r3, #28]
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fb3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	69da      	ldr	r2, [r3, #28]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fb4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	69d9      	ldr	r1, [r3, #28]
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	021a      	lsls	r2, r3, #8
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	430a      	orrs	r2, r1
 800fb60:	61da      	str	r2, [r3, #28]
      break;
 800fb62:	e002      	b.n	800fb6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800fb64:	2301      	movs	r3, #1
 800fb66:	75fb      	strb	r3, [r7, #23]
      break;
 800fb68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fb72:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3718      	adds	r7, #24
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fb86:	2300      	movs	r3, #0
 800fb88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d101      	bne.n	800fb98 <HAL_TIM_ConfigClockSource+0x1c>
 800fb94:	2302      	movs	r3, #2
 800fb96:	e0b4      	b.n	800fd02 <HAL_TIM_ConfigClockSource+0x186>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2202      	movs	r2, #2
 800fba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fbb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fbbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fbd0:	d03e      	beq.n	800fc50 <HAL_TIM_ConfigClockSource+0xd4>
 800fbd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fbd6:	f200 8087 	bhi.w	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
 800fbda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fbde:	f000 8086 	beq.w	800fcee <HAL_TIM_ConfigClockSource+0x172>
 800fbe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fbe6:	d87f      	bhi.n	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
 800fbe8:	2b70      	cmp	r3, #112	@ 0x70
 800fbea:	d01a      	beq.n	800fc22 <HAL_TIM_ConfigClockSource+0xa6>
 800fbec:	2b70      	cmp	r3, #112	@ 0x70
 800fbee:	d87b      	bhi.n	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
 800fbf0:	2b60      	cmp	r3, #96	@ 0x60
 800fbf2:	d050      	beq.n	800fc96 <HAL_TIM_ConfigClockSource+0x11a>
 800fbf4:	2b60      	cmp	r3, #96	@ 0x60
 800fbf6:	d877      	bhi.n	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
 800fbf8:	2b50      	cmp	r3, #80	@ 0x50
 800fbfa:	d03c      	beq.n	800fc76 <HAL_TIM_ConfigClockSource+0xfa>
 800fbfc:	2b50      	cmp	r3, #80	@ 0x50
 800fbfe:	d873      	bhi.n	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
 800fc00:	2b40      	cmp	r3, #64	@ 0x40
 800fc02:	d058      	beq.n	800fcb6 <HAL_TIM_ConfigClockSource+0x13a>
 800fc04:	2b40      	cmp	r3, #64	@ 0x40
 800fc06:	d86f      	bhi.n	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
 800fc08:	2b30      	cmp	r3, #48	@ 0x30
 800fc0a:	d064      	beq.n	800fcd6 <HAL_TIM_ConfigClockSource+0x15a>
 800fc0c:	2b30      	cmp	r3, #48	@ 0x30
 800fc0e:	d86b      	bhi.n	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
 800fc10:	2b20      	cmp	r3, #32
 800fc12:	d060      	beq.n	800fcd6 <HAL_TIM_ConfigClockSource+0x15a>
 800fc14:	2b20      	cmp	r3, #32
 800fc16:	d867      	bhi.n	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d05c      	beq.n	800fcd6 <HAL_TIM_ConfigClockSource+0x15a>
 800fc1c:	2b10      	cmp	r3, #16
 800fc1e:	d05a      	beq.n	800fcd6 <HAL_TIM_ConfigClockSource+0x15a>
 800fc20:	e062      	b.n	800fce8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fc32:	f000 fb69 	bl	8010308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fc44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	609a      	str	r2, [r3, #8]
      break;
 800fc4e:	e04f      	b.n	800fcf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fc60:	f000 fb52 	bl	8010308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	689a      	ldr	r2, [r3, #8]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fc72:	609a      	str	r2, [r3, #8]
      break;
 800fc74:	e03c      	b.n	800fcf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc82:	461a      	mov	r2, r3
 800fc84:	f000 fac6 	bl	8010214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	2150      	movs	r1, #80	@ 0x50
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f000 fb1f 	bl	80102d2 <TIM_ITRx_SetConfig>
      break;
 800fc94:	e02c      	b.n	800fcf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fca2:	461a      	mov	r2, r3
 800fca4:	f000 fae5 	bl	8010272 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2160      	movs	r1, #96	@ 0x60
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f000 fb0f 	bl	80102d2 <TIM_ITRx_SetConfig>
      break;
 800fcb4:	e01c      	b.n	800fcf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f000 faa6 	bl	8010214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	2140      	movs	r1, #64	@ 0x40
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f000 faff 	bl	80102d2 <TIM_ITRx_SetConfig>
      break;
 800fcd4:	e00c      	b.n	800fcf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4619      	mov	r1, r3
 800fce0:	4610      	mov	r0, r2
 800fce2:	f000 faf6 	bl	80102d2 <TIM_ITRx_SetConfig>
      break;
 800fce6:	e003      	b.n	800fcf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fce8:	2301      	movs	r3, #1
 800fcea:	73fb      	strb	r3, [r7, #15]
      break;
 800fcec:	e000      	b.n	800fcf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fcee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3710      	adds	r7, #16
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fd0a:	b480      	push	{r7}
 800fd0c:	b083      	sub	sp, #12
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fd12:	bf00      	nop
 800fd14:	370c      	adds	r7, #12
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr

0800fd1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fd1e:	b480      	push	{r7}
 800fd20:	b083      	sub	sp, #12
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fd26:	bf00      	nop
 800fd28:	370c      	adds	r7, #12
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr

0800fd32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b083      	sub	sp, #12
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd3a:	bf00      	nop
 800fd3c:	370c      	adds	r7, #12
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr

0800fd46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd46:	b480      	push	{r7}
 800fd48:	b083      	sub	sp, #12
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd4e:	bf00      	nop
 800fd50:	370c      	adds	r7, #12
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
	...

0800fd5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a46      	ldr	r2, [pc, #280]	@ (800fe88 <TIM_Base_SetConfig+0x12c>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d013      	beq.n	800fd9c <TIM_Base_SetConfig+0x40>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd7a:	d00f      	beq.n	800fd9c <TIM_Base_SetConfig+0x40>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4a43      	ldr	r2, [pc, #268]	@ (800fe8c <TIM_Base_SetConfig+0x130>)
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d00b      	beq.n	800fd9c <TIM_Base_SetConfig+0x40>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4a42      	ldr	r2, [pc, #264]	@ (800fe90 <TIM_Base_SetConfig+0x134>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d007      	beq.n	800fd9c <TIM_Base_SetConfig+0x40>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4a41      	ldr	r2, [pc, #260]	@ (800fe94 <TIM_Base_SetConfig+0x138>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d003      	beq.n	800fd9c <TIM_Base_SetConfig+0x40>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4a40      	ldr	r2, [pc, #256]	@ (800fe98 <TIM_Base_SetConfig+0x13c>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d108      	bne.n	800fdae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fda2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4a35      	ldr	r2, [pc, #212]	@ (800fe88 <TIM_Base_SetConfig+0x12c>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d02b      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdbc:	d027      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4a32      	ldr	r2, [pc, #200]	@ (800fe8c <TIM_Base_SetConfig+0x130>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d023      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4a31      	ldr	r2, [pc, #196]	@ (800fe90 <TIM_Base_SetConfig+0x134>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d01f      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4a30      	ldr	r2, [pc, #192]	@ (800fe94 <TIM_Base_SetConfig+0x138>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d01b      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4a2f      	ldr	r2, [pc, #188]	@ (800fe98 <TIM_Base_SetConfig+0x13c>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d017      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4a2e      	ldr	r2, [pc, #184]	@ (800fe9c <TIM_Base_SetConfig+0x140>)
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d013      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4a2d      	ldr	r2, [pc, #180]	@ (800fea0 <TIM_Base_SetConfig+0x144>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d00f      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4a2c      	ldr	r2, [pc, #176]	@ (800fea4 <TIM_Base_SetConfig+0x148>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d00b      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	4a2b      	ldr	r2, [pc, #172]	@ (800fea8 <TIM_Base_SetConfig+0x14c>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d007      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	4a2a      	ldr	r2, [pc, #168]	@ (800feac <TIM_Base_SetConfig+0x150>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d003      	beq.n	800fe0e <TIM_Base_SetConfig+0xb2>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4a29      	ldr	r2, [pc, #164]	@ (800feb0 <TIM_Base_SetConfig+0x154>)
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d108      	bne.n	800fe20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fe14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	68fa      	ldr	r2, [r7, #12]
 800fe1c:	4313      	orrs	r3, r2
 800fe1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	695b      	ldr	r3, [r3, #20]
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	689a      	ldr	r2, [r3, #8]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4a10      	ldr	r2, [pc, #64]	@ (800fe88 <TIM_Base_SetConfig+0x12c>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d003      	beq.n	800fe54 <TIM_Base_SetConfig+0xf8>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4a12      	ldr	r2, [pc, #72]	@ (800fe98 <TIM_Base_SetConfig+0x13c>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d103      	bne.n	800fe5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	691a      	ldr	r2, [r3, #16]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	691b      	ldr	r3, [r3, #16]
 800fe66:	f003 0301 	and.w	r3, r3, #1
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d105      	bne.n	800fe7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	691b      	ldr	r3, [r3, #16]
 800fe72:	f023 0201 	bic.w	r2, r3, #1
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	611a      	str	r2, [r3, #16]
  }
}
 800fe7a:	bf00      	nop
 800fe7c:	3714      	adds	r7, #20
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	40010000 	.word	0x40010000
 800fe8c:	40000400 	.word	0x40000400
 800fe90:	40000800 	.word	0x40000800
 800fe94:	40000c00 	.word	0x40000c00
 800fe98:	40010400 	.word	0x40010400
 800fe9c:	40014000 	.word	0x40014000
 800fea0:	40014400 	.word	0x40014400
 800fea4:	40014800 	.word	0x40014800
 800fea8:	40001800 	.word	0x40001800
 800feac:	40001c00 	.word	0x40001c00
 800feb0:	40002000 	.word	0x40002000

0800feb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b087      	sub	sp, #28
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a1b      	ldr	r3, [r3, #32]
 800fec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6a1b      	ldr	r3, [r3, #32]
 800fec8:	f023 0201 	bic.w	r2, r3, #1
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	699b      	ldr	r3, [r3, #24]
 800feda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f023 0303 	bic.w	r3, r3, #3
 800feea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	68fa      	ldr	r2, [r7, #12]
 800fef2:	4313      	orrs	r3, r2
 800fef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	f023 0302 	bic.w	r3, r3, #2
 800fefc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	697a      	ldr	r2, [r7, #20]
 800ff04:	4313      	orrs	r3, r2
 800ff06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a20      	ldr	r2, [pc, #128]	@ (800ff8c <TIM_OC1_SetConfig+0xd8>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d003      	beq.n	800ff18 <TIM_OC1_SetConfig+0x64>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	4a1f      	ldr	r2, [pc, #124]	@ (800ff90 <TIM_OC1_SetConfig+0xdc>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d10c      	bne.n	800ff32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	f023 0308 	bic.w	r3, r3, #8
 800ff1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	f023 0304 	bic.w	r3, r3, #4
 800ff30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4a15      	ldr	r2, [pc, #84]	@ (800ff8c <TIM_OC1_SetConfig+0xd8>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d003      	beq.n	800ff42 <TIM_OC1_SetConfig+0x8e>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4a14      	ldr	r2, [pc, #80]	@ (800ff90 <TIM_OC1_SetConfig+0xdc>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d111      	bne.n	800ff66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ff50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	695b      	ldr	r3, [r3, #20]
 800ff56:	693a      	ldr	r2, [r7, #16]
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	699b      	ldr	r3, [r3, #24]
 800ff60:	693a      	ldr	r2, [r7, #16]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	693a      	ldr	r2, [r7, #16]
 800ff6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	685a      	ldr	r2, [r3, #4]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	697a      	ldr	r2, [r7, #20]
 800ff7e:	621a      	str	r2, [r3, #32]
}
 800ff80:	bf00      	nop
 800ff82:	371c      	adds	r7, #28
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr
 800ff8c:	40010000 	.word	0x40010000
 800ff90:	40010400 	.word	0x40010400

0800ff94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b087      	sub	sp, #28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a1b      	ldr	r3, [r3, #32]
 800ffa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a1b      	ldr	r3, [r3, #32]
 800ffa8:	f023 0210 	bic.w	r2, r3, #16
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	699b      	ldr	r3, [r3, #24]
 800ffba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ffc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ffca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	021b      	lsls	r3, r3, #8
 800ffd2:	68fa      	ldr	r2, [r7, #12]
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	f023 0320 	bic.w	r3, r3, #32
 800ffde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	011b      	lsls	r3, r3, #4
 800ffe6:	697a      	ldr	r2, [r7, #20]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	4a22      	ldr	r2, [pc, #136]	@ (8010078 <TIM_OC2_SetConfig+0xe4>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d003      	beq.n	800fffc <TIM_OC2_SetConfig+0x68>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4a21      	ldr	r2, [pc, #132]	@ (801007c <TIM_OC2_SetConfig+0xe8>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d10d      	bne.n	8010018 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	011b      	lsls	r3, r3, #4
 801000a:	697a      	ldr	r2, [r7, #20]
 801000c:	4313      	orrs	r3, r2
 801000e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010016:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	4a17      	ldr	r2, [pc, #92]	@ (8010078 <TIM_OC2_SetConfig+0xe4>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d003      	beq.n	8010028 <TIM_OC2_SetConfig+0x94>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	4a16      	ldr	r2, [pc, #88]	@ (801007c <TIM_OC2_SetConfig+0xe8>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d113      	bne.n	8010050 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801002e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	695b      	ldr	r3, [r3, #20]
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	693a      	ldr	r2, [r7, #16]
 8010040:	4313      	orrs	r3, r2
 8010042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	699b      	ldr	r3, [r3, #24]
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	693a      	ldr	r2, [r7, #16]
 801004c:	4313      	orrs	r3, r2
 801004e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	693a      	ldr	r2, [r7, #16]
 8010054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	685a      	ldr	r2, [r3, #4]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	697a      	ldr	r2, [r7, #20]
 8010068:	621a      	str	r2, [r3, #32]
}
 801006a:	bf00      	nop
 801006c:	371c      	adds	r7, #28
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	40010000 	.word	0x40010000
 801007c:	40010400 	.word	0x40010400

08010080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010080:	b480      	push	{r7}
 8010082:	b087      	sub	sp, #28
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a1b      	ldr	r3, [r3, #32]
 801008e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6a1b      	ldr	r3, [r3, #32]
 8010094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	69db      	ldr	r3, [r3, #28]
 80100a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80100ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f023 0303 	bic.w	r3, r3, #3
 80100b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	4313      	orrs	r3, r2
 80100c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80100c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	689b      	ldr	r3, [r3, #8]
 80100ce:	021b      	lsls	r3, r3, #8
 80100d0:	697a      	ldr	r2, [r7, #20]
 80100d2:	4313      	orrs	r3, r2
 80100d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4a21      	ldr	r2, [pc, #132]	@ (8010160 <TIM_OC3_SetConfig+0xe0>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d003      	beq.n	80100e6 <TIM_OC3_SetConfig+0x66>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4a20      	ldr	r2, [pc, #128]	@ (8010164 <TIM_OC3_SetConfig+0xe4>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d10d      	bne.n	8010102 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80100ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	021b      	lsls	r3, r3, #8
 80100f4:	697a      	ldr	r2, [r7, #20]
 80100f6:	4313      	orrs	r3, r2
 80100f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4a16      	ldr	r2, [pc, #88]	@ (8010160 <TIM_OC3_SetConfig+0xe0>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d003      	beq.n	8010112 <TIM_OC3_SetConfig+0x92>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4a15      	ldr	r2, [pc, #84]	@ (8010164 <TIM_OC3_SetConfig+0xe4>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d113      	bne.n	801013a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	695b      	ldr	r3, [r3, #20]
 8010126:	011b      	lsls	r3, r3, #4
 8010128:	693a      	ldr	r2, [r7, #16]
 801012a:	4313      	orrs	r3, r2
 801012c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	699b      	ldr	r3, [r3, #24]
 8010132:	011b      	lsls	r3, r3, #4
 8010134:	693a      	ldr	r2, [r7, #16]
 8010136:	4313      	orrs	r3, r2
 8010138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	693a      	ldr	r2, [r7, #16]
 801013e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	68fa      	ldr	r2, [r7, #12]
 8010144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	685a      	ldr	r2, [r3, #4]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	697a      	ldr	r2, [r7, #20]
 8010152:	621a      	str	r2, [r3, #32]
}
 8010154:	bf00      	nop
 8010156:	371c      	adds	r7, #28
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr
 8010160:	40010000 	.word	0x40010000
 8010164:	40010400 	.word	0x40010400

08010168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010168:	b480      	push	{r7}
 801016a:	b087      	sub	sp, #28
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6a1b      	ldr	r3, [r3, #32]
 8010176:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6a1b      	ldr	r3, [r3, #32]
 801017c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	69db      	ldr	r3, [r3, #28]
 801018e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801019e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	021b      	lsls	r3, r3, #8
 80101a6:	68fa      	ldr	r2, [r7, #12]
 80101a8:	4313      	orrs	r3, r2
 80101aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80101b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	031b      	lsls	r3, r3, #12
 80101ba:	693a      	ldr	r2, [r7, #16]
 80101bc:	4313      	orrs	r3, r2
 80101be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4a12      	ldr	r2, [pc, #72]	@ (801020c <TIM_OC4_SetConfig+0xa4>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d003      	beq.n	80101d0 <TIM_OC4_SetConfig+0x68>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4a11      	ldr	r2, [pc, #68]	@ (8010210 <TIM_OC4_SetConfig+0xa8>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d109      	bne.n	80101e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80101d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	695b      	ldr	r3, [r3, #20]
 80101dc:	019b      	lsls	r3, r3, #6
 80101de:	697a      	ldr	r2, [r7, #20]
 80101e0:	4313      	orrs	r3, r2
 80101e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	697a      	ldr	r2, [r7, #20]
 80101e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	685a      	ldr	r2, [r3, #4]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	693a      	ldr	r2, [r7, #16]
 80101fc:	621a      	str	r2, [r3, #32]
}
 80101fe:	bf00      	nop
 8010200:	371c      	adds	r7, #28
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
 801020a:	bf00      	nop
 801020c:	40010000 	.word	0x40010000
 8010210:	40010400 	.word	0x40010400

08010214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010214:	b480      	push	{r7}
 8010216:	b087      	sub	sp, #28
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6a1b      	ldr	r3, [r3, #32]
 8010224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	6a1b      	ldr	r3, [r3, #32]
 801022a:	f023 0201 	bic.w	r2, r3, #1
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	699b      	ldr	r3, [r3, #24]
 8010236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801023e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	011b      	lsls	r3, r3, #4
 8010244:	693a      	ldr	r2, [r7, #16]
 8010246:	4313      	orrs	r3, r2
 8010248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	f023 030a 	bic.w	r3, r3, #10
 8010250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010252:	697a      	ldr	r2, [r7, #20]
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	4313      	orrs	r3, r2
 8010258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	693a      	ldr	r2, [r7, #16]
 801025e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	697a      	ldr	r2, [r7, #20]
 8010264:	621a      	str	r2, [r3, #32]
}
 8010266:	bf00      	nop
 8010268:	371c      	adds	r7, #28
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010272:	b480      	push	{r7}
 8010274:	b087      	sub	sp, #28
 8010276:	af00      	add	r7, sp, #0
 8010278:	60f8      	str	r0, [r7, #12]
 801027a:	60b9      	str	r1, [r7, #8]
 801027c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6a1b      	ldr	r3, [r3, #32]
 8010282:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6a1b      	ldr	r3, [r3, #32]
 8010288:	f023 0210 	bic.w	r2, r3, #16
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	699b      	ldr	r3, [r3, #24]
 8010294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801029c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	031b      	lsls	r3, r3, #12
 80102a2:	693a      	ldr	r2, [r7, #16]
 80102a4:	4313      	orrs	r3, r2
 80102a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80102ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	011b      	lsls	r3, r3, #4
 80102b4:	697a      	ldr	r2, [r7, #20]
 80102b6:	4313      	orrs	r3, r2
 80102b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	693a      	ldr	r2, [r7, #16]
 80102be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	621a      	str	r2, [r3, #32]
}
 80102c6:	bf00      	nop
 80102c8:	371c      	adds	r7, #28
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr

080102d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80102d2:	b480      	push	{r7}
 80102d4:	b085      	sub	sp, #20
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
 80102da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	689b      	ldr	r3, [r3, #8]
 80102e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80102ea:	683a      	ldr	r2, [r7, #0]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4313      	orrs	r3, r2
 80102f0:	f043 0307 	orr.w	r3, r3, #7
 80102f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	68fa      	ldr	r2, [r7, #12]
 80102fa:	609a      	str	r2, [r3, #8]
}
 80102fc:	bf00      	nop
 80102fe:	3714      	adds	r7, #20
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010308:	b480      	push	{r7}
 801030a:	b087      	sub	sp, #28
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]
 8010314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	021a      	lsls	r2, r3, #8
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	431a      	orrs	r2, r3
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	4313      	orrs	r3, r2
 8010330:	697a      	ldr	r2, [r7, #20]
 8010332:	4313      	orrs	r3, r2
 8010334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	697a      	ldr	r2, [r7, #20]
 801033a:	609a      	str	r2, [r3, #8]
}
 801033c:	bf00      	nop
 801033e:	371c      	adds	r7, #28
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010348:	b480      	push	{r7}
 801034a:	b087      	sub	sp, #28
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	f003 031f 	and.w	r3, r3, #31
 801035a:	2201      	movs	r2, #1
 801035c:	fa02 f303 	lsl.w	r3, r2, r3
 8010360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	6a1a      	ldr	r2, [r3, #32]
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	43db      	mvns	r3, r3
 801036a:	401a      	ands	r2, r3
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	6a1a      	ldr	r2, [r3, #32]
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	f003 031f 	and.w	r3, r3, #31
 801037a:	6879      	ldr	r1, [r7, #4]
 801037c:	fa01 f303 	lsl.w	r3, r1, r3
 8010380:	431a      	orrs	r2, r3
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	621a      	str	r2, [r3, #32]
}
 8010386:	bf00      	nop
 8010388:	371c      	adds	r7, #28
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
	...

08010394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d101      	bne.n	80103ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80103a8:	2302      	movs	r3, #2
 80103aa:	e05a      	b.n	8010462 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2201      	movs	r2, #1
 80103b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2202      	movs	r2, #2
 80103b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	689b      	ldr	r3, [r3, #8]
 80103ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80103d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	4313      	orrs	r3, r2
 80103dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	4a21      	ldr	r2, [pc, #132]	@ (8010470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d022      	beq.n	8010436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103f8:	d01d      	beq.n	8010436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	4a1d      	ldr	r2, [pc, #116]	@ (8010474 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010400:	4293      	cmp	r3, r2
 8010402:	d018      	beq.n	8010436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4a1b      	ldr	r2, [pc, #108]	@ (8010478 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d013      	beq.n	8010436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	4a1a      	ldr	r2, [pc, #104]	@ (801047c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d00e      	beq.n	8010436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a18      	ldr	r2, [pc, #96]	@ (8010480 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d009      	beq.n	8010436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	4a17      	ldr	r2, [pc, #92]	@ (8010484 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d004      	beq.n	8010436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a15      	ldr	r2, [pc, #84]	@ (8010488 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d10c      	bne.n	8010450 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801043c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	4313      	orrs	r3, r2
 8010446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2201      	movs	r2, #1
 8010454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010460:	2300      	movs	r3, #0
}
 8010462:	4618      	mov	r0, r3
 8010464:	3714      	adds	r7, #20
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	40010000 	.word	0x40010000
 8010474:	40000400 	.word	0x40000400
 8010478:	40000800 	.word	0x40000800
 801047c:	40000c00 	.word	0x40000c00
 8010480:	40010400 	.word	0x40010400
 8010484:	40014000 	.word	0x40014000
 8010488:	40001800 	.word	0x40001800

0801048c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801048c:	b480      	push	{r7}
 801048e:	b085      	sub	sp, #20
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010496:	2300      	movs	r3, #0
 8010498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d101      	bne.n	80104a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80104a4:	2302      	movs	r3, #2
 80104a6:	e03d      	b.n	8010524 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2201      	movs	r2, #1
 80104ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	4313      	orrs	r3, r2
 80104bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	4313      	orrs	r3, r2
 80104ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	4313      	orrs	r3, r2
 80104d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4313      	orrs	r3, r2
 80104e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	4313      	orrs	r3, r2
 80104f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	695b      	ldr	r3, [r3, #20]
 8010500:	4313      	orrs	r3, r2
 8010502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	69db      	ldr	r3, [r3, #28]
 801050e:	4313      	orrs	r3, r2
 8010510:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3714      	adds	r7, #20
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010530:	b480      	push	{r7}
 8010532:	b083      	sub	sp, #12
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010538:	bf00      	nop
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr

08010544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010544:	b480      	push	{r7}
 8010546:	b083      	sub	sp, #12
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d101      	bne.n	801056a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	e042      	b.n	80105f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d106      	bne.n	8010584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7fa fade 	bl	800ab40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2224      	movs	r2, #36	@ 0x24
 8010588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	68da      	ldr	r2, [r3, #12]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801059a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f000 fdc1 	bl	8011124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	691a      	ldr	r2, [r3, #16]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80105b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	695a      	ldr	r2, [r3, #20]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80105c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	68da      	ldr	r2, [r3, #12]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80105d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2220      	movs	r2, #32
 80105dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2220      	movs	r2, #32
 80105e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3708      	adds	r7, #8
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b08c      	sub	sp, #48	@ 0x30
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	4613      	mov	r3, r2
 8010604:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801060c:	b2db      	uxtb	r3, r3
 801060e:	2b20      	cmp	r3, #32
 8010610:	d156      	bne.n	80106c0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d002      	beq.n	801061e <HAL_UART_Transmit_DMA+0x26>
 8010618:	88fb      	ldrh	r3, [r7, #6]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d101      	bne.n	8010622 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801061e:	2301      	movs	r3, #1
 8010620:	e04f      	b.n	80106c2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8010622:	68ba      	ldr	r2, [r7, #8]
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	88fa      	ldrh	r2, [r7, #6]
 801062c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	88fa      	ldrh	r2, [r7, #6]
 8010632:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	2200      	movs	r2, #0
 8010638:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2221      	movs	r2, #33	@ 0x21
 801063e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010646:	4a21      	ldr	r2, [pc, #132]	@ (80106cc <HAL_UART_Transmit_DMA+0xd4>)
 8010648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801064e:	4a20      	ldr	r2, [pc, #128]	@ (80106d0 <HAL_UART_Transmit_DMA+0xd8>)
 8010650:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010656:	4a1f      	ldr	r2, [pc, #124]	@ (80106d4 <HAL_UART_Transmit_DMA+0xdc>)
 8010658:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801065e:	2200      	movs	r2, #0
 8010660:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8010662:	f107 0308 	add.w	r3, r7, #8
 8010666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801066c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066e:	6819      	ldr	r1, [r3, #0]
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	3304      	adds	r3, #4
 8010676:	461a      	mov	r2, r3
 8010678:	88fb      	ldrh	r3, [r7, #6]
 801067a:	f7fc fdb7 	bl	800d1ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010686:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	3314      	adds	r3, #20
 801068e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	e853 3f00 	ldrex	r3, [r3]
 8010696:	617b      	str	r3, [r7, #20]
   return(result);
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801069e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	3314      	adds	r3, #20
 80106a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80106aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ac:	6a39      	ldr	r1, [r7, #32]
 80106ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106b0:	e841 2300 	strex	r3, r2, [r1]
 80106b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1e5      	bne.n	8010688 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80106bc:	2300      	movs	r3, #0
 80106be:	e000      	b.n	80106c2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80106c0:	2302      	movs	r3, #2
  }
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3730      	adds	r7, #48	@ 0x30
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	08010c51 	.word	0x08010c51
 80106d0:	08010ceb 	.word	0x08010ceb
 80106d4:	08010d07 	.word	0x08010d07

080106d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b0ba      	sub	sp, #232	@ 0xe8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	695b      	ldr	r3, [r3, #20]
 80106fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80106fe:	2300      	movs	r3, #0
 8010700:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8010704:	2300      	movs	r3, #0
 8010706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801070a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801070e:	f003 030f 	and.w	r3, r3, #15
 8010712:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8010716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801071a:	2b00      	cmp	r3, #0
 801071c:	d10f      	bne.n	801073e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801071e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010722:	f003 0320 	and.w	r3, r3, #32
 8010726:	2b00      	cmp	r3, #0
 8010728:	d009      	beq.n	801073e <HAL_UART_IRQHandler+0x66>
 801072a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801072e:	f003 0320 	and.w	r3, r3, #32
 8010732:	2b00      	cmp	r3, #0
 8010734:	d003      	beq.n	801073e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f000 fc36 	bl	8010fa8 <UART_Receive_IT>
      return;
 801073c:	e25b      	b.n	8010bf6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801073e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010742:	2b00      	cmp	r3, #0
 8010744:	f000 80de 	beq.w	8010904 <HAL_UART_IRQHandler+0x22c>
 8010748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801074c:	f003 0301 	and.w	r3, r3, #1
 8010750:	2b00      	cmp	r3, #0
 8010752:	d106      	bne.n	8010762 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010758:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 80d1 	beq.w	8010904 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010766:	f003 0301 	and.w	r3, r3, #1
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00b      	beq.n	8010786 <HAL_UART_IRQHandler+0xae>
 801076e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010776:	2b00      	cmp	r3, #0
 8010778:	d005      	beq.n	8010786 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801077e:	f043 0201 	orr.w	r2, r3, #1
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801078a:	f003 0304 	and.w	r3, r3, #4
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00b      	beq.n	80107aa <HAL_UART_IRQHandler+0xd2>
 8010792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010796:	f003 0301 	and.w	r3, r3, #1
 801079a:	2b00      	cmp	r3, #0
 801079c:	d005      	beq.n	80107aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107a2:	f043 0202 	orr.w	r2, r3, #2
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80107aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80107ae:	f003 0302 	and.w	r3, r3, #2
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d00b      	beq.n	80107ce <HAL_UART_IRQHandler+0xf6>
 80107b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80107ba:	f003 0301 	and.w	r3, r3, #1
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d005      	beq.n	80107ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107c6:	f043 0204 	orr.w	r2, r3, #4
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80107ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80107d2:	f003 0308 	and.w	r3, r3, #8
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d011      	beq.n	80107fe <HAL_UART_IRQHandler+0x126>
 80107da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80107de:	f003 0320 	and.w	r3, r3, #32
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d105      	bne.n	80107f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80107e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80107ea:	f003 0301 	and.w	r3, r3, #1
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d005      	beq.n	80107fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107f6:	f043 0208 	orr.w	r2, r3, #8
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 81f2 	beq.w	8010bec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801080c:	f003 0320 	and.w	r3, r3, #32
 8010810:	2b00      	cmp	r3, #0
 8010812:	d008      	beq.n	8010826 <HAL_UART_IRQHandler+0x14e>
 8010814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010818:	f003 0320 	and.w	r3, r3, #32
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 fbc1 	bl	8010fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	695b      	ldr	r3, [r3, #20]
 801082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010830:	2b40      	cmp	r3, #64	@ 0x40
 8010832:	bf0c      	ite	eq
 8010834:	2301      	moveq	r3, #1
 8010836:	2300      	movne	r3, #0
 8010838:	b2db      	uxtb	r3, r3
 801083a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010842:	f003 0308 	and.w	r3, r3, #8
 8010846:	2b00      	cmp	r3, #0
 8010848:	d103      	bne.n	8010852 <HAL_UART_IRQHandler+0x17a>
 801084a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801084e:	2b00      	cmp	r3, #0
 8010850:	d04f      	beq.n	80108f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 fac9 	bl	8010dea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	695b      	ldr	r3, [r3, #20]
 801085e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010862:	2b40      	cmp	r3, #64	@ 0x40
 8010864:	d141      	bne.n	80108ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	3314      	adds	r3, #20
 801086c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010874:	e853 3f00 	ldrex	r3, [r3]
 8010878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801087c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	3314      	adds	r3, #20
 801088e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801089e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80108a2:	e841 2300 	strex	r3, r2, [r1]
 80108a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80108aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d1d9      	bne.n	8010866 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d013      	beq.n	80108e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108be:	4a7e      	ldr	r2, [pc, #504]	@ (8010ab8 <HAL_UART_IRQHandler+0x3e0>)
 80108c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fc fd58 	bl	800d37c <HAL_DMA_Abort_IT>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d016      	beq.n	8010900 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80108dc:	4610      	mov	r0, r2
 80108de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108e0:	e00e      	b.n	8010900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 f99e 	bl	8010c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108e8:	e00a      	b.n	8010900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f99a 	bl	8010c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108f0:	e006      	b.n	8010900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f000 f996 	bl	8010c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80108fe:	e175      	b.n	8010bec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010900:	bf00      	nop
    return;
 8010902:	e173      	b.n	8010bec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010908:	2b01      	cmp	r3, #1
 801090a:	f040 814f 	bne.w	8010bac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801090e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010912:	f003 0310 	and.w	r3, r3, #16
 8010916:	2b00      	cmp	r3, #0
 8010918:	f000 8148 	beq.w	8010bac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801091c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010920:	f003 0310 	and.w	r3, r3, #16
 8010924:	2b00      	cmp	r3, #0
 8010926:	f000 8141 	beq.w	8010bac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801092a:	2300      	movs	r3, #0
 801092c:	60bb      	str	r3, [r7, #8]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	60bb      	str	r3, [r7, #8]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	60bb      	str	r3, [r7, #8]
 801093e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	695b      	ldr	r3, [r3, #20]
 8010946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801094a:	2b40      	cmp	r3, #64	@ 0x40
 801094c:	f040 80b6 	bne.w	8010abc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801095c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 8145 	beq.w	8010bf0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801096a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801096e:	429a      	cmp	r2, r3
 8010970:	f080 813e 	bcs.w	8010bf0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801097a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010980:	69db      	ldr	r3, [r3, #28]
 8010982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010986:	f000 8088 	beq.w	8010a9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	330c      	adds	r3, #12
 8010990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010998:	e853 3f00 	ldrex	r3, [r3]
 801099c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80109a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80109a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80109a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	330c      	adds	r3, #12
 80109b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80109b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80109ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80109c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80109c6:	e841 2300 	strex	r3, r2, [r1]
 80109ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80109ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1d9      	bne.n	801098a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3314      	adds	r3, #20
 80109dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80109e0:	e853 3f00 	ldrex	r3, [r3]
 80109e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80109e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80109e8:	f023 0301 	bic.w	r3, r3, #1
 80109ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3314      	adds	r3, #20
 80109f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80109fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80109fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010a06:	e841 2300 	strex	r3, r2, [r1]
 8010a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1e1      	bne.n	80109d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	3314      	adds	r3, #20
 8010a18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a1c:	e853 3f00 	ldrex	r3, [r3]
 8010a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	3314      	adds	r3, #20
 8010a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010a36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010a38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010a3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010a3e:	e841 2300 	strex	r3, r2, [r1]
 8010a42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d1e3      	bne.n	8010a12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2220      	movs	r2, #32
 8010a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2200      	movs	r2, #0
 8010a56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	330c      	adds	r3, #12
 8010a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a62:	e853 3f00 	ldrex	r3, [r3]
 8010a66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a6a:	f023 0310 	bic.w	r3, r3, #16
 8010a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	330c      	adds	r3, #12
 8010a78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010a7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8010a7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010a84:	e841 2300 	strex	r3, r2, [r1]
 8010a88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d1e3      	bne.n	8010a58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fc fc01 	bl	800d29c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2202      	movs	r2, #2
 8010a9e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	4619      	mov	r1, r3
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 f8c1 	bl	8010c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010ab6:	e09b      	b.n	8010bf0 <HAL_UART_IRQHandler+0x518>
 8010ab8:	08010eb1 	.word	0x08010eb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	1ad3      	subs	r3, r2, r3
 8010ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 808e 	beq.w	8010bf4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8010ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f000 8089 	beq.w	8010bf4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	330c      	adds	r3, #12
 8010ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aec:	e853 3f00 	ldrex	r3, [r3]
 8010af0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	330c      	adds	r3, #12
 8010b02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010b06:	647a      	str	r2, [r7, #68]	@ 0x44
 8010b08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010b0e:	e841 2300 	strex	r3, r2, [r1]
 8010b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1e3      	bne.n	8010ae2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	3314      	adds	r3, #20
 8010b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b24:	e853 3f00 	ldrex	r3, [r3]
 8010b28:	623b      	str	r3, [r7, #32]
   return(result);
 8010b2a:	6a3b      	ldr	r3, [r7, #32]
 8010b2c:	f023 0301 	bic.w	r3, r3, #1
 8010b30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	3314      	adds	r3, #20
 8010b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010b3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8010b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b46:	e841 2300 	strex	r3, r2, [r1]
 8010b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d1e3      	bne.n	8010b1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2220      	movs	r2, #32
 8010b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	330c      	adds	r3, #12
 8010b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	e853 3f00 	ldrex	r3, [r3]
 8010b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f023 0310 	bic.w	r3, r3, #16
 8010b76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	330c      	adds	r3, #12
 8010b80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010b84:	61fa      	str	r2, [r7, #28]
 8010b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b88:	69b9      	ldr	r1, [r7, #24]
 8010b8a:	69fa      	ldr	r2, [r7, #28]
 8010b8c:	e841 2300 	strex	r3, r2, [r1]
 8010b90:	617b      	str	r3, [r7, #20]
   return(result);
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d1e3      	bne.n	8010b60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2202      	movs	r2, #2
 8010b9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 f847 	bl	8010c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010baa:	e023      	b.n	8010bf4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d009      	beq.n	8010bcc <HAL_UART_IRQHandler+0x4f4>
 8010bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d003      	beq.n	8010bcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 f987 	bl	8010ed8 <UART_Transmit_IT>
    return;
 8010bca:	e014      	b.n	8010bf6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d00e      	beq.n	8010bf6 <HAL_UART_IRQHandler+0x51e>
 8010bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d008      	beq.n	8010bf6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f000 f9c7 	bl	8010f78 <UART_EndTransmit_IT>
    return;
 8010bea:	e004      	b.n	8010bf6 <HAL_UART_IRQHandler+0x51e>
    return;
 8010bec:	bf00      	nop
 8010bee:	e002      	b.n	8010bf6 <HAL_UART_IRQHandler+0x51e>
      return;
 8010bf0:	bf00      	nop
 8010bf2:	e000      	b.n	8010bf6 <HAL_UART_IRQHandler+0x51e>
      return;
 8010bf4:	bf00      	nop
  }
}
 8010bf6:	37e8      	adds	r7, #232	@ 0xe8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010c04:	bf00      	nop
 8010c06:	370c      	adds	r7, #12
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr

08010c10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010c18:	bf00      	nop
 8010c1a:	370c      	adds	r7, #12
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr

08010c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010c2c:	bf00      	nop
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	460b      	mov	r3, r1
 8010c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010c44:	bf00      	nop
 8010c46:	370c      	adds	r7, #12
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b090      	sub	sp, #64	@ 0x40
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d137      	bne.n	8010cdc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c6e:	2200      	movs	r2, #0
 8010c70:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	3314      	adds	r3, #20
 8010c78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7c:	e853 3f00 	ldrex	r3, [r3]
 8010c80:	623b      	str	r3, [r7, #32]
   return(result);
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010c88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	3314      	adds	r3, #20
 8010c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c92:	633a      	str	r2, [r7, #48]	@ 0x30
 8010c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c9a:	e841 2300 	strex	r3, r2, [r1]
 8010c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d1e5      	bne.n	8010c72 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	330c      	adds	r3, #12
 8010cac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	e853 3f00 	ldrex	r3, [r3]
 8010cb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	330c      	adds	r3, #12
 8010cc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cc6:	61fa      	str	r2, [r7, #28]
 8010cc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cca:	69b9      	ldr	r1, [r7, #24]
 8010ccc:	69fa      	ldr	r2, [r7, #28]
 8010cce:	e841 2300 	strex	r3, r2, [r1]
 8010cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1e5      	bne.n	8010ca6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010cda:	e002      	b.n	8010ce2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010cdc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010cde:	f7f9 fcb3 	bl	800a648 <HAL_UART_TxCpltCallback>
}
 8010ce2:	bf00      	nop
 8010ce4:	3740      	adds	r7, #64	@ 0x40
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b084      	sub	sp, #16
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cf6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010cf8:	68f8      	ldr	r0, [r7, #12]
 8010cfa:	f7ff ff7f 	bl	8010bfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cfe:	bf00      	nop
 8010d00:	3710      	adds	r7, #16
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}

08010d06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d06:	b580      	push	{r7, lr}
 8010d08:	b084      	sub	sp, #16
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	695b      	ldr	r3, [r3, #20]
 8010d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d22:	2b80      	cmp	r3, #128	@ 0x80
 8010d24:	bf0c      	ite	eq
 8010d26:	2301      	moveq	r3, #1
 8010d28:	2300      	movne	r3, #0
 8010d2a:	b2db      	uxtb	r3, r3
 8010d2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	2b21      	cmp	r3, #33	@ 0x21
 8010d38:	d108      	bne.n	8010d4c <UART_DMAError+0x46>
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d005      	beq.n	8010d4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	2200      	movs	r2, #0
 8010d44:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8010d46:	68b8      	ldr	r0, [r7, #8]
 8010d48:	f000 f827 	bl	8010d9a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	695b      	ldr	r3, [r3, #20]
 8010d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d56:	2b40      	cmp	r3, #64	@ 0x40
 8010d58:	bf0c      	ite	eq
 8010d5a:	2301      	moveq	r3, #1
 8010d5c:	2300      	movne	r3, #0
 8010d5e:	b2db      	uxtb	r3, r3
 8010d60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	2b22      	cmp	r3, #34	@ 0x22
 8010d6c:	d108      	bne.n	8010d80 <UART_DMAError+0x7a>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d005      	beq.n	8010d80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	2200      	movs	r2, #0
 8010d78:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8010d7a:	68b8      	ldr	r0, [r7, #8]
 8010d7c:	f000 f835 	bl	8010dea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d84:	f043 0210 	orr.w	r2, r3, #16
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d8c:	68b8      	ldr	r0, [r7, #8]
 8010d8e:	f7ff ff49 	bl	8010c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d92:	bf00      	nop
 8010d94:	3710      	adds	r7, #16
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}

08010d9a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010d9a:	b480      	push	{r7}
 8010d9c:	b089      	sub	sp, #36	@ 0x24
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	330c      	adds	r3, #12
 8010da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	e853 3f00 	ldrex	r3, [r3]
 8010db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010db8:	61fb      	str	r3, [r7, #28]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	330c      	adds	r3, #12
 8010dc0:	69fa      	ldr	r2, [r7, #28]
 8010dc2:	61ba      	str	r2, [r7, #24]
 8010dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc6:	6979      	ldr	r1, [r7, #20]
 8010dc8:	69ba      	ldr	r2, [r7, #24]
 8010dca:	e841 2300 	strex	r3, r2, [r1]
 8010dce:	613b      	str	r3, [r7, #16]
   return(result);
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1e5      	bne.n	8010da2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2220      	movs	r2, #32
 8010dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8010dde:	bf00      	nop
 8010de0:	3724      	adds	r7, #36	@ 0x24
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010dea:	b480      	push	{r7}
 8010dec:	b095      	sub	sp, #84	@ 0x54
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	330c      	adds	r3, #12
 8010df8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dfc:	e853 3f00 	ldrex	r3, [r3]
 8010e00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	330c      	adds	r3, #12
 8010e10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010e12:	643a      	str	r2, [r7, #64]	@ 0x40
 8010e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e1a:	e841 2300 	strex	r3, r2, [r1]
 8010e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1e5      	bne.n	8010df2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	3314      	adds	r3, #20
 8010e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e2e:	6a3b      	ldr	r3, [r7, #32]
 8010e30:	e853 3f00 	ldrex	r3, [r3]
 8010e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	f023 0301 	bic.w	r3, r3, #1
 8010e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	3314      	adds	r3, #20
 8010e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e4e:	e841 2300 	strex	r3, r2, [r1]
 8010e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d1e5      	bne.n	8010e26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d119      	bne.n	8010e96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	330c      	adds	r3, #12
 8010e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	e853 3f00 	ldrex	r3, [r3]
 8010e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	f023 0310 	bic.w	r3, r3, #16
 8010e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	330c      	adds	r3, #12
 8010e80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e82:	61ba      	str	r2, [r7, #24]
 8010e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e86:	6979      	ldr	r1, [r7, #20]
 8010e88:	69ba      	ldr	r2, [r7, #24]
 8010e8a:	e841 2300 	strex	r3, r2, [r1]
 8010e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1e5      	bne.n	8010e62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2220      	movs	r2, #32
 8010e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010ea4:	bf00      	nop
 8010ea6:	3754      	adds	r7, #84	@ 0x54
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr

08010eb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ebc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f7ff feaa 	bl	8010c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ed0:	bf00      	nop
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010ed8:	b480      	push	{r7}
 8010eda:	b085      	sub	sp, #20
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	2b21      	cmp	r3, #33	@ 0x21
 8010eea:	d13e      	bne.n	8010f6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	689b      	ldr	r3, [r3, #8]
 8010ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ef4:	d114      	bne.n	8010f20 <UART_Transmit_IT+0x48>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	691b      	ldr	r3, [r3, #16]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d110      	bne.n	8010f20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	881b      	ldrh	r3, [r3, #0]
 8010f08:	461a      	mov	r2, r3
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010f12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6a1b      	ldr	r3, [r3, #32]
 8010f18:	1c9a      	adds	r2, r3, #2
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	621a      	str	r2, [r3, #32]
 8010f1e:	e008      	b.n	8010f32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6a1b      	ldr	r3, [r3, #32]
 8010f24:	1c59      	adds	r1, r3, #1
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	6211      	str	r1, [r2, #32]
 8010f2a:	781a      	ldrb	r2, [r3, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	3b01      	subs	r3, #1
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d10f      	bne.n	8010f66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68da      	ldr	r2, [r3, #12]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010f54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	68da      	ldr	r2, [r3, #12]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010f64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010f66:	2300      	movs	r3, #0
 8010f68:	e000      	b.n	8010f6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010f6a:	2302      	movs	r3, #2
  }
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	68da      	ldr	r2, [r3, #12]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2220      	movs	r2, #32
 8010f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7f9 fb55 	bl	800a648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b08c      	sub	sp, #48	@ 0x30
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	2b22      	cmp	r3, #34	@ 0x22
 8010fba:	f040 80ae 	bne.w	801111a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010fc6:	d117      	bne.n	8010ff8 <UART_Receive_IT+0x50>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	691b      	ldr	r3, [r3, #16]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d113      	bne.n	8010ff8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ff0:	1c9a      	adds	r2, r3, #2
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8010ff6:	e026      	b.n	8011046 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8010ffe:	2300      	movs	r3, #0
 8011000:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801100a:	d007      	beq.n	801101c <UART_Receive_IT+0x74>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	689b      	ldr	r3, [r3, #8]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d10a      	bne.n	801102a <UART_Receive_IT+0x82>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	691b      	ldr	r3, [r3, #16]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d106      	bne.n	801102a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	b2da      	uxtb	r2, r3
 8011024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011026:	701a      	strb	r2, [r3, #0]
 8011028:	e008      	b.n	801103c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	b2db      	uxtb	r3, r3
 8011032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011036:	b2da      	uxtb	r2, r3
 8011038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801103a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801104a:	b29b      	uxth	r3, r3
 801104c:	3b01      	subs	r3, #1
 801104e:	b29b      	uxth	r3, r3
 8011050:	687a      	ldr	r2, [r7, #4]
 8011052:	4619      	mov	r1, r3
 8011054:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011056:	2b00      	cmp	r3, #0
 8011058:	d15d      	bne.n	8011116 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	68da      	ldr	r2, [r3, #12]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f022 0220 	bic.w	r2, r2, #32
 8011068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	68da      	ldr	r2, [r3, #12]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	695a      	ldr	r2, [r3, #20]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f022 0201 	bic.w	r2, r2, #1
 8011088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2220      	movs	r2, #32
 801108e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2200      	movs	r2, #0
 8011096:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801109c:	2b01      	cmp	r3, #1
 801109e:	d135      	bne.n	801110c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2200      	movs	r2, #0
 80110a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	330c      	adds	r3, #12
 80110ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	e853 3f00 	ldrex	r3, [r3]
 80110b4:	613b      	str	r3, [r7, #16]
   return(result);
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	f023 0310 	bic.w	r3, r3, #16
 80110bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	330c      	adds	r3, #12
 80110c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110c6:	623a      	str	r2, [r7, #32]
 80110c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ca:	69f9      	ldr	r1, [r7, #28]
 80110cc:	6a3a      	ldr	r2, [r7, #32]
 80110ce:	e841 2300 	strex	r3, r2, [r1]
 80110d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80110d4:	69bb      	ldr	r3, [r7, #24]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d1e5      	bne.n	80110a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f003 0310 	and.w	r3, r3, #16
 80110e4:	2b10      	cmp	r3, #16
 80110e6:	d10a      	bne.n	80110fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80110e8:	2300      	movs	r3, #0
 80110ea:	60fb      	str	r3, [r7, #12]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	60fb      	str	r3, [r7, #12]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	60fb      	str	r3, [r7, #12]
 80110fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011102:	4619      	mov	r1, r3
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff fd97 	bl	8010c38 <HAL_UARTEx_RxEventCallback>
 801110a:	e002      	b.n	8011112 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f7ff fd7f 	bl	8010c10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011112:	2300      	movs	r3, #0
 8011114:	e002      	b.n	801111c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8011116:	2300      	movs	r3, #0
 8011118:	e000      	b.n	801111c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801111a:	2302      	movs	r3, #2
  }
}
 801111c:	4618      	mov	r0, r3
 801111e:	3730      	adds	r7, #48	@ 0x30
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011128:	b0c0      	sub	sp, #256	@ 0x100
 801112a:	af00      	add	r7, sp, #0
 801112c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	691b      	ldr	r3, [r3, #16]
 8011138:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801113c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011140:	68d9      	ldr	r1, [r3, #12]
 8011142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	ea40 0301 	orr.w	r3, r0, r1
 801114c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801114e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011152:	689a      	ldr	r2, [r3, #8]
 8011154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	431a      	orrs	r2, r3
 801115c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011160:	695b      	ldr	r3, [r3, #20]
 8011162:	431a      	orrs	r2, r3
 8011164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011168:	69db      	ldr	r3, [r3, #28]
 801116a:	4313      	orrs	r3, r2
 801116c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801117c:	f021 010c 	bic.w	r1, r1, #12
 8011180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801118a:	430b      	orrs	r3, r1
 801118c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801118e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	695b      	ldr	r3, [r3, #20]
 8011196:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801119a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801119e:	6999      	ldr	r1, [r3, #24]
 80111a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	ea40 0301 	orr.w	r3, r0, r1
 80111aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80111ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	4b8f      	ldr	r3, [pc, #572]	@ (80113f0 <UART_SetConfig+0x2cc>)
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d005      	beq.n	80111c4 <UART_SetConfig+0xa0>
 80111b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	4b8d      	ldr	r3, [pc, #564]	@ (80113f4 <UART_SetConfig+0x2d0>)
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d104      	bne.n	80111ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80111c4:	f7fc fe6a 	bl	800de9c <HAL_RCC_GetPCLK2Freq>
 80111c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80111cc:	e003      	b.n	80111d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80111ce:	f7fc fe51 	bl	800de74 <HAL_RCC_GetPCLK1Freq>
 80111d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80111d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111da:	69db      	ldr	r3, [r3, #28]
 80111dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80111e0:	f040 810c 	bne.w	80113fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80111e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80111e8:	2200      	movs	r2, #0
 80111ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80111ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80111f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80111f6:	4622      	mov	r2, r4
 80111f8:	462b      	mov	r3, r5
 80111fa:	1891      	adds	r1, r2, r2
 80111fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80111fe:	415b      	adcs	r3, r3
 8011200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011206:	4621      	mov	r1, r4
 8011208:	eb12 0801 	adds.w	r8, r2, r1
 801120c:	4629      	mov	r1, r5
 801120e:	eb43 0901 	adc.w	r9, r3, r1
 8011212:	f04f 0200 	mov.w	r2, #0
 8011216:	f04f 0300 	mov.w	r3, #0
 801121a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801121e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011226:	4690      	mov	r8, r2
 8011228:	4699      	mov	r9, r3
 801122a:	4623      	mov	r3, r4
 801122c:	eb18 0303 	adds.w	r3, r8, r3
 8011230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011234:	462b      	mov	r3, r5
 8011236:	eb49 0303 	adc.w	r3, r9, r3
 801123a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801123e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	2200      	movs	r2, #0
 8011246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801124a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801124e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011252:	460b      	mov	r3, r1
 8011254:	18db      	adds	r3, r3, r3
 8011256:	653b      	str	r3, [r7, #80]	@ 0x50
 8011258:	4613      	mov	r3, r2
 801125a:	eb42 0303 	adc.w	r3, r2, r3
 801125e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011268:	f7ef fd2e 	bl	8000cc8 <__aeabi_uldivmod>
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	4b61      	ldr	r3, [pc, #388]	@ (80113f8 <UART_SetConfig+0x2d4>)
 8011272:	fba3 2302 	umull	r2, r3, r3, r2
 8011276:	095b      	lsrs	r3, r3, #5
 8011278:	011c      	lsls	r4, r3, #4
 801127a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801127e:	2200      	movs	r2, #0
 8011280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011284:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801128c:	4642      	mov	r2, r8
 801128e:	464b      	mov	r3, r9
 8011290:	1891      	adds	r1, r2, r2
 8011292:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011294:	415b      	adcs	r3, r3
 8011296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801129c:	4641      	mov	r1, r8
 801129e:	eb12 0a01 	adds.w	sl, r2, r1
 80112a2:	4649      	mov	r1, r9
 80112a4:	eb43 0b01 	adc.w	fp, r3, r1
 80112a8:	f04f 0200 	mov.w	r2, #0
 80112ac:	f04f 0300 	mov.w	r3, #0
 80112b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80112b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80112b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80112bc:	4692      	mov	sl, r2
 80112be:	469b      	mov	fp, r3
 80112c0:	4643      	mov	r3, r8
 80112c2:	eb1a 0303 	adds.w	r3, sl, r3
 80112c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80112ca:	464b      	mov	r3, r9
 80112cc:	eb4b 0303 	adc.w	r3, fp, r3
 80112d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80112d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80112d8:	685b      	ldr	r3, [r3, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80112e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80112e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80112e8:	460b      	mov	r3, r1
 80112ea:	18db      	adds	r3, r3, r3
 80112ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80112ee:	4613      	mov	r3, r2
 80112f0:	eb42 0303 	adc.w	r3, r2, r3
 80112f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80112f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80112fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80112fe:	f7ef fce3 	bl	8000cc8 <__aeabi_uldivmod>
 8011302:	4602      	mov	r2, r0
 8011304:	460b      	mov	r3, r1
 8011306:	4611      	mov	r1, r2
 8011308:	4b3b      	ldr	r3, [pc, #236]	@ (80113f8 <UART_SetConfig+0x2d4>)
 801130a:	fba3 2301 	umull	r2, r3, r3, r1
 801130e:	095b      	lsrs	r3, r3, #5
 8011310:	2264      	movs	r2, #100	@ 0x64
 8011312:	fb02 f303 	mul.w	r3, r2, r3
 8011316:	1acb      	subs	r3, r1, r3
 8011318:	00db      	lsls	r3, r3, #3
 801131a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801131e:	4b36      	ldr	r3, [pc, #216]	@ (80113f8 <UART_SetConfig+0x2d4>)
 8011320:	fba3 2302 	umull	r2, r3, r3, r2
 8011324:	095b      	lsrs	r3, r3, #5
 8011326:	005b      	lsls	r3, r3, #1
 8011328:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801132c:	441c      	add	r4, r3
 801132e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011332:	2200      	movs	r2, #0
 8011334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011338:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801133c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011340:	4642      	mov	r2, r8
 8011342:	464b      	mov	r3, r9
 8011344:	1891      	adds	r1, r2, r2
 8011346:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011348:	415b      	adcs	r3, r3
 801134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801134c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011350:	4641      	mov	r1, r8
 8011352:	1851      	adds	r1, r2, r1
 8011354:	6339      	str	r1, [r7, #48]	@ 0x30
 8011356:	4649      	mov	r1, r9
 8011358:	414b      	adcs	r3, r1
 801135a:	637b      	str	r3, [r7, #52]	@ 0x34
 801135c:	f04f 0200 	mov.w	r2, #0
 8011360:	f04f 0300 	mov.w	r3, #0
 8011364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011368:	4659      	mov	r1, fp
 801136a:	00cb      	lsls	r3, r1, #3
 801136c:	4651      	mov	r1, sl
 801136e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011372:	4651      	mov	r1, sl
 8011374:	00ca      	lsls	r2, r1, #3
 8011376:	4610      	mov	r0, r2
 8011378:	4619      	mov	r1, r3
 801137a:	4603      	mov	r3, r0
 801137c:	4642      	mov	r2, r8
 801137e:	189b      	adds	r3, r3, r2
 8011380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011384:	464b      	mov	r3, r9
 8011386:	460a      	mov	r2, r1
 8011388:	eb42 0303 	adc.w	r3, r2, r3
 801138c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	2200      	movs	r2, #0
 8011398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801139c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80113a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80113a4:	460b      	mov	r3, r1
 80113a6:	18db      	adds	r3, r3, r3
 80113a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80113aa:	4613      	mov	r3, r2
 80113ac:	eb42 0303 	adc.w	r3, r2, r3
 80113b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80113b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80113b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80113ba:	f7ef fc85 	bl	8000cc8 <__aeabi_uldivmod>
 80113be:	4602      	mov	r2, r0
 80113c0:	460b      	mov	r3, r1
 80113c2:	4b0d      	ldr	r3, [pc, #52]	@ (80113f8 <UART_SetConfig+0x2d4>)
 80113c4:	fba3 1302 	umull	r1, r3, r3, r2
 80113c8:	095b      	lsrs	r3, r3, #5
 80113ca:	2164      	movs	r1, #100	@ 0x64
 80113cc:	fb01 f303 	mul.w	r3, r1, r3
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	00db      	lsls	r3, r3, #3
 80113d4:	3332      	adds	r3, #50	@ 0x32
 80113d6:	4a08      	ldr	r2, [pc, #32]	@ (80113f8 <UART_SetConfig+0x2d4>)
 80113d8:	fba2 2303 	umull	r2, r3, r2, r3
 80113dc:	095b      	lsrs	r3, r3, #5
 80113de:	f003 0207 	and.w	r2, r3, #7
 80113e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4422      	add	r2, r4
 80113ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80113ec:	e106      	b.n	80115fc <UART_SetConfig+0x4d8>
 80113ee:	bf00      	nop
 80113f0:	40011000 	.word	0x40011000
 80113f4:	40011400 	.word	0x40011400
 80113f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80113fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011400:	2200      	movs	r2, #0
 8011402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011406:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801140a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801140e:	4642      	mov	r2, r8
 8011410:	464b      	mov	r3, r9
 8011412:	1891      	adds	r1, r2, r2
 8011414:	6239      	str	r1, [r7, #32]
 8011416:	415b      	adcs	r3, r3
 8011418:	627b      	str	r3, [r7, #36]	@ 0x24
 801141a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801141e:	4641      	mov	r1, r8
 8011420:	1854      	adds	r4, r2, r1
 8011422:	4649      	mov	r1, r9
 8011424:	eb43 0501 	adc.w	r5, r3, r1
 8011428:	f04f 0200 	mov.w	r2, #0
 801142c:	f04f 0300 	mov.w	r3, #0
 8011430:	00eb      	lsls	r3, r5, #3
 8011432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011436:	00e2      	lsls	r2, r4, #3
 8011438:	4614      	mov	r4, r2
 801143a:	461d      	mov	r5, r3
 801143c:	4643      	mov	r3, r8
 801143e:	18e3      	adds	r3, r4, r3
 8011440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011444:	464b      	mov	r3, r9
 8011446:	eb45 0303 	adc.w	r3, r5, r3
 801144a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801144e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	2200      	movs	r2, #0
 8011456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801145a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801145e:	f04f 0200 	mov.w	r2, #0
 8011462:	f04f 0300 	mov.w	r3, #0
 8011466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801146a:	4629      	mov	r1, r5
 801146c:	008b      	lsls	r3, r1, #2
 801146e:	4621      	mov	r1, r4
 8011470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011474:	4621      	mov	r1, r4
 8011476:	008a      	lsls	r2, r1, #2
 8011478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801147c:	f7ef fc24 	bl	8000cc8 <__aeabi_uldivmod>
 8011480:	4602      	mov	r2, r0
 8011482:	460b      	mov	r3, r1
 8011484:	4b60      	ldr	r3, [pc, #384]	@ (8011608 <UART_SetConfig+0x4e4>)
 8011486:	fba3 2302 	umull	r2, r3, r3, r2
 801148a:	095b      	lsrs	r3, r3, #5
 801148c:	011c      	lsls	r4, r3, #4
 801148e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011492:	2200      	movs	r2, #0
 8011494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801149c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80114a0:	4642      	mov	r2, r8
 80114a2:	464b      	mov	r3, r9
 80114a4:	1891      	adds	r1, r2, r2
 80114a6:	61b9      	str	r1, [r7, #24]
 80114a8:	415b      	adcs	r3, r3
 80114aa:	61fb      	str	r3, [r7, #28]
 80114ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80114b0:	4641      	mov	r1, r8
 80114b2:	1851      	adds	r1, r2, r1
 80114b4:	6139      	str	r1, [r7, #16]
 80114b6:	4649      	mov	r1, r9
 80114b8:	414b      	adcs	r3, r1
 80114ba:	617b      	str	r3, [r7, #20]
 80114bc:	f04f 0200 	mov.w	r2, #0
 80114c0:	f04f 0300 	mov.w	r3, #0
 80114c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80114c8:	4659      	mov	r1, fp
 80114ca:	00cb      	lsls	r3, r1, #3
 80114cc:	4651      	mov	r1, sl
 80114ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80114d2:	4651      	mov	r1, sl
 80114d4:	00ca      	lsls	r2, r1, #3
 80114d6:	4610      	mov	r0, r2
 80114d8:	4619      	mov	r1, r3
 80114da:	4603      	mov	r3, r0
 80114dc:	4642      	mov	r2, r8
 80114de:	189b      	adds	r3, r3, r2
 80114e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80114e4:	464b      	mov	r3, r9
 80114e6:	460a      	mov	r2, r1
 80114e8:	eb42 0303 	adc.w	r3, r2, r3
 80114ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80114f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80114fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80114fc:	f04f 0200 	mov.w	r2, #0
 8011500:	f04f 0300 	mov.w	r3, #0
 8011504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011508:	4649      	mov	r1, r9
 801150a:	008b      	lsls	r3, r1, #2
 801150c:	4641      	mov	r1, r8
 801150e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011512:	4641      	mov	r1, r8
 8011514:	008a      	lsls	r2, r1, #2
 8011516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801151a:	f7ef fbd5 	bl	8000cc8 <__aeabi_uldivmod>
 801151e:	4602      	mov	r2, r0
 8011520:	460b      	mov	r3, r1
 8011522:	4611      	mov	r1, r2
 8011524:	4b38      	ldr	r3, [pc, #224]	@ (8011608 <UART_SetConfig+0x4e4>)
 8011526:	fba3 2301 	umull	r2, r3, r3, r1
 801152a:	095b      	lsrs	r3, r3, #5
 801152c:	2264      	movs	r2, #100	@ 0x64
 801152e:	fb02 f303 	mul.w	r3, r2, r3
 8011532:	1acb      	subs	r3, r1, r3
 8011534:	011b      	lsls	r3, r3, #4
 8011536:	3332      	adds	r3, #50	@ 0x32
 8011538:	4a33      	ldr	r2, [pc, #204]	@ (8011608 <UART_SetConfig+0x4e4>)
 801153a:	fba2 2303 	umull	r2, r3, r2, r3
 801153e:	095b      	lsrs	r3, r3, #5
 8011540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011544:	441c      	add	r4, r3
 8011546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801154a:	2200      	movs	r2, #0
 801154c:	673b      	str	r3, [r7, #112]	@ 0x70
 801154e:	677a      	str	r2, [r7, #116]	@ 0x74
 8011550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011554:	4642      	mov	r2, r8
 8011556:	464b      	mov	r3, r9
 8011558:	1891      	adds	r1, r2, r2
 801155a:	60b9      	str	r1, [r7, #8]
 801155c:	415b      	adcs	r3, r3
 801155e:	60fb      	str	r3, [r7, #12]
 8011560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011564:	4641      	mov	r1, r8
 8011566:	1851      	adds	r1, r2, r1
 8011568:	6039      	str	r1, [r7, #0]
 801156a:	4649      	mov	r1, r9
 801156c:	414b      	adcs	r3, r1
 801156e:	607b      	str	r3, [r7, #4]
 8011570:	f04f 0200 	mov.w	r2, #0
 8011574:	f04f 0300 	mov.w	r3, #0
 8011578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801157c:	4659      	mov	r1, fp
 801157e:	00cb      	lsls	r3, r1, #3
 8011580:	4651      	mov	r1, sl
 8011582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011586:	4651      	mov	r1, sl
 8011588:	00ca      	lsls	r2, r1, #3
 801158a:	4610      	mov	r0, r2
 801158c:	4619      	mov	r1, r3
 801158e:	4603      	mov	r3, r0
 8011590:	4642      	mov	r2, r8
 8011592:	189b      	adds	r3, r3, r2
 8011594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011596:	464b      	mov	r3, r9
 8011598:	460a      	mov	r2, r1
 801159a:	eb42 0303 	adc.w	r3, r2, r3
 801159e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80115a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	2200      	movs	r2, #0
 80115a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80115aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80115ac:	f04f 0200 	mov.w	r2, #0
 80115b0:	f04f 0300 	mov.w	r3, #0
 80115b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80115b8:	4649      	mov	r1, r9
 80115ba:	008b      	lsls	r3, r1, #2
 80115bc:	4641      	mov	r1, r8
 80115be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80115c2:	4641      	mov	r1, r8
 80115c4:	008a      	lsls	r2, r1, #2
 80115c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80115ca:	f7ef fb7d 	bl	8000cc8 <__aeabi_uldivmod>
 80115ce:	4602      	mov	r2, r0
 80115d0:	460b      	mov	r3, r1
 80115d2:	4b0d      	ldr	r3, [pc, #52]	@ (8011608 <UART_SetConfig+0x4e4>)
 80115d4:	fba3 1302 	umull	r1, r3, r3, r2
 80115d8:	095b      	lsrs	r3, r3, #5
 80115da:	2164      	movs	r1, #100	@ 0x64
 80115dc:	fb01 f303 	mul.w	r3, r1, r3
 80115e0:	1ad3      	subs	r3, r2, r3
 80115e2:	011b      	lsls	r3, r3, #4
 80115e4:	3332      	adds	r3, #50	@ 0x32
 80115e6:	4a08      	ldr	r2, [pc, #32]	@ (8011608 <UART_SetConfig+0x4e4>)
 80115e8:	fba2 2303 	umull	r2, r3, r2, r3
 80115ec:	095b      	lsrs	r3, r3, #5
 80115ee:	f003 020f 	and.w	r2, r3, #15
 80115f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4422      	add	r2, r4
 80115fa:	609a      	str	r2, [r3, #8]
}
 80115fc:	bf00      	nop
 80115fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011602:	46bd      	mov	sp, r7
 8011604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011608:	51eb851f 	.word	0x51eb851f

0801160c <calloc>:
 801160c:	4b02      	ldr	r3, [pc, #8]	@ (8011618 <calloc+0xc>)
 801160e:	460a      	mov	r2, r1
 8011610:	4601      	mov	r1, r0
 8011612:	6818      	ldr	r0, [r3, #0]
 8011614:	f000 b802 	b.w	801161c <_calloc_r>
 8011618:	200002d0 	.word	0x200002d0

0801161c <_calloc_r>:
 801161c:	b570      	push	{r4, r5, r6, lr}
 801161e:	fba1 5402 	umull	r5, r4, r1, r2
 8011622:	b93c      	cbnz	r4, 8011634 <_calloc_r+0x18>
 8011624:	4629      	mov	r1, r5
 8011626:	f000 f83f 	bl	80116a8 <_malloc_r>
 801162a:	4606      	mov	r6, r0
 801162c:	b928      	cbnz	r0, 801163a <_calloc_r+0x1e>
 801162e:	2600      	movs	r6, #0
 8011630:	4630      	mov	r0, r6
 8011632:	bd70      	pop	{r4, r5, r6, pc}
 8011634:	220c      	movs	r2, #12
 8011636:	6002      	str	r2, [r0, #0]
 8011638:	e7f9      	b.n	801162e <_calloc_r+0x12>
 801163a:	462a      	mov	r2, r5
 801163c:	4621      	mov	r1, r4
 801163e:	f001 f81b 	bl	8012678 <memset>
 8011642:	e7f5      	b.n	8011630 <_calloc_r+0x14>

08011644 <malloc>:
 8011644:	4b02      	ldr	r3, [pc, #8]	@ (8011650 <malloc+0xc>)
 8011646:	4601      	mov	r1, r0
 8011648:	6818      	ldr	r0, [r3, #0]
 801164a:	f000 b82d 	b.w	80116a8 <_malloc_r>
 801164e:	bf00      	nop
 8011650:	200002d0 	.word	0x200002d0

08011654 <free>:
 8011654:	4b02      	ldr	r3, [pc, #8]	@ (8011660 <free+0xc>)
 8011656:	4601      	mov	r1, r0
 8011658:	6818      	ldr	r0, [r3, #0]
 801165a:	f001 bef9 	b.w	8013450 <_free_r>
 801165e:	bf00      	nop
 8011660:	200002d0 	.word	0x200002d0

08011664 <sbrk_aligned>:
 8011664:	b570      	push	{r4, r5, r6, lr}
 8011666:	4e0f      	ldr	r6, [pc, #60]	@ (80116a4 <sbrk_aligned+0x40>)
 8011668:	460c      	mov	r4, r1
 801166a:	6831      	ldr	r1, [r6, #0]
 801166c:	4605      	mov	r5, r0
 801166e:	b911      	cbnz	r1, 8011676 <sbrk_aligned+0x12>
 8011670:	f001 f842 	bl	80126f8 <_sbrk_r>
 8011674:	6030      	str	r0, [r6, #0]
 8011676:	4621      	mov	r1, r4
 8011678:	4628      	mov	r0, r5
 801167a:	f001 f83d 	bl	80126f8 <_sbrk_r>
 801167e:	1c43      	adds	r3, r0, #1
 8011680:	d103      	bne.n	801168a <sbrk_aligned+0x26>
 8011682:	f04f 34ff 	mov.w	r4, #4294967295
 8011686:	4620      	mov	r0, r4
 8011688:	bd70      	pop	{r4, r5, r6, pc}
 801168a:	1cc4      	adds	r4, r0, #3
 801168c:	f024 0403 	bic.w	r4, r4, #3
 8011690:	42a0      	cmp	r0, r4
 8011692:	d0f8      	beq.n	8011686 <sbrk_aligned+0x22>
 8011694:	1a21      	subs	r1, r4, r0
 8011696:	4628      	mov	r0, r5
 8011698:	f001 f82e 	bl	80126f8 <_sbrk_r>
 801169c:	3001      	adds	r0, #1
 801169e:	d1f2      	bne.n	8011686 <sbrk_aligned+0x22>
 80116a0:	e7ef      	b.n	8011682 <sbrk_aligned+0x1e>
 80116a2:	bf00      	nop
 80116a4:	20000998 	.word	0x20000998

080116a8 <_malloc_r>:
 80116a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116ac:	1ccd      	adds	r5, r1, #3
 80116ae:	f025 0503 	bic.w	r5, r5, #3
 80116b2:	3508      	adds	r5, #8
 80116b4:	2d0c      	cmp	r5, #12
 80116b6:	bf38      	it	cc
 80116b8:	250c      	movcc	r5, #12
 80116ba:	2d00      	cmp	r5, #0
 80116bc:	4606      	mov	r6, r0
 80116be:	db01      	blt.n	80116c4 <_malloc_r+0x1c>
 80116c0:	42a9      	cmp	r1, r5
 80116c2:	d904      	bls.n	80116ce <_malloc_r+0x26>
 80116c4:	230c      	movs	r3, #12
 80116c6:	6033      	str	r3, [r6, #0]
 80116c8:	2000      	movs	r0, #0
 80116ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80117a4 <_malloc_r+0xfc>
 80116d2:	f000 f869 	bl	80117a8 <__malloc_lock>
 80116d6:	f8d8 3000 	ldr.w	r3, [r8]
 80116da:	461c      	mov	r4, r3
 80116dc:	bb44      	cbnz	r4, 8011730 <_malloc_r+0x88>
 80116de:	4629      	mov	r1, r5
 80116e0:	4630      	mov	r0, r6
 80116e2:	f7ff ffbf 	bl	8011664 <sbrk_aligned>
 80116e6:	1c43      	adds	r3, r0, #1
 80116e8:	4604      	mov	r4, r0
 80116ea:	d158      	bne.n	801179e <_malloc_r+0xf6>
 80116ec:	f8d8 4000 	ldr.w	r4, [r8]
 80116f0:	4627      	mov	r7, r4
 80116f2:	2f00      	cmp	r7, #0
 80116f4:	d143      	bne.n	801177e <_malloc_r+0xd6>
 80116f6:	2c00      	cmp	r4, #0
 80116f8:	d04b      	beq.n	8011792 <_malloc_r+0xea>
 80116fa:	6823      	ldr	r3, [r4, #0]
 80116fc:	4639      	mov	r1, r7
 80116fe:	4630      	mov	r0, r6
 8011700:	eb04 0903 	add.w	r9, r4, r3
 8011704:	f000 fff8 	bl	80126f8 <_sbrk_r>
 8011708:	4581      	cmp	r9, r0
 801170a:	d142      	bne.n	8011792 <_malloc_r+0xea>
 801170c:	6821      	ldr	r1, [r4, #0]
 801170e:	1a6d      	subs	r5, r5, r1
 8011710:	4629      	mov	r1, r5
 8011712:	4630      	mov	r0, r6
 8011714:	f7ff ffa6 	bl	8011664 <sbrk_aligned>
 8011718:	3001      	adds	r0, #1
 801171a:	d03a      	beq.n	8011792 <_malloc_r+0xea>
 801171c:	6823      	ldr	r3, [r4, #0]
 801171e:	442b      	add	r3, r5
 8011720:	6023      	str	r3, [r4, #0]
 8011722:	f8d8 3000 	ldr.w	r3, [r8]
 8011726:	685a      	ldr	r2, [r3, #4]
 8011728:	bb62      	cbnz	r2, 8011784 <_malloc_r+0xdc>
 801172a:	f8c8 7000 	str.w	r7, [r8]
 801172e:	e00f      	b.n	8011750 <_malloc_r+0xa8>
 8011730:	6822      	ldr	r2, [r4, #0]
 8011732:	1b52      	subs	r2, r2, r5
 8011734:	d420      	bmi.n	8011778 <_malloc_r+0xd0>
 8011736:	2a0b      	cmp	r2, #11
 8011738:	d917      	bls.n	801176a <_malloc_r+0xc2>
 801173a:	1961      	adds	r1, r4, r5
 801173c:	42a3      	cmp	r3, r4
 801173e:	6025      	str	r5, [r4, #0]
 8011740:	bf18      	it	ne
 8011742:	6059      	strne	r1, [r3, #4]
 8011744:	6863      	ldr	r3, [r4, #4]
 8011746:	bf08      	it	eq
 8011748:	f8c8 1000 	streq.w	r1, [r8]
 801174c:	5162      	str	r2, [r4, r5]
 801174e:	604b      	str	r3, [r1, #4]
 8011750:	4630      	mov	r0, r6
 8011752:	f000 f82f 	bl	80117b4 <__malloc_unlock>
 8011756:	f104 000b 	add.w	r0, r4, #11
 801175a:	1d23      	adds	r3, r4, #4
 801175c:	f020 0007 	bic.w	r0, r0, #7
 8011760:	1ac2      	subs	r2, r0, r3
 8011762:	bf1c      	itt	ne
 8011764:	1a1b      	subne	r3, r3, r0
 8011766:	50a3      	strne	r3, [r4, r2]
 8011768:	e7af      	b.n	80116ca <_malloc_r+0x22>
 801176a:	6862      	ldr	r2, [r4, #4]
 801176c:	42a3      	cmp	r3, r4
 801176e:	bf0c      	ite	eq
 8011770:	f8c8 2000 	streq.w	r2, [r8]
 8011774:	605a      	strne	r2, [r3, #4]
 8011776:	e7eb      	b.n	8011750 <_malloc_r+0xa8>
 8011778:	4623      	mov	r3, r4
 801177a:	6864      	ldr	r4, [r4, #4]
 801177c:	e7ae      	b.n	80116dc <_malloc_r+0x34>
 801177e:	463c      	mov	r4, r7
 8011780:	687f      	ldr	r7, [r7, #4]
 8011782:	e7b6      	b.n	80116f2 <_malloc_r+0x4a>
 8011784:	461a      	mov	r2, r3
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	42a3      	cmp	r3, r4
 801178a:	d1fb      	bne.n	8011784 <_malloc_r+0xdc>
 801178c:	2300      	movs	r3, #0
 801178e:	6053      	str	r3, [r2, #4]
 8011790:	e7de      	b.n	8011750 <_malloc_r+0xa8>
 8011792:	230c      	movs	r3, #12
 8011794:	6033      	str	r3, [r6, #0]
 8011796:	4630      	mov	r0, r6
 8011798:	f000 f80c 	bl	80117b4 <__malloc_unlock>
 801179c:	e794      	b.n	80116c8 <_malloc_r+0x20>
 801179e:	6005      	str	r5, [r0, #0]
 80117a0:	e7d6      	b.n	8011750 <_malloc_r+0xa8>
 80117a2:	bf00      	nop
 80117a4:	2000099c 	.word	0x2000099c

080117a8 <__malloc_lock>:
 80117a8:	4801      	ldr	r0, [pc, #4]	@ (80117b0 <__malloc_lock+0x8>)
 80117aa:	f000 bff2 	b.w	8012792 <__retarget_lock_acquire_recursive>
 80117ae:	bf00      	nop
 80117b0:	20000ae0 	.word	0x20000ae0

080117b4 <__malloc_unlock>:
 80117b4:	4801      	ldr	r0, [pc, #4]	@ (80117bc <__malloc_unlock+0x8>)
 80117b6:	f000 bfed 	b.w	8012794 <__retarget_lock_release_recursive>
 80117ba:	bf00      	nop
 80117bc:	20000ae0 	.word	0x20000ae0

080117c0 <__cvt>:
 80117c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117c4:	ec57 6b10 	vmov	r6, r7, d0
 80117c8:	2f00      	cmp	r7, #0
 80117ca:	460c      	mov	r4, r1
 80117cc:	4619      	mov	r1, r3
 80117ce:	463b      	mov	r3, r7
 80117d0:	bfbb      	ittet	lt
 80117d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80117d6:	461f      	movlt	r7, r3
 80117d8:	2300      	movge	r3, #0
 80117da:	232d      	movlt	r3, #45	@ 0x2d
 80117dc:	700b      	strb	r3, [r1, #0]
 80117de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80117e4:	4691      	mov	r9, r2
 80117e6:	f023 0820 	bic.w	r8, r3, #32
 80117ea:	bfbc      	itt	lt
 80117ec:	4632      	movlt	r2, r6
 80117ee:	4616      	movlt	r6, r2
 80117f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80117f4:	d005      	beq.n	8011802 <__cvt+0x42>
 80117f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80117fa:	d100      	bne.n	80117fe <__cvt+0x3e>
 80117fc:	3401      	adds	r4, #1
 80117fe:	2102      	movs	r1, #2
 8011800:	e000      	b.n	8011804 <__cvt+0x44>
 8011802:	2103      	movs	r1, #3
 8011804:	ab03      	add	r3, sp, #12
 8011806:	9301      	str	r3, [sp, #4]
 8011808:	ab02      	add	r3, sp, #8
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	ec47 6b10 	vmov	d0, r6, r7
 8011810:	4653      	mov	r3, sl
 8011812:	4622      	mov	r2, r4
 8011814:	f001 f858 	bl	80128c8 <_dtoa_r>
 8011818:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801181c:	4605      	mov	r5, r0
 801181e:	d119      	bne.n	8011854 <__cvt+0x94>
 8011820:	f019 0f01 	tst.w	r9, #1
 8011824:	d00e      	beq.n	8011844 <__cvt+0x84>
 8011826:	eb00 0904 	add.w	r9, r0, r4
 801182a:	2200      	movs	r2, #0
 801182c:	2300      	movs	r3, #0
 801182e:	4630      	mov	r0, r6
 8011830:	4639      	mov	r1, r7
 8011832:	f7ef f969 	bl	8000b08 <__aeabi_dcmpeq>
 8011836:	b108      	cbz	r0, 801183c <__cvt+0x7c>
 8011838:	f8cd 900c 	str.w	r9, [sp, #12]
 801183c:	2230      	movs	r2, #48	@ 0x30
 801183e:	9b03      	ldr	r3, [sp, #12]
 8011840:	454b      	cmp	r3, r9
 8011842:	d31e      	bcc.n	8011882 <__cvt+0xc2>
 8011844:	9b03      	ldr	r3, [sp, #12]
 8011846:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011848:	1b5b      	subs	r3, r3, r5
 801184a:	4628      	mov	r0, r5
 801184c:	6013      	str	r3, [r2, #0]
 801184e:	b004      	add	sp, #16
 8011850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011854:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011858:	eb00 0904 	add.w	r9, r0, r4
 801185c:	d1e5      	bne.n	801182a <__cvt+0x6a>
 801185e:	7803      	ldrb	r3, [r0, #0]
 8011860:	2b30      	cmp	r3, #48	@ 0x30
 8011862:	d10a      	bne.n	801187a <__cvt+0xba>
 8011864:	2200      	movs	r2, #0
 8011866:	2300      	movs	r3, #0
 8011868:	4630      	mov	r0, r6
 801186a:	4639      	mov	r1, r7
 801186c:	f7ef f94c 	bl	8000b08 <__aeabi_dcmpeq>
 8011870:	b918      	cbnz	r0, 801187a <__cvt+0xba>
 8011872:	f1c4 0401 	rsb	r4, r4, #1
 8011876:	f8ca 4000 	str.w	r4, [sl]
 801187a:	f8da 3000 	ldr.w	r3, [sl]
 801187e:	4499      	add	r9, r3
 8011880:	e7d3      	b.n	801182a <__cvt+0x6a>
 8011882:	1c59      	adds	r1, r3, #1
 8011884:	9103      	str	r1, [sp, #12]
 8011886:	701a      	strb	r2, [r3, #0]
 8011888:	e7d9      	b.n	801183e <__cvt+0x7e>

0801188a <__exponent>:
 801188a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801188c:	2900      	cmp	r1, #0
 801188e:	bfba      	itte	lt
 8011890:	4249      	neglt	r1, r1
 8011892:	232d      	movlt	r3, #45	@ 0x2d
 8011894:	232b      	movge	r3, #43	@ 0x2b
 8011896:	2909      	cmp	r1, #9
 8011898:	7002      	strb	r2, [r0, #0]
 801189a:	7043      	strb	r3, [r0, #1]
 801189c:	dd29      	ble.n	80118f2 <__exponent+0x68>
 801189e:	f10d 0307 	add.w	r3, sp, #7
 80118a2:	461d      	mov	r5, r3
 80118a4:	270a      	movs	r7, #10
 80118a6:	461a      	mov	r2, r3
 80118a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80118ac:	fb07 1416 	mls	r4, r7, r6, r1
 80118b0:	3430      	adds	r4, #48	@ 0x30
 80118b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80118b6:	460c      	mov	r4, r1
 80118b8:	2c63      	cmp	r4, #99	@ 0x63
 80118ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80118be:	4631      	mov	r1, r6
 80118c0:	dcf1      	bgt.n	80118a6 <__exponent+0x1c>
 80118c2:	3130      	adds	r1, #48	@ 0x30
 80118c4:	1e94      	subs	r4, r2, #2
 80118c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80118ca:	1c41      	adds	r1, r0, #1
 80118cc:	4623      	mov	r3, r4
 80118ce:	42ab      	cmp	r3, r5
 80118d0:	d30a      	bcc.n	80118e8 <__exponent+0x5e>
 80118d2:	f10d 0309 	add.w	r3, sp, #9
 80118d6:	1a9b      	subs	r3, r3, r2
 80118d8:	42ac      	cmp	r4, r5
 80118da:	bf88      	it	hi
 80118dc:	2300      	movhi	r3, #0
 80118de:	3302      	adds	r3, #2
 80118e0:	4403      	add	r3, r0
 80118e2:	1a18      	subs	r0, r3, r0
 80118e4:	b003      	add	sp, #12
 80118e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80118ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80118f0:	e7ed      	b.n	80118ce <__exponent+0x44>
 80118f2:	2330      	movs	r3, #48	@ 0x30
 80118f4:	3130      	adds	r1, #48	@ 0x30
 80118f6:	7083      	strb	r3, [r0, #2]
 80118f8:	70c1      	strb	r1, [r0, #3]
 80118fa:	1d03      	adds	r3, r0, #4
 80118fc:	e7f1      	b.n	80118e2 <__exponent+0x58>
	...

08011900 <_printf_float>:
 8011900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	b08d      	sub	sp, #52	@ 0x34
 8011906:	460c      	mov	r4, r1
 8011908:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801190c:	4616      	mov	r6, r2
 801190e:	461f      	mov	r7, r3
 8011910:	4605      	mov	r5, r0
 8011912:	f000 feb9 	bl	8012688 <_localeconv_r>
 8011916:	6803      	ldr	r3, [r0, #0]
 8011918:	9304      	str	r3, [sp, #16]
 801191a:	4618      	mov	r0, r3
 801191c:	f7ee fcc8 	bl	80002b0 <strlen>
 8011920:	2300      	movs	r3, #0
 8011922:	930a      	str	r3, [sp, #40]	@ 0x28
 8011924:	f8d8 3000 	ldr.w	r3, [r8]
 8011928:	9005      	str	r0, [sp, #20]
 801192a:	3307      	adds	r3, #7
 801192c:	f023 0307 	bic.w	r3, r3, #7
 8011930:	f103 0208 	add.w	r2, r3, #8
 8011934:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011938:	f8d4 b000 	ldr.w	fp, [r4]
 801193c:	f8c8 2000 	str.w	r2, [r8]
 8011940:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011944:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011948:	9307      	str	r3, [sp, #28]
 801194a:	f8cd 8018 	str.w	r8, [sp, #24]
 801194e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011956:	4b9c      	ldr	r3, [pc, #624]	@ (8011bc8 <_printf_float+0x2c8>)
 8011958:	f04f 32ff 	mov.w	r2, #4294967295
 801195c:	f7ef f906 	bl	8000b6c <__aeabi_dcmpun>
 8011960:	bb70      	cbnz	r0, 80119c0 <_printf_float+0xc0>
 8011962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011966:	4b98      	ldr	r3, [pc, #608]	@ (8011bc8 <_printf_float+0x2c8>)
 8011968:	f04f 32ff 	mov.w	r2, #4294967295
 801196c:	f7ef f8e0 	bl	8000b30 <__aeabi_dcmple>
 8011970:	bb30      	cbnz	r0, 80119c0 <_printf_float+0xc0>
 8011972:	2200      	movs	r2, #0
 8011974:	2300      	movs	r3, #0
 8011976:	4640      	mov	r0, r8
 8011978:	4649      	mov	r1, r9
 801197a:	f7ef f8cf 	bl	8000b1c <__aeabi_dcmplt>
 801197e:	b110      	cbz	r0, 8011986 <_printf_float+0x86>
 8011980:	232d      	movs	r3, #45	@ 0x2d
 8011982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011986:	4a91      	ldr	r2, [pc, #580]	@ (8011bcc <_printf_float+0x2cc>)
 8011988:	4b91      	ldr	r3, [pc, #580]	@ (8011bd0 <_printf_float+0x2d0>)
 801198a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801198e:	bf94      	ite	ls
 8011990:	4690      	movls	r8, r2
 8011992:	4698      	movhi	r8, r3
 8011994:	2303      	movs	r3, #3
 8011996:	6123      	str	r3, [r4, #16]
 8011998:	f02b 0304 	bic.w	r3, fp, #4
 801199c:	6023      	str	r3, [r4, #0]
 801199e:	f04f 0900 	mov.w	r9, #0
 80119a2:	9700      	str	r7, [sp, #0]
 80119a4:	4633      	mov	r3, r6
 80119a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80119a8:	4621      	mov	r1, r4
 80119aa:	4628      	mov	r0, r5
 80119ac:	f000 f9d2 	bl	8011d54 <_printf_common>
 80119b0:	3001      	adds	r0, #1
 80119b2:	f040 808d 	bne.w	8011ad0 <_printf_float+0x1d0>
 80119b6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ba:	b00d      	add	sp, #52	@ 0x34
 80119bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c0:	4642      	mov	r2, r8
 80119c2:	464b      	mov	r3, r9
 80119c4:	4640      	mov	r0, r8
 80119c6:	4649      	mov	r1, r9
 80119c8:	f7ef f8d0 	bl	8000b6c <__aeabi_dcmpun>
 80119cc:	b140      	cbz	r0, 80119e0 <_printf_float+0xe0>
 80119ce:	464b      	mov	r3, r9
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	bfbc      	itt	lt
 80119d4:	232d      	movlt	r3, #45	@ 0x2d
 80119d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80119da:	4a7e      	ldr	r2, [pc, #504]	@ (8011bd4 <_printf_float+0x2d4>)
 80119dc:	4b7e      	ldr	r3, [pc, #504]	@ (8011bd8 <_printf_float+0x2d8>)
 80119de:	e7d4      	b.n	801198a <_printf_float+0x8a>
 80119e0:	6863      	ldr	r3, [r4, #4]
 80119e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80119e6:	9206      	str	r2, [sp, #24]
 80119e8:	1c5a      	adds	r2, r3, #1
 80119ea:	d13b      	bne.n	8011a64 <_printf_float+0x164>
 80119ec:	2306      	movs	r3, #6
 80119ee:	6063      	str	r3, [r4, #4]
 80119f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80119f4:	2300      	movs	r3, #0
 80119f6:	6022      	str	r2, [r4, #0]
 80119f8:	9303      	str	r3, [sp, #12]
 80119fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80119fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011a00:	ab09      	add	r3, sp, #36	@ 0x24
 8011a02:	9300      	str	r3, [sp, #0]
 8011a04:	6861      	ldr	r1, [r4, #4]
 8011a06:	ec49 8b10 	vmov	d0, r8, r9
 8011a0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011a0e:	4628      	mov	r0, r5
 8011a10:	f7ff fed6 	bl	80117c0 <__cvt>
 8011a14:	9b06      	ldr	r3, [sp, #24]
 8011a16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a18:	2b47      	cmp	r3, #71	@ 0x47
 8011a1a:	4680      	mov	r8, r0
 8011a1c:	d129      	bne.n	8011a72 <_printf_float+0x172>
 8011a1e:	1cc8      	adds	r0, r1, #3
 8011a20:	db02      	blt.n	8011a28 <_printf_float+0x128>
 8011a22:	6863      	ldr	r3, [r4, #4]
 8011a24:	4299      	cmp	r1, r3
 8011a26:	dd41      	ble.n	8011aac <_printf_float+0x1ac>
 8011a28:	f1aa 0a02 	sub.w	sl, sl, #2
 8011a2c:	fa5f fa8a 	uxtb.w	sl, sl
 8011a30:	3901      	subs	r1, #1
 8011a32:	4652      	mov	r2, sl
 8011a34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011a38:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a3a:	f7ff ff26 	bl	801188a <__exponent>
 8011a3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a40:	1813      	adds	r3, r2, r0
 8011a42:	2a01      	cmp	r2, #1
 8011a44:	4681      	mov	r9, r0
 8011a46:	6123      	str	r3, [r4, #16]
 8011a48:	dc02      	bgt.n	8011a50 <_printf_float+0x150>
 8011a4a:	6822      	ldr	r2, [r4, #0]
 8011a4c:	07d2      	lsls	r2, r2, #31
 8011a4e:	d501      	bpl.n	8011a54 <_printf_float+0x154>
 8011a50:	3301      	adds	r3, #1
 8011a52:	6123      	str	r3, [r4, #16]
 8011a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d0a2      	beq.n	80119a2 <_printf_float+0xa2>
 8011a5c:	232d      	movs	r3, #45	@ 0x2d
 8011a5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a62:	e79e      	b.n	80119a2 <_printf_float+0xa2>
 8011a64:	9a06      	ldr	r2, [sp, #24]
 8011a66:	2a47      	cmp	r2, #71	@ 0x47
 8011a68:	d1c2      	bne.n	80119f0 <_printf_float+0xf0>
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d1c0      	bne.n	80119f0 <_printf_float+0xf0>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e7bd      	b.n	80119ee <_printf_float+0xee>
 8011a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011a76:	d9db      	bls.n	8011a30 <_printf_float+0x130>
 8011a78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011a7c:	d118      	bne.n	8011ab0 <_printf_float+0x1b0>
 8011a7e:	2900      	cmp	r1, #0
 8011a80:	6863      	ldr	r3, [r4, #4]
 8011a82:	dd0b      	ble.n	8011a9c <_printf_float+0x19c>
 8011a84:	6121      	str	r1, [r4, #16]
 8011a86:	b913      	cbnz	r3, 8011a8e <_printf_float+0x18e>
 8011a88:	6822      	ldr	r2, [r4, #0]
 8011a8a:	07d0      	lsls	r0, r2, #31
 8011a8c:	d502      	bpl.n	8011a94 <_printf_float+0x194>
 8011a8e:	3301      	adds	r3, #1
 8011a90:	440b      	add	r3, r1
 8011a92:	6123      	str	r3, [r4, #16]
 8011a94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011a96:	f04f 0900 	mov.w	r9, #0
 8011a9a:	e7db      	b.n	8011a54 <_printf_float+0x154>
 8011a9c:	b913      	cbnz	r3, 8011aa4 <_printf_float+0x1a4>
 8011a9e:	6822      	ldr	r2, [r4, #0]
 8011aa0:	07d2      	lsls	r2, r2, #31
 8011aa2:	d501      	bpl.n	8011aa8 <_printf_float+0x1a8>
 8011aa4:	3302      	adds	r3, #2
 8011aa6:	e7f4      	b.n	8011a92 <_printf_float+0x192>
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e7f2      	b.n	8011a92 <_printf_float+0x192>
 8011aac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ab2:	4299      	cmp	r1, r3
 8011ab4:	db05      	blt.n	8011ac2 <_printf_float+0x1c2>
 8011ab6:	6823      	ldr	r3, [r4, #0]
 8011ab8:	6121      	str	r1, [r4, #16]
 8011aba:	07d8      	lsls	r0, r3, #31
 8011abc:	d5ea      	bpl.n	8011a94 <_printf_float+0x194>
 8011abe:	1c4b      	adds	r3, r1, #1
 8011ac0:	e7e7      	b.n	8011a92 <_printf_float+0x192>
 8011ac2:	2900      	cmp	r1, #0
 8011ac4:	bfd4      	ite	le
 8011ac6:	f1c1 0202 	rsble	r2, r1, #2
 8011aca:	2201      	movgt	r2, #1
 8011acc:	4413      	add	r3, r2
 8011ace:	e7e0      	b.n	8011a92 <_printf_float+0x192>
 8011ad0:	6823      	ldr	r3, [r4, #0]
 8011ad2:	055a      	lsls	r2, r3, #21
 8011ad4:	d407      	bmi.n	8011ae6 <_printf_float+0x1e6>
 8011ad6:	6923      	ldr	r3, [r4, #16]
 8011ad8:	4642      	mov	r2, r8
 8011ada:	4631      	mov	r1, r6
 8011adc:	4628      	mov	r0, r5
 8011ade:	47b8      	blx	r7
 8011ae0:	3001      	adds	r0, #1
 8011ae2:	d12b      	bne.n	8011b3c <_printf_float+0x23c>
 8011ae4:	e767      	b.n	80119b6 <_printf_float+0xb6>
 8011ae6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011aea:	f240 80dd 	bls.w	8011ca8 <_printf_float+0x3a8>
 8011aee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011af2:	2200      	movs	r2, #0
 8011af4:	2300      	movs	r3, #0
 8011af6:	f7ef f807 	bl	8000b08 <__aeabi_dcmpeq>
 8011afa:	2800      	cmp	r0, #0
 8011afc:	d033      	beq.n	8011b66 <_printf_float+0x266>
 8011afe:	4a37      	ldr	r2, [pc, #220]	@ (8011bdc <_printf_float+0x2dc>)
 8011b00:	2301      	movs	r3, #1
 8011b02:	4631      	mov	r1, r6
 8011b04:	4628      	mov	r0, r5
 8011b06:	47b8      	blx	r7
 8011b08:	3001      	adds	r0, #1
 8011b0a:	f43f af54 	beq.w	80119b6 <_printf_float+0xb6>
 8011b0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011b12:	4543      	cmp	r3, r8
 8011b14:	db02      	blt.n	8011b1c <_printf_float+0x21c>
 8011b16:	6823      	ldr	r3, [r4, #0]
 8011b18:	07d8      	lsls	r0, r3, #31
 8011b1a:	d50f      	bpl.n	8011b3c <_printf_float+0x23c>
 8011b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b20:	4631      	mov	r1, r6
 8011b22:	4628      	mov	r0, r5
 8011b24:	47b8      	blx	r7
 8011b26:	3001      	adds	r0, #1
 8011b28:	f43f af45 	beq.w	80119b6 <_printf_float+0xb6>
 8011b2c:	f04f 0900 	mov.w	r9, #0
 8011b30:	f108 38ff 	add.w	r8, r8, #4294967295
 8011b34:	f104 0a1a 	add.w	sl, r4, #26
 8011b38:	45c8      	cmp	r8, r9
 8011b3a:	dc09      	bgt.n	8011b50 <_printf_float+0x250>
 8011b3c:	6823      	ldr	r3, [r4, #0]
 8011b3e:	079b      	lsls	r3, r3, #30
 8011b40:	f100 8103 	bmi.w	8011d4a <_printf_float+0x44a>
 8011b44:	68e0      	ldr	r0, [r4, #12]
 8011b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b48:	4298      	cmp	r0, r3
 8011b4a:	bfb8      	it	lt
 8011b4c:	4618      	movlt	r0, r3
 8011b4e:	e734      	b.n	80119ba <_printf_float+0xba>
 8011b50:	2301      	movs	r3, #1
 8011b52:	4652      	mov	r2, sl
 8011b54:	4631      	mov	r1, r6
 8011b56:	4628      	mov	r0, r5
 8011b58:	47b8      	blx	r7
 8011b5a:	3001      	adds	r0, #1
 8011b5c:	f43f af2b 	beq.w	80119b6 <_printf_float+0xb6>
 8011b60:	f109 0901 	add.w	r9, r9, #1
 8011b64:	e7e8      	b.n	8011b38 <_printf_float+0x238>
 8011b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	dc39      	bgt.n	8011be0 <_printf_float+0x2e0>
 8011b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8011bdc <_printf_float+0x2dc>)
 8011b6e:	2301      	movs	r3, #1
 8011b70:	4631      	mov	r1, r6
 8011b72:	4628      	mov	r0, r5
 8011b74:	47b8      	blx	r7
 8011b76:	3001      	adds	r0, #1
 8011b78:	f43f af1d 	beq.w	80119b6 <_printf_float+0xb6>
 8011b7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011b80:	ea59 0303 	orrs.w	r3, r9, r3
 8011b84:	d102      	bne.n	8011b8c <_printf_float+0x28c>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	07d9      	lsls	r1, r3, #31
 8011b8a:	d5d7      	bpl.n	8011b3c <_printf_float+0x23c>
 8011b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b90:	4631      	mov	r1, r6
 8011b92:	4628      	mov	r0, r5
 8011b94:	47b8      	blx	r7
 8011b96:	3001      	adds	r0, #1
 8011b98:	f43f af0d 	beq.w	80119b6 <_printf_float+0xb6>
 8011b9c:	f04f 0a00 	mov.w	sl, #0
 8011ba0:	f104 0b1a 	add.w	fp, r4, #26
 8011ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ba6:	425b      	negs	r3, r3
 8011ba8:	4553      	cmp	r3, sl
 8011baa:	dc01      	bgt.n	8011bb0 <_printf_float+0x2b0>
 8011bac:	464b      	mov	r3, r9
 8011bae:	e793      	b.n	8011ad8 <_printf_float+0x1d8>
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	465a      	mov	r2, fp
 8011bb4:	4631      	mov	r1, r6
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	47b8      	blx	r7
 8011bba:	3001      	adds	r0, #1
 8011bbc:	f43f aefb 	beq.w	80119b6 <_printf_float+0xb6>
 8011bc0:	f10a 0a01 	add.w	sl, sl, #1
 8011bc4:	e7ee      	b.n	8011ba4 <_printf_float+0x2a4>
 8011bc6:	bf00      	nop
 8011bc8:	7fefffff 	.word	0x7fefffff
 8011bcc:	08015d48 	.word	0x08015d48
 8011bd0:	08015d4c 	.word	0x08015d4c
 8011bd4:	08015d50 	.word	0x08015d50
 8011bd8:	08015d54 	.word	0x08015d54
 8011bdc:	08015d58 	.word	0x08015d58
 8011be0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011be2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011be6:	4553      	cmp	r3, sl
 8011be8:	bfa8      	it	ge
 8011bea:	4653      	movge	r3, sl
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	4699      	mov	r9, r3
 8011bf0:	dc36      	bgt.n	8011c60 <_printf_float+0x360>
 8011bf2:	f04f 0b00 	mov.w	fp, #0
 8011bf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011bfa:	f104 021a 	add.w	r2, r4, #26
 8011bfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011c00:	9306      	str	r3, [sp, #24]
 8011c02:	eba3 0309 	sub.w	r3, r3, r9
 8011c06:	455b      	cmp	r3, fp
 8011c08:	dc31      	bgt.n	8011c6e <_printf_float+0x36e>
 8011c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c0c:	459a      	cmp	sl, r3
 8011c0e:	dc3a      	bgt.n	8011c86 <_printf_float+0x386>
 8011c10:	6823      	ldr	r3, [r4, #0]
 8011c12:	07da      	lsls	r2, r3, #31
 8011c14:	d437      	bmi.n	8011c86 <_printf_float+0x386>
 8011c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c18:	ebaa 0903 	sub.w	r9, sl, r3
 8011c1c:	9b06      	ldr	r3, [sp, #24]
 8011c1e:	ebaa 0303 	sub.w	r3, sl, r3
 8011c22:	4599      	cmp	r9, r3
 8011c24:	bfa8      	it	ge
 8011c26:	4699      	movge	r9, r3
 8011c28:	f1b9 0f00 	cmp.w	r9, #0
 8011c2c:	dc33      	bgt.n	8011c96 <_printf_float+0x396>
 8011c2e:	f04f 0800 	mov.w	r8, #0
 8011c32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c36:	f104 0b1a 	add.w	fp, r4, #26
 8011c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c3c:	ebaa 0303 	sub.w	r3, sl, r3
 8011c40:	eba3 0309 	sub.w	r3, r3, r9
 8011c44:	4543      	cmp	r3, r8
 8011c46:	f77f af79 	ble.w	8011b3c <_printf_float+0x23c>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	465a      	mov	r2, fp
 8011c4e:	4631      	mov	r1, r6
 8011c50:	4628      	mov	r0, r5
 8011c52:	47b8      	blx	r7
 8011c54:	3001      	adds	r0, #1
 8011c56:	f43f aeae 	beq.w	80119b6 <_printf_float+0xb6>
 8011c5a:	f108 0801 	add.w	r8, r8, #1
 8011c5e:	e7ec      	b.n	8011c3a <_printf_float+0x33a>
 8011c60:	4642      	mov	r2, r8
 8011c62:	4631      	mov	r1, r6
 8011c64:	4628      	mov	r0, r5
 8011c66:	47b8      	blx	r7
 8011c68:	3001      	adds	r0, #1
 8011c6a:	d1c2      	bne.n	8011bf2 <_printf_float+0x2f2>
 8011c6c:	e6a3      	b.n	80119b6 <_printf_float+0xb6>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	4631      	mov	r1, r6
 8011c72:	4628      	mov	r0, r5
 8011c74:	9206      	str	r2, [sp, #24]
 8011c76:	47b8      	blx	r7
 8011c78:	3001      	adds	r0, #1
 8011c7a:	f43f ae9c 	beq.w	80119b6 <_printf_float+0xb6>
 8011c7e:	9a06      	ldr	r2, [sp, #24]
 8011c80:	f10b 0b01 	add.w	fp, fp, #1
 8011c84:	e7bb      	b.n	8011bfe <_printf_float+0x2fe>
 8011c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c8a:	4631      	mov	r1, r6
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	47b8      	blx	r7
 8011c90:	3001      	adds	r0, #1
 8011c92:	d1c0      	bne.n	8011c16 <_printf_float+0x316>
 8011c94:	e68f      	b.n	80119b6 <_printf_float+0xb6>
 8011c96:	9a06      	ldr	r2, [sp, #24]
 8011c98:	464b      	mov	r3, r9
 8011c9a:	4442      	add	r2, r8
 8011c9c:	4631      	mov	r1, r6
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	47b8      	blx	r7
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	d1c3      	bne.n	8011c2e <_printf_float+0x32e>
 8011ca6:	e686      	b.n	80119b6 <_printf_float+0xb6>
 8011ca8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011cac:	f1ba 0f01 	cmp.w	sl, #1
 8011cb0:	dc01      	bgt.n	8011cb6 <_printf_float+0x3b6>
 8011cb2:	07db      	lsls	r3, r3, #31
 8011cb4:	d536      	bpl.n	8011d24 <_printf_float+0x424>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	4642      	mov	r2, r8
 8011cba:	4631      	mov	r1, r6
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	47b8      	blx	r7
 8011cc0:	3001      	adds	r0, #1
 8011cc2:	f43f ae78 	beq.w	80119b6 <_printf_float+0xb6>
 8011cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011cca:	4631      	mov	r1, r6
 8011ccc:	4628      	mov	r0, r5
 8011cce:	47b8      	blx	r7
 8011cd0:	3001      	adds	r0, #1
 8011cd2:	f43f ae70 	beq.w	80119b6 <_printf_float+0xb6>
 8011cd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011cda:	2200      	movs	r2, #0
 8011cdc:	2300      	movs	r3, #0
 8011cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ce2:	f7ee ff11 	bl	8000b08 <__aeabi_dcmpeq>
 8011ce6:	b9c0      	cbnz	r0, 8011d1a <_printf_float+0x41a>
 8011ce8:	4653      	mov	r3, sl
 8011cea:	f108 0201 	add.w	r2, r8, #1
 8011cee:	4631      	mov	r1, r6
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	47b8      	blx	r7
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	d10c      	bne.n	8011d12 <_printf_float+0x412>
 8011cf8:	e65d      	b.n	80119b6 <_printf_float+0xb6>
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	465a      	mov	r2, fp
 8011cfe:	4631      	mov	r1, r6
 8011d00:	4628      	mov	r0, r5
 8011d02:	47b8      	blx	r7
 8011d04:	3001      	adds	r0, #1
 8011d06:	f43f ae56 	beq.w	80119b6 <_printf_float+0xb6>
 8011d0a:	f108 0801 	add.w	r8, r8, #1
 8011d0e:	45d0      	cmp	r8, sl
 8011d10:	dbf3      	blt.n	8011cfa <_printf_float+0x3fa>
 8011d12:	464b      	mov	r3, r9
 8011d14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011d18:	e6df      	b.n	8011ada <_printf_float+0x1da>
 8011d1a:	f04f 0800 	mov.w	r8, #0
 8011d1e:	f104 0b1a 	add.w	fp, r4, #26
 8011d22:	e7f4      	b.n	8011d0e <_printf_float+0x40e>
 8011d24:	2301      	movs	r3, #1
 8011d26:	4642      	mov	r2, r8
 8011d28:	e7e1      	b.n	8011cee <_printf_float+0x3ee>
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	464a      	mov	r2, r9
 8011d2e:	4631      	mov	r1, r6
 8011d30:	4628      	mov	r0, r5
 8011d32:	47b8      	blx	r7
 8011d34:	3001      	adds	r0, #1
 8011d36:	f43f ae3e 	beq.w	80119b6 <_printf_float+0xb6>
 8011d3a:	f108 0801 	add.w	r8, r8, #1
 8011d3e:	68e3      	ldr	r3, [r4, #12]
 8011d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d42:	1a5b      	subs	r3, r3, r1
 8011d44:	4543      	cmp	r3, r8
 8011d46:	dcf0      	bgt.n	8011d2a <_printf_float+0x42a>
 8011d48:	e6fc      	b.n	8011b44 <_printf_float+0x244>
 8011d4a:	f04f 0800 	mov.w	r8, #0
 8011d4e:	f104 0919 	add.w	r9, r4, #25
 8011d52:	e7f4      	b.n	8011d3e <_printf_float+0x43e>

08011d54 <_printf_common>:
 8011d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d58:	4616      	mov	r6, r2
 8011d5a:	4698      	mov	r8, r3
 8011d5c:	688a      	ldr	r2, [r1, #8]
 8011d5e:	690b      	ldr	r3, [r1, #16]
 8011d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d64:	4293      	cmp	r3, r2
 8011d66:	bfb8      	it	lt
 8011d68:	4613      	movlt	r3, r2
 8011d6a:	6033      	str	r3, [r6, #0]
 8011d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011d70:	4607      	mov	r7, r0
 8011d72:	460c      	mov	r4, r1
 8011d74:	b10a      	cbz	r2, 8011d7a <_printf_common+0x26>
 8011d76:	3301      	adds	r3, #1
 8011d78:	6033      	str	r3, [r6, #0]
 8011d7a:	6823      	ldr	r3, [r4, #0]
 8011d7c:	0699      	lsls	r1, r3, #26
 8011d7e:	bf42      	ittt	mi
 8011d80:	6833      	ldrmi	r3, [r6, #0]
 8011d82:	3302      	addmi	r3, #2
 8011d84:	6033      	strmi	r3, [r6, #0]
 8011d86:	6825      	ldr	r5, [r4, #0]
 8011d88:	f015 0506 	ands.w	r5, r5, #6
 8011d8c:	d106      	bne.n	8011d9c <_printf_common+0x48>
 8011d8e:	f104 0a19 	add.w	sl, r4, #25
 8011d92:	68e3      	ldr	r3, [r4, #12]
 8011d94:	6832      	ldr	r2, [r6, #0]
 8011d96:	1a9b      	subs	r3, r3, r2
 8011d98:	42ab      	cmp	r3, r5
 8011d9a:	dc26      	bgt.n	8011dea <_printf_common+0x96>
 8011d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011da0:	6822      	ldr	r2, [r4, #0]
 8011da2:	3b00      	subs	r3, #0
 8011da4:	bf18      	it	ne
 8011da6:	2301      	movne	r3, #1
 8011da8:	0692      	lsls	r2, r2, #26
 8011daa:	d42b      	bmi.n	8011e04 <_printf_common+0xb0>
 8011dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011db0:	4641      	mov	r1, r8
 8011db2:	4638      	mov	r0, r7
 8011db4:	47c8      	blx	r9
 8011db6:	3001      	adds	r0, #1
 8011db8:	d01e      	beq.n	8011df8 <_printf_common+0xa4>
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	6922      	ldr	r2, [r4, #16]
 8011dbe:	f003 0306 	and.w	r3, r3, #6
 8011dc2:	2b04      	cmp	r3, #4
 8011dc4:	bf02      	ittt	eq
 8011dc6:	68e5      	ldreq	r5, [r4, #12]
 8011dc8:	6833      	ldreq	r3, [r6, #0]
 8011dca:	1aed      	subeq	r5, r5, r3
 8011dcc:	68a3      	ldr	r3, [r4, #8]
 8011dce:	bf0c      	ite	eq
 8011dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dd4:	2500      	movne	r5, #0
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	bfc4      	itt	gt
 8011dda:	1a9b      	subgt	r3, r3, r2
 8011ddc:	18ed      	addgt	r5, r5, r3
 8011dde:	2600      	movs	r6, #0
 8011de0:	341a      	adds	r4, #26
 8011de2:	42b5      	cmp	r5, r6
 8011de4:	d11a      	bne.n	8011e1c <_printf_common+0xc8>
 8011de6:	2000      	movs	r0, #0
 8011de8:	e008      	b.n	8011dfc <_printf_common+0xa8>
 8011dea:	2301      	movs	r3, #1
 8011dec:	4652      	mov	r2, sl
 8011dee:	4641      	mov	r1, r8
 8011df0:	4638      	mov	r0, r7
 8011df2:	47c8      	blx	r9
 8011df4:	3001      	adds	r0, #1
 8011df6:	d103      	bne.n	8011e00 <_printf_common+0xac>
 8011df8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e00:	3501      	adds	r5, #1
 8011e02:	e7c6      	b.n	8011d92 <_printf_common+0x3e>
 8011e04:	18e1      	adds	r1, r4, r3
 8011e06:	1c5a      	adds	r2, r3, #1
 8011e08:	2030      	movs	r0, #48	@ 0x30
 8011e0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011e0e:	4422      	add	r2, r4
 8011e10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011e14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011e18:	3302      	adds	r3, #2
 8011e1a:	e7c7      	b.n	8011dac <_printf_common+0x58>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	4622      	mov	r2, r4
 8011e20:	4641      	mov	r1, r8
 8011e22:	4638      	mov	r0, r7
 8011e24:	47c8      	blx	r9
 8011e26:	3001      	adds	r0, #1
 8011e28:	d0e6      	beq.n	8011df8 <_printf_common+0xa4>
 8011e2a:	3601      	adds	r6, #1
 8011e2c:	e7d9      	b.n	8011de2 <_printf_common+0x8e>
	...

08011e30 <_printf_i>:
 8011e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e34:	7e0f      	ldrb	r7, [r1, #24]
 8011e36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011e38:	2f78      	cmp	r7, #120	@ 0x78
 8011e3a:	4691      	mov	r9, r2
 8011e3c:	4680      	mov	r8, r0
 8011e3e:	460c      	mov	r4, r1
 8011e40:	469a      	mov	sl, r3
 8011e42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011e46:	d807      	bhi.n	8011e58 <_printf_i+0x28>
 8011e48:	2f62      	cmp	r7, #98	@ 0x62
 8011e4a:	d80a      	bhi.n	8011e62 <_printf_i+0x32>
 8011e4c:	2f00      	cmp	r7, #0
 8011e4e:	f000 80d2 	beq.w	8011ff6 <_printf_i+0x1c6>
 8011e52:	2f58      	cmp	r7, #88	@ 0x58
 8011e54:	f000 80b9 	beq.w	8011fca <_printf_i+0x19a>
 8011e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011e60:	e03a      	b.n	8011ed8 <_printf_i+0xa8>
 8011e62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011e66:	2b15      	cmp	r3, #21
 8011e68:	d8f6      	bhi.n	8011e58 <_printf_i+0x28>
 8011e6a:	a101      	add	r1, pc, #4	@ (adr r1, 8011e70 <_printf_i+0x40>)
 8011e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e70:	08011ec9 	.word	0x08011ec9
 8011e74:	08011edd 	.word	0x08011edd
 8011e78:	08011e59 	.word	0x08011e59
 8011e7c:	08011e59 	.word	0x08011e59
 8011e80:	08011e59 	.word	0x08011e59
 8011e84:	08011e59 	.word	0x08011e59
 8011e88:	08011edd 	.word	0x08011edd
 8011e8c:	08011e59 	.word	0x08011e59
 8011e90:	08011e59 	.word	0x08011e59
 8011e94:	08011e59 	.word	0x08011e59
 8011e98:	08011e59 	.word	0x08011e59
 8011e9c:	08011fdd 	.word	0x08011fdd
 8011ea0:	08011f07 	.word	0x08011f07
 8011ea4:	08011f97 	.word	0x08011f97
 8011ea8:	08011e59 	.word	0x08011e59
 8011eac:	08011e59 	.word	0x08011e59
 8011eb0:	08011fff 	.word	0x08011fff
 8011eb4:	08011e59 	.word	0x08011e59
 8011eb8:	08011f07 	.word	0x08011f07
 8011ebc:	08011e59 	.word	0x08011e59
 8011ec0:	08011e59 	.word	0x08011e59
 8011ec4:	08011f9f 	.word	0x08011f9f
 8011ec8:	6833      	ldr	r3, [r6, #0]
 8011eca:	1d1a      	adds	r2, r3, #4
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	6032      	str	r2, [r6, #0]
 8011ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ed4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011ed8:	2301      	movs	r3, #1
 8011eda:	e09d      	b.n	8012018 <_printf_i+0x1e8>
 8011edc:	6833      	ldr	r3, [r6, #0]
 8011ede:	6820      	ldr	r0, [r4, #0]
 8011ee0:	1d19      	adds	r1, r3, #4
 8011ee2:	6031      	str	r1, [r6, #0]
 8011ee4:	0606      	lsls	r6, r0, #24
 8011ee6:	d501      	bpl.n	8011eec <_printf_i+0xbc>
 8011ee8:	681d      	ldr	r5, [r3, #0]
 8011eea:	e003      	b.n	8011ef4 <_printf_i+0xc4>
 8011eec:	0645      	lsls	r5, r0, #25
 8011eee:	d5fb      	bpl.n	8011ee8 <_printf_i+0xb8>
 8011ef0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011ef4:	2d00      	cmp	r5, #0
 8011ef6:	da03      	bge.n	8011f00 <_printf_i+0xd0>
 8011ef8:	232d      	movs	r3, #45	@ 0x2d
 8011efa:	426d      	negs	r5, r5
 8011efc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f00:	4859      	ldr	r0, [pc, #356]	@ (8012068 <_printf_i+0x238>)
 8011f02:	230a      	movs	r3, #10
 8011f04:	e011      	b.n	8011f2a <_printf_i+0xfa>
 8011f06:	6821      	ldr	r1, [r4, #0]
 8011f08:	6833      	ldr	r3, [r6, #0]
 8011f0a:	0608      	lsls	r0, r1, #24
 8011f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011f10:	d402      	bmi.n	8011f18 <_printf_i+0xe8>
 8011f12:	0649      	lsls	r1, r1, #25
 8011f14:	bf48      	it	mi
 8011f16:	b2ad      	uxthmi	r5, r5
 8011f18:	2f6f      	cmp	r7, #111	@ 0x6f
 8011f1a:	4853      	ldr	r0, [pc, #332]	@ (8012068 <_printf_i+0x238>)
 8011f1c:	6033      	str	r3, [r6, #0]
 8011f1e:	bf14      	ite	ne
 8011f20:	230a      	movne	r3, #10
 8011f22:	2308      	moveq	r3, #8
 8011f24:	2100      	movs	r1, #0
 8011f26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011f2a:	6866      	ldr	r6, [r4, #4]
 8011f2c:	60a6      	str	r6, [r4, #8]
 8011f2e:	2e00      	cmp	r6, #0
 8011f30:	bfa2      	ittt	ge
 8011f32:	6821      	ldrge	r1, [r4, #0]
 8011f34:	f021 0104 	bicge.w	r1, r1, #4
 8011f38:	6021      	strge	r1, [r4, #0]
 8011f3a:	b90d      	cbnz	r5, 8011f40 <_printf_i+0x110>
 8011f3c:	2e00      	cmp	r6, #0
 8011f3e:	d04b      	beq.n	8011fd8 <_printf_i+0x1a8>
 8011f40:	4616      	mov	r6, r2
 8011f42:	fbb5 f1f3 	udiv	r1, r5, r3
 8011f46:	fb03 5711 	mls	r7, r3, r1, r5
 8011f4a:	5dc7      	ldrb	r7, [r0, r7]
 8011f4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011f50:	462f      	mov	r7, r5
 8011f52:	42bb      	cmp	r3, r7
 8011f54:	460d      	mov	r5, r1
 8011f56:	d9f4      	bls.n	8011f42 <_printf_i+0x112>
 8011f58:	2b08      	cmp	r3, #8
 8011f5a:	d10b      	bne.n	8011f74 <_printf_i+0x144>
 8011f5c:	6823      	ldr	r3, [r4, #0]
 8011f5e:	07df      	lsls	r7, r3, #31
 8011f60:	d508      	bpl.n	8011f74 <_printf_i+0x144>
 8011f62:	6923      	ldr	r3, [r4, #16]
 8011f64:	6861      	ldr	r1, [r4, #4]
 8011f66:	4299      	cmp	r1, r3
 8011f68:	bfde      	ittt	le
 8011f6a:	2330      	movle	r3, #48	@ 0x30
 8011f6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f74:	1b92      	subs	r2, r2, r6
 8011f76:	6122      	str	r2, [r4, #16]
 8011f78:	f8cd a000 	str.w	sl, [sp]
 8011f7c:	464b      	mov	r3, r9
 8011f7e:	aa03      	add	r2, sp, #12
 8011f80:	4621      	mov	r1, r4
 8011f82:	4640      	mov	r0, r8
 8011f84:	f7ff fee6 	bl	8011d54 <_printf_common>
 8011f88:	3001      	adds	r0, #1
 8011f8a:	d14a      	bne.n	8012022 <_printf_i+0x1f2>
 8011f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f90:	b004      	add	sp, #16
 8011f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f96:	6823      	ldr	r3, [r4, #0]
 8011f98:	f043 0320 	orr.w	r3, r3, #32
 8011f9c:	6023      	str	r3, [r4, #0]
 8011f9e:	4833      	ldr	r0, [pc, #204]	@ (801206c <_printf_i+0x23c>)
 8011fa0:	2778      	movs	r7, #120	@ 0x78
 8011fa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011fa6:	6823      	ldr	r3, [r4, #0]
 8011fa8:	6831      	ldr	r1, [r6, #0]
 8011faa:	061f      	lsls	r7, r3, #24
 8011fac:	f851 5b04 	ldr.w	r5, [r1], #4
 8011fb0:	d402      	bmi.n	8011fb8 <_printf_i+0x188>
 8011fb2:	065f      	lsls	r7, r3, #25
 8011fb4:	bf48      	it	mi
 8011fb6:	b2ad      	uxthmi	r5, r5
 8011fb8:	6031      	str	r1, [r6, #0]
 8011fba:	07d9      	lsls	r1, r3, #31
 8011fbc:	bf44      	itt	mi
 8011fbe:	f043 0320 	orrmi.w	r3, r3, #32
 8011fc2:	6023      	strmi	r3, [r4, #0]
 8011fc4:	b11d      	cbz	r5, 8011fce <_printf_i+0x19e>
 8011fc6:	2310      	movs	r3, #16
 8011fc8:	e7ac      	b.n	8011f24 <_printf_i+0xf4>
 8011fca:	4827      	ldr	r0, [pc, #156]	@ (8012068 <_printf_i+0x238>)
 8011fcc:	e7e9      	b.n	8011fa2 <_printf_i+0x172>
 8011fce:	6823      	ldr	r3, [r4, #0]
 8011fd0:	f023 0320 	bic.w	r3, r3, #32
 8011fd4:	6023      	str	r3, [r4, #0]
 8011fd6:	e7f6      	b.n	8011fc6 <_printf_i+0x196>
 8011fd8:	4616      	mov	r6, r2
 8011fda:	e7bd      	b.n	8011f58 <_printf_i+0x128>
 8011fdc:	6833      	ldr	r3, [r6, #0]
 8011fde:	6825      	ldr	r5, [r4, #0]
 8011fe0:	6961      	ldr	r1, [r4, #20]
 8011fe2:	1d18      	adds	r0, r3, #4
 8011fe4:	6030      	str	r0, [r6, #0]
 8011fe6:	062e      	lsls	r6, r5, #24
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	d501      	bpl.n	8011ff0 <_printf_i+0x1c0>
 8011fec:	6019      	str	r1, [r3, #0]
 8011fee:	e002      	b.n	8011ff6 <_printf_i+0x1c6>
 8011ff0:	0668      	lsls	r0, r5, #25
 8011ff2:	d5fb      	bpl.n	8011fec <_printf_i+0x1bc>
 8011ff4:	8019      	strh	r1, [r3, #0]
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	6123      	str	r3, [r4, #16]
 8011ffa:	4616      	mov	r6, r2
 8011ffc:	e7bc      	b.n	8011f78 <_printf_i+0x148>
 8011ffe:	6833      	ldr	r3, [r6, #0]
 8012000:	1d1a      	adds	r2, r3, #4
 8012002:	6032      	str	r2, [r6, #0]
 8012004:	681e      	ldr	r6, [r3, #0]
 8012006:	6862      	ldr	r2, [r4, #4]
 8012008:	2100      	movs	r1, #0
 801200a:	4630      	mov	r0, r6
 801200c:	f7ee f900 	bl	8000210 <memchr>
 8012010:	b108      	cbz	r0, 8012016 <_printf_i+0x1e6>
 8012012:	1b80      	subs	r0, r0, r6
 8012014:	6060      	str	r0, [r4, #4]
 8012016:	6863      	ldr	r3, [r4, #4]
 8012018:	6123      	str	r3, [r4, #16]
 801201a:	2300      	movs	r3, #0
 801201c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012020:	e7aa      	b.n	8011f78 <_printf_i+0x148>
 8012022:	6923      	ldr	r3, [r4, #16]
 8012024:	4632      	mov	r2, r6
 8012026:	4649      	mov	r1, r9
 8012028:	4640      	mov	r0, r8
 801202a:	47d0      	blx	sl
 801202c:	3001      	adds	r0, #1
 801202e:	d0ad      	beq.n	8011f8c <_printf_i+0x15c>
 8012030:	6823      	ldr	r3, [r4, #0]
 8012032:	079b      	lsls	r3, r3, #30
 8012034:	d413      	bmi.n	801205e <_printf_i+0x22e>
 8012036:	68e0      	ldr	r0, [r4, #12]
 8012038:	9b03      	ldr	r3, [sp, #12]
 801203a:	4298      	cmp	r0, r3
 801203c:	bfb8      	it	lt
 801203e:	4618      	movlt	r0, r3
 8012040:	e7a6      	b.n	8011f90 <_printf_i+0x160>
 8012042:	2301      	movs	r3, #1
 8012044:	4632      	mov	r2, r6
 8012046:	4649      	mov	r1, r9
 8012048:	4640      	mov	r0, r8
 801204a:	47d0      	blx	sl
 801204c:	3001      	adds	r0, #1
 801204e:	d09d      	beq.n	8011f8c <_printf_i+0x15c>
 8012050:	3501      	adds	r5, #1
 8012052:	68e3      	ldr	r3, [r4, #12]
 8012054:	9903      	ldr	r1, [sp, #12]
 8012056:	1a5b      	subs	r3, r3, r1
 8012058:	42ab      	cmp	r3, r5
 801205a:	dcf2      	bgt.n	8012042 <_printf_i+0x212>
 801205c:	e7eb      	b.n	8012036 <_printf_i+0x206>
 801205e:	2500      	movs	r5, #0
 8012060:	f104 0619 	add.w	r6, r4, #25
 8012064:	e7f5      	b.n	8012052 <_printf_i+0x222>
 8012066:	bf00      	nop
 8012068:	08015d5a 	.word	0x08015d5a
 801206c:	08015d6b 	.word	0x08015d6b

08012070 <__sflush_r>:
 8012070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012078:	0716      	lsls	r6, r2, #28
 801207a:	4605      	mov	r5, r0
 801207c:	460c      	mov	r4, r1
 801207e:	d454      	bmi.n	801212a <__sflush_r+0xba>
 8012080:	684b      	ldr	r3, [r1, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	dc02      	bgt.n	801208c <__sflush_r+0x1c>
 8012086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012088:	2b00      	cmp	r3, #0
 801208a:	dd48      	ble.n	801211e <__sflush_r+0xae>
 801208c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801208e:	2e00      	cmp	r6, #0
 8012090:	d045      	beq.n	801211e <__sflush_r+0xae>
 8012092:	2300      	movs	r3, #0
 8012094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012098:	682f      	ldr	r7, [r5, #0]
 801209a:	6a21      	ldr	r1, [r4, #32]
 801209c:	602b      	str	r3, [r5, #0]
 801209e:	d030      	beq.n	8012102 <__sflush_r+0x92>
 80120a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80120a2:	89a3      	ldrh	r3, [r4, #12]
 80120a4:	0759      	lsls	r1, r3, #29
 80120a6:	d505      	bpl.n	80120b4 <__sflush_r+0x44>
 80120a8:	6863      	ldr	r3, [r4, #4]
 80120aa:	1ad2      	subs	r2, r2, r3
 80120ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80120ae:	b10b      	cbz	r3, 80120b4 <__sflush_r+0x44>
 80120b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80120b2:	1ad2      	subs	r2, r2, r3
 80120b4:	2300      	movs	r3, #0
 80120b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80120b8:	6a21      	ldr	r1, [r4, #32]
 80120ba:	4628      	mov	r0, r5
 80120bc:	47b0      	blx	r6
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	89a3      	ldrh	r3, [r4, #12]
 80120c2:	d106      	bne.n	80120d2 <__sflush_r+0x62>
 80120c4:	6829      	ldr	r1, [r5, #0]
 80120c6:	291d      	cmp	r1, #29
 80120c8:	d82b      	bhi.n	8012122 <__sflush_r+0xb2>
 80120ca:	4a2a      	ldr	r2, [pc, #168]	@ (8012174 <__sflush_r+0x104>)
 80120cc:	410a      	asrs	r2, r1
 80120ce:	07d6      	lsls	r6, r2, #31
 80120d0:	d427      	bmi.n	8012122 <__sflush_r+0xb2>
 80120d2:	2200      	movs	r2, #0
 80120d4:	6062      	str	r2, [r4, #4]
 80120d6:	04d9      	lsls	r1, r3, #19
 80120d8:	6922      	ldr	r2, [r4, #16]
 80120da:	6022      	str	r2, [r4, #0]
 80120dc:	d504      	bpl.n	80120e8 <__sflush_r+0x78>
 80120de:	1c42      	adds	r2, r0, #1
 80120e0:	d101      	bne.n	80120e6 <__sflush_r+0x76>
 80120e2:	682b      	ldr	r3, [r5, #0]
 80120e4:	b903      	cbnz	r3, 80120e8 <__sflush_r+0x78>
 80120e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80120e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120ea:	602f      	str	r7, [r5, #0]
 80120ec:	b1b9      	cbz	r1, 801211e <__sflush_r+0xae>
 80120ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120f2:	4299      	cmp	r1, r3
 80120f4:	d002      	beq.n	80120fc <__sflush_r+0x8c>
 80120f6:	4628      	mov	r0, r5
 80120f8:	f001 f9aa 	bl	8013450 <_free_r>
 80120fc:	2300      	movs	r3, #0
 80120fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8012100:	e00d      	b.n	801211e <__sflush_r+0xae>
 8012102:	2301      	movs	r3, #1
 8012104:	4628      	mov	r0, r5
 8012106:	47b0      	blx	r6
 8012108:	4602      	mov	r2, r0
 801210a:	1c50      	adds	r0, r2, #1
 801210c:	d1c9      	bne.n	80120a2 <__sflush_r+0x32>
 801210e:	682b      	ldr	r3, [r5, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d0c6      	beq.n	80120a2 <__sflush_r+0x32>
 8012114:	2b1d      	cmp	r3, #29
 8012116:	d001      	beq.n	801211c <__sflush_r+0xac>
 8012118:	2b16      	cmp	r3, #22
 801211a:	d11e      	bne.n	801215a <__sflush_r+0xea>
 801211c:	602f      	str	r7, [r5, #0]
 801211e:	2000      	movs	r0, #0
 8012120:	e022      	b.n	8012168 <__sflush_r+0xf8>
 8012122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012126:	b21b      	sxth	r3, r3
 8012128:	e01b      	b.n	8012162 <__sflush_r+0xf2>
 801212a:	690f      	ldr	r7, [r1, #16]
 801212c:	2f00      	cmp	r7, #0
 801212e:	d0f6      	beq.n	801211e <__sflush_r+0xae>
 8012130:	0793      	lsls	r3, r2, #30
 8012132:	680e      	ldr	r6, [r1, #0]
 8012134:	bf08      	it	eq
 8012136:	694b      	ldreq	r3, [r1, #20]
 8012138:	600f      	str	r7, [r1, #0]
 801213a:	bf18      	it	ne
 801213c:	2300      	movne	r3, #0
 801213e:	eba6 0807 	sub.w	r8, r6, r7
 8012142:	608b      	str	r3, [r1, #8]
 8012144:	f1b8 0f00 	cmp.w	r8, #0
 8012148:	dde9      	ble.n	801211e <__sflush_r+0xae>
 801214a:	6a21      	ldr	r1, [r4, #32]
 801214c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801214e:	4643      	mov	r3, r8
 8012150:	463a      	mov	r2, r7
 8012152:	4628      	mov	r0, r5
 8012154:	47b0      	blx	r6
 8012156:	2800      	cmp	r0, #0
 8012158:	dc08      	bgt.n	801216c <__sflush_r+0xfc>
 801215a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801215e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012162:	81a3      	strh	r3, [r4, #12]
 8012164:	f04f 30ff 	mov.w	r0, #4294967295
 8012168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801216c:	4407      	add	r7, r0
 801216e:	eba8 0800 	sub.w	r8, r8, r0
 8012172:	e7e7      	b.n	8012144 <__sflush_r+0xd4>
 8012174:	dfbffffe 	.word	0xdfbffffe

08012178 <_fflush_r>:
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	690b      	ldr	r3, [r1, #16]
 801217c:	4605      	mov	r5, r0
 801217e:	460c      	mov	r4, r1
 8012180:	b913      	cbnz	r3, 8012188 <_fflush_r+0x10>
 8012182:	2500      	movs	r5, #0
 8012184:	4628      	mov	r0, r5
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	b118      	cbz	r0, 8012192 <_fflush_r+0x1a>
 801218a:	6a03      	ldr	r3, [r0, #32]
 801218c:	b90b      	cbnz	r3, 8012192 <_fflush_r+0x1a>
 801218e:	f000 f8bb 	bl	8012308 <__sinit>
 8012192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d0f3      	beq.n	8012182 <_fflush_r+0xa>
 801219a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801219c:	07d0      	lsls	r0, r2, #31
 801219e:	d404      	bmi.n	80121aa <_fflush_r+0x32>
 80121a0:	0599      	lsls	r1, r3, #22
 80121a2:	d402      	bmi.n	80121aa <_fflush_r+0x32>
 80121a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80121a6:	f000 faf4 	bl	8012792 <__retarget_lock_acquire_recursive>
 80121aa:	4628      	mov	r0, r5
 80121ac:	4621      	mov	r1, r4
 80121ae:	f7ff ff5f 	bl	8012070 <__sflush_r>
 80121b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80121b4:	07da      	lsls	r2, r3, #31
 80121b6:	4605      	mov	r5, r0
 80121b8:	d4e4      	bmi.n	8012184 <_fflush_r+0xc>
 80121ba:	89a3      	ldrh	r3, [r4, #12]
 80121bc:	059b      	lsls	r3, r3, #22
 80121be:	d4e1      	bmi.n	8012184 <_fflush_r+0xc>
 80121c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80121c2:	f000 fae7 	bl	8012794 <__retarget_lock_release_recursive>
 80121c6:	e7dd      	b.n	8012184 <_fflush_r+0xc>

080121c8 <fflush>:
 80121c8:	4601      	mov	r1, r0
 80121ca:	b920      	cbnz	r0, 80121d6 <fflush+0xe>
 80121cc:	4a04      	ldr	r2, [pc, #16]	@ (80121e0 <fflush+0x18>)
 80121ce:	4905      	ldr	r1, [pc, #20]	@ (80121e4 <fflush+0x1c>)
 80121d0:	4805      	ldr	r0, [pc, #20]	@ (80121e8 <fflush+0x20>)
 80121d2:	f000 b8b1 	b.w	8012338 <_fwalk_sglue>
 80121d6:	4b05      	ldr	r3, [pc, #20]	@ (80121ec <fflush+0x24>)
 80121d8:	6818      	ldr	r0, [r3, #0]
 80121da:	f7ff bfcd 	b.w	8012178 <_fflush_r>
 80121de:	bf00      	nop
 80121e0:	200002c4 	.word	0x200002c4
 80121e4:	08012179 	.word	0x08012179
 80121e8:	200002d4 	.word	0x200002d4
 80121ec:	200002d0 	.word	0x200002d0

080121f0 <std>:
 80121f0:	2300      	movs	r3, #0
 80121f2:	b510      	push	{r4, lr}
 80121f4:	4604      	mov	r4, r0
 80121f6:	e9c0 3300 	strd	r3, r3, [r0]
 80121fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121fe:	6083      	str	r3, [r0, #8]
 8012200:	8181      	strh	r1, [r0, #12]
 8012202:	6643      	str	r3, [r0, #100]	@ 0x64
 8012204:	81c2      	strh	r2, [r0, #14]
 8012206:	6183      	str	r3, [r0, #24]
 8012208:	4619      	mov	r1, r3
 801220a:	2208      	movs	r2, #8
 801220c:	305c      	adds	r0, #92	@ 0x5c
 801220e:	f000 fa33 	bl	8012678 <memset>
 8012212:	4b0d      	ldr	r3, [pc, #52]	@ (8012248 <std+0x58>)
 8012214:	6263      	str	r3, [r4, #36]	@ 0x24
 8012216:	4b0d      	ldr	r3, [pc, #52]	@ (801224c <std+0x5c>)
 8012218:	62a3      	str	r3, [r4, #40]	@ 0x28
 801221a:	4b0d      	ldr	r3, [pc, #52]	@ (8012250 <std+0x60>)
 801221c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801221e:	4b0d      	ldr	r3, [pc, #52]	@ (8012254 <std+0x64>)
 8012220:	6323      	str	r3, [r4, #48]	@ 0x30
 8012222:	4b0d      	ldr	r3, [pc, #52]	@ (8012258 <std+0x68>)
 8012224:	6224      	str	r4, [r4, #32]
 8012226:	429c      	cmp	r4, r3
 8012228:	d006      	beq.n	8012238 <std+0x48>
 801222a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801222e:	4294      	cmp	r4, r2
 8012230:	d002      	beq.n	8012238 <std+0x48>
 8012232:	33d0      	adds	r3, #208	@ 0xd0
 8012234:	429c      	cmp	r4, r3
 8012236:	d105      	bne.n	8012244 <std+0x54>
 8012238:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801223c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012240:	f000 baa6 	b.w	8012790 <__retarget_lock_init_recursive>
 8012244:	bd10      	pop	{r4, pc}
 8012246:	bf00      	nop
 8012248:	08012495 	.word	0x08012495
 801224c:	080124b7 	.word	0x080124b7
 8012250:	080124ef 	.word	0x080124ef
 8012254:	08012513 	.word	0x08012513
 8012258:	200009a0 	.word	0x200009a0

0801225c <stdio_exit_handler>:
 801225c:	4a02      	ldr	r2, [pc, #8]	@ (8012268 <stdio_exit_handler+0xc>)
 801225e:	4903      	ldr	r1, [pc, #12]	@ (801226c <stdio_exit_handler+0x10>)
 8012260:	4803      	ldr	r0, [pc, #12]	@ (8012270 <stdio_exit_handler+0x14>)
 8012262:	f000 b869 	b.w	8012338 <_fwalk_sglue>
 8012266:	bf00      	nop
 8012268:	200002c4 	.word	0x200002c4
 801226c:	08012179 	.word	0x08012179
 8012270:	200002d4 	.word	0x200002d4

08012274 <cleanup_stdio>:
 8012274:	6841      	ldr	r1, [r0, #4]
 8012276:	4b0c      	ldr	r3, [pc, #48]	@ (80122a8 <cleanup_stdio+0x34>)
 8012278:	4299      	cmp	r1, r3
 801227a:	b510      	push	{r4, lr}
 801227c:	4604      	mov	r4, r0
 801227e:	d001      	beq.n	8012284 <cleanup_stdio+0x10>
 8012280:	f7ff ff7a 	bl	8012178 <_fflush_r>
 8012284:	68a1      	ldr	r1, [r4, #8]
 8012286:	4b09      	ldr	r3, [pc, #36]	@ (80122ac <cleanup_stdio+0x38>)
 8012288:	4299      	cmp	r1, r3
 801228a:	d002      	beq.n	8012292 <cleanup_stdio+0x1e>
 801228c:	4620      	mov	r0, r4
 801228e:	f7ff ff73 	bl	8012178 <_fflush_r>
 8012292:	68e1      	ldr	r1, [r4, #12]
 8012294:	4b06      	ldr	r3, [pc, #24]	@ (80122b0 <cleanup_stdio+0x3c>)
 8012296:	4299      	cmp	r1, r3
 8012298:	d004      	beq.n	80122a4 <cleanup_stdio+0x30>
 801229a:	4620      	mov	r0, r4
 801229c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122a0:	f7ff bf6a 	b.w	8012178 <_fflush_r>
 80122a4:	bd10      	pop	{r4, pc}
 80122a6:	bf00      	nop
 80122a8:	200009a0 	.word	0x200009a0
 80122ac:	20000a08 	.word	0x20000a08
 80122b0:	20000a70 	.word	0x20000a70

080122b4 <global_stdio_init.part.0>:
 80122b4:	b510      	push	{r4, lr}
 80122b6:	4b0b      	ldr	r3, [pc, #44]	@ (80122e4 <global_stdio_init.part.0+0x30>)
 80122b8:	4c0b      	ldr	r4, [pc, #44]	@ (80122e8 <global_stdio_init.part.0+0x34>)
 80122ba:	4a0c      	ldr	r2, [pc, #48]	@ (80122ec <global_stdio_init.part.0+0x38>)
 80122bc:	601a      	str	r2, [r3, #0]
 80122be:	4620      	mov	r0, r4
 80122c0:	2200      	movs	r2, #0
 80122c2:	2104      	movs	r1, #4
 80122c4:	f7ff ff94 	bl	80121f0 <std>
 80122c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80122cc:	2201      	movs	r2, #1
 80122ce:	2109      	movs	r1, #9
 80122d0:	f7ff ff8e 	bl	80121f0 <std>
 80122d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80122d8:	2202      	movs	r2, #2
 80122da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122de:	2112      	movs	r1, #18
 80122e0:	f7ff bf86 	b.w	80121f0 <std>
 80122e4:	20000ad8 	.word	0x20000ad8
 80122e8:	200009a0 	.word	0x200009a0
 80122ec:	0801225d 	.word	0x0801225d

080122f0 <__sfp_lock_acquire>:
 80122f0:	4801      	ldr	r0, [pc, #4]	@ (80122f8 <__sfp_lock_acquire+0x8>)
 80122f2:	f000 ba4e 	b.w	8012792 <__retarget_lock_acquire_recursive>
 80122f6:	bf00      	nop
 80122f8:	20000ae1 	.word	0x20000ae1

080122fc <__sfp_lock_release>:
 80122fc:	4801      	ldr	r0, [pc, #4]	@ (8012304 <__sfp_lock_release+0x8>)
 80122fe:	f000 ba49 	b.w	8012794 <__retarget_lock_release_recursive>
 8012302:	bf00      	nop
 8012304:	20000ae1 	.word	0x20000ae1

08012308 <__sinit>:
 8012308:	b510      	push	{r4, lr}
 801230a:	4604      	mov	r4, r0
 801230c:	f7ff fff0 	bl	80122f0 <__sfp_lock_acquire>
 8012310:	6a23      	ldr	r3, [r4, #32]
 8012312:	b11b      	cbz	r3, 801231c <__sinit+0x14>
 8012314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012318:	f7ff bff0 	b.w	80122fc <__sfp_lock_release>
 801231c:	4b04      	ldr	r3, [pc, #16]	@ (8012330 <__sinit+0x28>)
 801231e:	6223      	str	r3, [r4, #32]
 8012320:	4b04      	ldr	r3, [pc, #16]	@ (8012334 <__sinit+0x2c>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d1f5      	bne.n	8012314 <__sinit+0xc>
 8012328:	f7ff ffc4 	bl	80122b4 <global_stdio_init.part.0>
 801232c:	e7f2      	b.n	8012314 <__sinit+0xc>
 801232e:	bf00      	nop
 8012330:	08012275 	.word	0x08012275
 8012334:	20000ad8 	.word	0x20000ad8

08012338 <_fwalk_sglue>:
 8012338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801233c:	4607      	mov	r7, r0
 801233e:	4688      	mov	r8, r1
 8012340:	4614      	mov	r4, r2
 8012342:	2600      	movs	r6, #0
 8012344:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012348:	f1b9 0901 	subs.w	r9, r9, #1
 801234c:	d505      	bpl.n	801235a <_fwalk_sglue+0x22>
 801234e:	6824      	ldr	r4, [r4, #0]
 8012350:	2c00      	cmp	r4, #0
 8012352:	d1f7      	bne.n	8012344 <_fwalk_sglue+0xc>
 8012354:	4630      	mov	r0, r6
 8012356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801235a:	89ab      	ldrh	r3, [r5, #12]
 801235c:	2b01      	cmp	r3, #1
 801235e:	d907      	bls.n	8012370 <_fwalk_sglue+0x38>
 8012360:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012364:	3301      	adds	r3, #1
 8012366:	d003      	beq.n	8012370 <_fwalk_sglue+0x38>
 8012368:	4629      	mov	r1, r5
 801236a:	4638      	mov	r0, r7
 801236c:	47c0      	blx	r8
 801236e:	4306      	orrs	r6, r0
 8012370:	3568      	adds	r5, #104	@ 0x68
 8012372:	e7e9      	b.n	8012348 <_fwalk_sglue+0x10>

08012374 <iprintf>:
 8012374:	b40f      	push	{r0, r1, r2, r3}
 8012376:	b507      	push	{r0, r1, r2, lr}
 8012378:	4906      	ldr	r1, [pc, #24]	@ (8012394 <iprintf+0x20>)
 801237a:	ab04      	add	r3, sp, #16
 801237c:	6808      	ldr	r0, [r1, #0]
 801237e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012382:	6881      	ldr	r1, [r0, #8]
 8012384:	9301      	str	r3, [sp, #4]
 8012386:	f001 fdb1 	bl	8013eec <_vfiprintf_r>
 801238a:	b003      	add	sp, #12
 801238c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012390:	b004      	add	sp, #16
 8012392:	4770      	bx	lr
 8012394:	200002d0 	.word	0x200002d0

08012398 <_puts_r>:
 8012398:	6a03      	ldr	r3, [r0, #32]
 801239a:	b570      	push	{r4, r5, r6, lr}
 801239c:	6884      	ldr	r4, [r0, #8]
 801239e:	4605      	mov	r5, r0
 80123a0:	460e      	mov	r6, r1
 80123a2:	b90b      	cbnz	r3, 80123a8 <_puts_r+0x10>
 80123a4:	f7ff ffb0 	bl	8012308 <__sinit>
 80123a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123aa:	07db      	lsls	r3, r3, #31
 80123ac:	d405      	bmi.n	80123ba <_puts_r+0x22>
 80123ae:	89a3      	ldrh	r3, [r4, #12]
 80123b0:	0598      	lsls	r0, r3, #22
 80123b2:	d402      	bmi.n	80123ba <_puts_r+0x22>
 80123b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123b6:	f000 f9ec 	bl	8012792 <__retarget_lock_acquire_recursive>
 80123ba:	89a3      	ldrh	r3, [r4, #12]
 80123bc:	0719      	lsls	r1, r3, #28
 80123be:	d502      	bpl.n	80123c6 <_puts_r+0x2e>
 80123c0:	6923      	ldr	r3, [r4, #16]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d135      	bne.n	8012432 <_puts_r+0x9a>
 80123c6:	4621      	mov	r1, r4
 80123c8:	4628      	mov	r0, r5
 80123ca:	f000 f8e5 	bl	8012598 <__swsetup_r>
 80123ce:	b380      	cbz	r0, 8012432 <_puts_r+0x9a>
 80123d0:	f04f 35ff 	mov.w	r5, #4294967295
 80123d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123d6:	07da      	lsls	r2, r3, #31
 80123d8:	d405      	bmi.n	80123e6 <_puts_r+0x4e>
 80123da:	89a3      	ldrh	r3, [r4, #12]
 80123dc:	059b      	lsls	r3, r3, #22
 80123de:	d402      	bmi.n	80123e6 <_puts_r+0x4e>
 80123e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123e2:	f000 f9d7 	bl	8012794 <__retarget_lock_release_recursive>
 80123e6:	4628      	mov	r0, r5
 80123e8:	bd70      	pop	{r4, r5, r6, pc}
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	da04      	bge.n	80123f8 <_puts_r+0x60>
 80123ee:	69a2      	ldr	r2, [r4, #24]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	dc17      	bgt.n	8012424 <_puts_r+0x8c>
 80123f4:	290a      	cmp	r1, #10
 80123f6:	d015      	beq.n	8012424 <_puts_r+0x8c>
 80123f8:	6823      	ldr	r3, [r4, #0]
 80123fa:	1c5a      	adds	r2, r3, #1
 80123fc:	6022      	str	r2, [r4, #0]
 80123fe:	7019      	strb	r1, [r3, #0]
 8012400:	68a3      	ldr	r3, [r4, #8]
 8012402:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012406:	3b01      	subs	r3, #1
 8012408:	60a3      	str	r3, [r4, #8]
 801240a:	2900      	cmp	r1, #0
 801240c:	d1ed      	bne.n	80123ea <_puts_r+0x52>
 801240e:	2b00      	cmp	r3, #0
 8012410:	da11      	bge.n	8012436 <_puts_r+0x9e>
 8012412:	4622      	mov	r2, r4
 8012414:	210a      	movs	r1, #10
 8012416:	4628      	mov	r0, r5
 8012418:	f000 f87f 	bl	801251a <__swbuf_r>
 801241c:	3001      	adds	r0, #1
 801241e:	d0d7      	beq.n	80123d0 <_puts_r+0x38>
 8012420:	250a      	movs	r5, #10
 8012422:	e7d7      	b.n	80123d4 <_puts_r+0x3c>
 8012424:	4622      	mov	r2, r4
 8012426:	4628      	mov	r0, r5
 8012428:	f000 f877 	bl	801251a <__swbuf_r>
 801242c:	3001      	adds	r0, #1
 801242e:	d1e7      	bne.n	8012400 <_puts_r+0x68>
 8012430:	e7ce      	b.n	80123d0 <_puts_r+0x38>
 8012432:	3e01      	subs	r6, #1
 8012434:	e7e4      	b.n	8012400 <_puts_r+0x68>
 8012436:	6823      	ldr	r3, [r4, #0]
 8012438:	1c5a      	adds	r2, r3, #1
 801243a:	6022      	str	r2, [r4, #0]
 801243c:	220a      	movs	r2, #10
 801243e:	701a      	strb	r2, [r3, #0]
 8012440:	e7ee      	b.n	8012420 <_puts_r+0x88>
	...

08012444 <puts>:
 8012444:	4b02      	ldr	r3, [pc, #8]	@ (8012450 <puts+0xc>)
 8012446:	4601      	mov	r1, r0
 8012448:	6818      	ldr	r0, [r3, #0]
 801244a:	f7ff bfa5 	b.w	8012398 <_puts_r>
 801244e:	bf00      	nop
 8012450:	200002d0 	.word	0x200002d0

08012454 <siprintf>:
 8012454:	b40e      	push	{r1, r2, r3}
 8012456:	b500      	push	{lr}
 8012458:	b09c      	sub	sp, #112	@ 0x70
 801245a:	ab1d      	add	r3, sp, #116	@ 0x74
 801245c:	9002      	str	r0, [sp, #8]
 801245e:	9006      	str	r0, [sp, #24]
 8012460:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012464:	4809      	ldr	r0, [pc, #36]	@ (801248c <siprintf+0x38>)
 8012466:	9107      	str	r1, [sp, #28]
 8012468:	9104      	str	r1, [sp, #16]
 801246a:	4909      	ldr	r1, [pc, #36]	@ (8012490 <siprintf+0x3c>)
 801246c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012470:	9105      	str	r1, [sp, #20]
 8012472:	6800      	ldr	r0, [r0, #0]
 8012474:	9301      	str	r3, [sp, #4]
 8012476:	a902      	add	r1, sp, #8
 8012478:	f001 fc12 	bl	8013ca0 <_svfiprintf_r>
 801247c:	9b02      	ldr	r3, [sp, #8]
 801247e:	2200      	movs	r2, #0
 8012480:	701a      	strb	r2, [r3, #0]
 8012482:	b01c      	add	sp, #112	@ 0x70
 8012484:	f85d eb04 	ldr.w	lr, [sp], #4
 8012488:	b003      	add	sp, #12
 801248a:	4770      	bx	lr
 801248c:	200002d0 	.word	0x200002d0
 8012490:	ffff0208 	.word	0xffff0208

08012494 <__sread>:
 8012494:	b510      	push	{r4, lr}
 8012496:	460c      	mov	r4, r1
 8012498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801249c:	f000 f91a 	bl	80126d4 <_read_r>
 80124a0:	2800      	cmp	r0, #0
 80124a2:	bfab      	itete	ge
 80124a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80124a6:	89a3      	ldrhlt	r3, [r4, #12]
 80124a8:	181b      	addge	r3, r3, r0
 80124aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80124ae:	bfac      	ite	ge
 80124b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80124b2:	81a3      	strhlt	r3, [r4, #12]
 80124b4:	bd10      	pop	{r4, pc}

080124b6 <__swrite>:
 80124b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ba:	461f      	mov	r7, r3
 80124bc:	898b      	ldrh	r3, [r1, #12]
 80124be:	05db      	lsls	r3, r3, #23
 80124c0:	4605      	mov	r5, r0
 80124c2:	460c      	mov	r4, r1
 80124c4:	4616      	mov	r6, r2
 80124c6:	d505      	bpl.n	80124d4 <__swrite+0x1e>
 80124c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124cc:	2302      	movs	r3, #2
 80124ce:	2200      	movs	r2, #0
 80124d0:	f000 f8ee 	bl	80126b0 <_lseek_r>
 80124d4:	89a3      	ldrh	r3, [r4, #12]
 80124d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80124de:	81a3      	strh	r3, [r4, #12]
 80124e0:	4632      	mov	r2, r6
 80124e2:	463b      	mov	r3, r7
 80124e4:	4628      	mov	r0, r5
 80124e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124ea:	f000 b915 	b.w	8012718 <_write_r>

080124ee <__sseek>:
 80124ee:	b510      	push	{r4, lr}
 80124f0:	460c      	mov	r4, r1
 80124f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124f6:	f000 f8db 	bl	80126b0 <_lseek_r>
 80124fa:	1c43      	adds	r3, r0, #1
 80124fc:	89a3      	ldrh	r3, [r4, #12]
 80124fe:	bf15      	itete	ne
 8012500:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801250a:	81a3      	strheq	r3, [r4, #12]
 801250c:	bf18      	it	ne
 801250e:	81a3      	strhne	r3, [r4, #12]
 8012510:	bd10      	pop	{r4, pc}

08012512 <__sclose>:
 8012512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012516:	f000 b8bb 	b.w	8012690 <_close_r>

0801251a <__swbuf_r>:
 801251a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801251c:	460e      	mov	r6, r1
 801251e:	4614      	mov	r4, r2
 8012520:	4605      	mov	r5, r0
 8012522:	b118      	cbz	r0, 801252c <__swbuf_r+0x12>
 8012524:	6a03      	ldr	r3, [r0, #32]
 8012526:	b90b      	cbnz	r3, 801252c <__swbuf_r+0x12>
 8012528:	f7ff feee 	bl	8012308 <__sinit>
 801252c:	69a3      	ldr	r3, [r4, #24]
 801252e:	60a3      	str	r3, [r4, #8]
 8012530:	89a3      	ldrh	r3, [r4, #12]
 8012532:	071a      	lsls	r2, r3, #28
 8012534:	d501      	bpl.n	801253a <__swbuf_r+0x20>
 8012536:	6923      	ldr	r3, [r4, #16]
 8012538:	b943      	cbnz	r3, 801254c <__swbuf_r+0x32>
 801253a:	4621      	mov	r1, r4
 801253c:	4628      	mov	r0, r5
 801253e:	f000 f82b 	bl	8012598 <__swsetup_r>
 8012542:	b118      	cbz	r0, 801254c <__swbuf_r+0x32>
 8012544:	f04f 37ff 	mov.w	r7, #4294967295
 8012548:	4638      	mov	r0, r7
 801254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801254c:	6823      	ldr	r3, [r4, #0]
 801254e:	6922      	ldr	r2, [r4, #16]
 8012550:	1a98      	subs	r0, r3, r2
 8012552:	6963      	ldr	r3, [r4, #20]
 8012554:	b2f6      	uxtb	r6, r6
 8012556:	4283      	cmp	r3, r0
 8012558:	4637      	mov	r7, r6
 801255a:	dc05      	bgt.n	8012568 <__swbuf_r+0x4e>
 801255c:	4621      	mov	r1, r4
 801255e:	4628      	mov	r0, r5
 8012560:	f7ff fe0a 	bl	8012178 <_fflush_r>
 8012564:	2800      	cmp	r0, #0
 8012566:	d1ed      	bne.n	8012544 <__swbuf_r+0x2a>
 8012568:	68a3      	ldr	r3, [r4, #8]
 801256a:	3b01      	subs	r3, #1
 801256c:	60a3      	str	r3, [r4, #8]
 801256e:	6823      	ldr	r3, [r4, #0]
 8012570:	1c5a      	adds	r2, r3, #1
 8012572:	6022      	str	r2, [r4, #0]
 8012574:	701e      	strb	r6, [r3, #0]
 8012576:	6962      	ldr	r2, [r4, #20]
 8012578:	1c43      	adds	r3, r0, #1
 801257a:	429a      	cmp	r2, r3
 801257c:	d004      	beq.n	8012588 <__swbuf_r+0x6e>
 801257e:	89a3      	ldrh	r3, [r4, #12]
 8012580:	07db      	lsls	r3, r3, #31
 8012582:	d5e1      	bpl.n	8012548 <__swbuf_r+0x2e>
 8012584:	2e0a      	cmp	r6, #10
 8012586:	d1df      	bne.n	8012548 <__swbuf_r+0x2e>
 8012588:	4621      	mov	r1, r4
 801258a:	4628      	mov	r0, r5
 801258c:	f7ff fdf4 	bl	8012178 <_fflush_r>
 8012590:	2800      	cmp	r0, #0
 8012592:	d0d9      	beq.n	8012548 <__swbuf_r+0x2e>
 8012594:	e7d6      	b.n	8012544 <__swbuf_r+0x2a>
	...

08012598 <__swsetup_r>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	4b29      	ldr	r3, [pc, #164]	@ (8012640 <__swsetup_r+0xa8>)
 801259c:	4605      	mov	r5, r0
 801259e:	6818      	ldr	r0, [r3, #0]
 80125a0:	460c      	mov	r4, r1
 80125a2:	b118      	cbz	r0, 80125ac <__swsetup_r+0x14>
 80125a4:	6a03      	ldr	r3, [r0, #32]
 80125a6:	b90b      	cbnz	r3, 80125ac <__swsetup_r+0x14>
 80125a8:	f7ff feae 	bl	8012308 <__sinit>
 80125ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125b0:	0719      	lsls	r1, r3, #28
 80125b2:	d422      	bmi.n	80125fa <__swsetup_r+0x62>
 80125b4:	06da      	lsls	r2, r3, #27
 80125b6:	d407      	bmi.n	80125c8 <__swsetup_r+0x30>
 80125b8:	2209      	movs	r2, #9
 80125ba:	602a      	str	r2, [r5, #0]
 80125bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125c0:	81a3      	strh	r3, [r4, #12]
 80125c2:	f04f 30ff 	mov.w	r0, #4294967295
 80125c6:	e033      	b.n	8012630 <__swsetup_r+0x98>
 80125c8:	0758      	lsls	r0, r3, #29
 80125ca:	d512      	bpl.n	80125f2 <__swsetup_r+0x5a>
 80125cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125ce:	b141      	cbz	r1, 80125e2 <__swsetup_r+0x4a>
 80125d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125d4:	4299      	cmp	r1, r3
 80125d6:	d002      	beq.n	80125de <__swsetup_r+0x46>
 80125d8:	4628      	mov	r0, r5
 80125da:	f000 ff39 	bl	8013450 <_free_r>
 80125de:	2300      	movs	r3, #0
 80125e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80125e2:	89a3      	ldrh	r3, [r4, #12]
 80125e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80125e8:	81a3      	strh	r3, [r4, #12]
 80125ea:	2300      	movs	r3, #0
 80125ec:	6063      	str	r3, [r4, #4]
 80125ee:	6923      	ldr	r3, [r4, #16]
 80125f0:	6023      	str	r3, [r4, #0]
 80125f2:	89a3      	ldrh	r3, [r4, #12]
 80125f4:	f043 0308 	orr.w	r3, r3, #8
 80125f8:	81a3      	strh	r3, [r4, #12]
 80125fa:	6923      	ldr	r3, [r4, #16]
 80125fc:	b94b      	cbnz	r3, 8012612 <__swsetup_r+0x7a>
 80125fe:	89a3      	ldrh	r3, [r4, #12]
 8012600:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012608:	d003      	beq.n	8012612 <__swsetup_r+0x7a>
 801260a:	4621      	mov	r1, r4
 801260c:	4628      	mov	r0, r5
 801260e:	f001 fdab 	bl	8014168 <__smakebuf_r>
 8012612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012616:	f013 0201 	ands.w	r2, r3, #1
 801261a:	d00a      	beq.n	8012632 <__swsetup_r+0x9a>
 801261c:	2200      	movs	r2, #0
 801261e:	60a2      	str	r2, [r4, #8]
 8012620:	6962      	ldr	r2, [r4, #20]
 8012622:	4252      	negs	r2, r2
 8012624:	61a2      	str	r2, [r4, #24]
 8012626:	6922      	ldr	r2, [r4, #16]
 8012628:	b942      	cbnz	r2, 801263c <__swsetup_r+0xa4>
 801262a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801262e:	d1c5      	bne.n	80125bc <__swsetup_r+0x24>
 8012630:	bd38      	pop	{r3, r4, r5, pc}
 8012632:	0799      	lsls	r1, r3, #30
 8012634:	bf58      	it	pl
 8012636:	6962      	ldrpl	r2, [r4, #20]
 8012638:	60a2      	str	r2, [r4, #8]
 801263a:	e7f4      	b.n	8012626 <__swsetup_r+0x8e>
 801263c:	2000      	movs	r0, #0
 801263e:	e7f7      	b.n	8012630 <__swsetup_r+0x98>
 8012640:	200002d0 	.word	0x200002d0

08012644 <memmove>:
 8012644:	4288      	cmp	r0, r1
 8012646:	b510      	push	{r4, lr}
 8012648:	eb01 0402 	add.w	r4, r1, r2
 801264c:	d902      	bls.n	8012654 <memmove+0x10>
 801264e:	4284      	cmp	r4, r0
 8012650:	4623      	mov	r3, r4
 8012652:	d807      	bhi.n	8012664 <memmove+0x20>
 8012654:	1e43      	subs	r3, r0, #1
 8012656:	42a1      	cmp	r1, r4
 8012658:	d008      	beq.n	801266c <memmove+0x28>
 801265a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801265e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012662:	e7f8      	b.n	8012656 <memmove+0x12>
 8012664:	4402      	add	r2, r0
 8012666:	4601      	mov	r1, r0
 8012668:	428a      	cmp	r2, r1
 801266a:	d100      	bne.n	801266e <memmove+0x2a>
 801266c:	bd10      	pop	{r4, pc}
 801266e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012676:	e7f7      	b.n	8012668 <memmove+0x24>

08012678 <memset>:
 8012678:	4402      	add	r2, r0
 801267a:	4603      	mov	r3, r0
 801267c:	4293      	cmp	r3, r2
 801267e:	d100      	bne.n	8012682 <memset+0xa>
 8012680:	4770      	bx	lr
 8012682:	f803 1b01 	strb.w	r1, [r3], #1
 8012686:	e7f9      	b.n	801267c <memset+0x4>

08012688 <_localeconv_r>:
 8012688:	4800      	ldr	r0, [pc, #0]	@ (801268c <_localeconv_r+0x4>)
 801268a:	4770      	bx	lr
 801268c:	20000410 	.word	0x20000410

08012690 <_close_r>:
 8012690:	b538      	push	{r3, r4, r5, lr}
 8012692:	4d06      	ldr	r5, [pc, #24]	@ (80126ac <_close_r+0x1c>)
 8012694:	2300      	movs	r3, #0
 8012696:	4604      	mov	r4, r0
 8012698:	4608      	mov	r0, r1
 801269a:	602b      	str	r3, [r5, #0]
 801269c:	f7f8 fbfc 	bl	800ae98 <_close>
 80126a0:	1c43      	adds	r3, r0, #1
 80126a2:	d102      	bne.n	80126aa <_close_r+0x1a>
 80126a4:	682b      	ldr	r3, [r5, #0]
 80126a6:	b103      	cbz	r3, 80126aa <_close_r+0x1a>
 80126a8:	6023      	str	r3, [r4, #0]
 80126aa:	bd38      	pop	{r3, r4, r5, pc}
 80126ac:	20000adc 	.word	0x20000adc

080126b0 <_lseek_r>:
 80126b0:	b538      	push	{r3, r4, r5, lr}
 80126b2:	4d07      	ldr	r5, [pc, #28]	@ (80126d0 <_lseek_r+0x20>)
 80126b4:	4604      	mov	r4, r0
 80126b6:	4608      	mov	r0, r1
 80126b8:	4611      	mov	r1, r2
 80126ba:	2200      	movs	r2, #0
 80126bc:	602a      	str	r2, [r5, #0]
 80126be:	461a      	mov	r2, r3
 80126c0:	f7f8 fc11 	bl	800aee6 <_lseek>
 80126c4:	1c43      	adds	r3, r0, #1
 80126c6:	d102      	bne.n	80126ce <_lseek_r+0x1e>
 80126c8:	682b      	ldr	r3, [r5, #0]
 80126ca:	b103      	cbz	r3, 80126ce <_lseek_r+0x1e>
 80126cc:	6023      	str	r3, [r4, #0]
 80126ce:	bd38      	pop	{r3, r4, r5, pc}
 80126d0:	20000adc 	.word	0x20000adc

080126d4 <_read_r>:
 80126d4:	b538      	push	{r3, r4, r5, lr}
 80126d6:	4d07      	ldr	r5, [pc, #28]	@ (80126f4 <_read_r+0x20>)
 80126d8:	4604      	mov	r4, r0
 80126da:	4608      	mov	r0, r1
 80126dc:	4611      	mov	r1, r2
 80126de:	2200      	movs	r2, #0
 80126e0:	602a      	str	r2, [r5, #0]
 80126e2:	461a      	mov	r2, r3
 80126e4:	f7f8 fb9f 	bl	800ae26 <_read>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d102      	bne.n	80126f2 <_read_r+0x1e>
 80126ec:	682b      	ldr	r3, [r5, #0]
 80126ee:	b103      	cbz	r3, 80126f2 <_read_r+0x1e>
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	bd38      	pop	{r3, r4, r5, pc}
 80126f4:	20000adc 	.word	0x20000adc

080126f8 <_sbrk_r>:
 80126f8:	b538      	push	{r3, r4, r5, lr}
 80126fa:	4d06      	ldr	r5, [pc, #24]	@ (8012714 <_sbrk_r+0x1c>)
 80126fc:	2300      	movs	r3, #0
 80126fe:	4604      	mov	r4, r0
 8012700:	4608      	mov	r0, r1
 8012702:	602b      	str	r3, [r5, #0]
 8012704:	f7f8 fbfc 	bl	800af00 <_sbrk>
 8012708:	1c43      	adds	r3, r0, #1
 801270a:	d102      	bne.n	8012712 <_sbrk_r+0x1a>
 801270c:	682b      	ldr	r3, [r5, #0]
 801270e:	b103      	cbz	r3, 8012712 <_sbrk_r+0x1a>
 8012710:	6023      	str	r3, [r4, #0]
 8012712:	bd38      	pop	{r3, r4, r5, pc}
 8012714:	20000adc 	.word	0x20000adc

08012718 <_write_r>:
 8012718:	b538      	push	{r3, r4, r5, lr}
 801271a:	4d07      	ldr	r5, [pc, #28]	@ (8012738 <_write_r+0x20>)
 801271c:	4604      	mov	r4, r0
 801271e:	4608      	mov	r0, r1
 8012720:	4611      	mov	r1, r2
 8012722:	2200      	movs	r2, #0
 8012724:	602a      	str	r2, [r5, #0]
 8012726:	461a      	mov	r2, r3
 8012728:	f7f8 fb9a 	bl	800ae60 <_write>
 801272c:	1c43      	adds	r3, r0, #1
 801272e:	d102      	bne.n	8012736 <_write_r+0x1e>
 8012730:	682b      	ldr	r3, [r5, #0]
 8012732:	b103      	cbz	r3, 8012736 <_write_r+0x1e>
 8012734:	6023      	str	r3, [r4, #0]
 8012736:	bd38      	pop	{r3, r4, r5, pc}
 8012738:	20000adc 	.word	0x20000adc

0801273c <__errno>:
 801273c:	4b01      	ldr	r3, [pc, #4]	@ (8012744 <__errno+0x8>)
 801273e:	6818      	ldr	r0, [r3, #0]
 8012740:	4770      	bx	lr
 8012742:	bf00      	nop
 8012744:	200002d0 	.word	0x200002d0

08012748 <__libc_init_array>:
 8012748:	b570      	push	{r4, r5, r6, lr}
 801274a:	4d0d      	ldr	r5, [pc, #52]	@ (8012780 <__libc_init_array+0x38>)
 801274c:	4c0d      	ldr	r4, [pc, #52]	@ (8012784 <__libc_init_array+0x3c>)
 801274e:	1b64      	subs	r4, r4, r5
 8012750:	10a4      	asrs	r4, r4, #2
 8012752:	2600      	movs	r6, #0
 8012754:	42a6      	cmp	r6, r4
 8012756:	d109      	bne.n	801276c <__libc_init_array+0x24>
 8012758:	4d0b      	ldr	r5, [pc, #44]	@ (8012788 <__libc_init_array+0x40>)
 801275a:	4c0c      	ldr	r4, [pc, #48]	@ (801278c <__libc_init_array+0x44>)
 801275c:	f003 f814 	bl	8015788 <_init>
 8012760:	1b64      	subs	r4, r4, r5
 8012762:	10a4      	asrs	r4, r4, #2
 8012764:	2600      	movs	r6, #0
 8012766:	42a6      	cmp	r6, r4
 8012768:	d105      	bne.n	8012776 <__libc_init_array+0x2e>
 801276a:	bd70      	pop	{r4, r5, r6, pc}
 801276c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012770:	4798      	blx	r3
 8012772:	3601      	adds	r6, #1
 8012774:	e7ee      	b.n	8012754 <__libc_init_array+0xc>
 8012776:	f855 3b04 	ldr.w	r3, [r5], #4
 801277a:	4798      	blx	r3
 801277c:	3601      	adds	r6, #1
 801277e:	e7f2      	b.n	8012766 <__libc_init_array+0x1e>
 8012780:	08016298 	.word	0x08016298
 8012784:	08016298 	.word	0x08016298
 8012788:	08016298 	.word	0x08016298
 801278c:	0801629c 	.word	0x0801629c

08012790 <__retarget_lock_init_recursive>:
 8012790:	4770      	bx	lr

08012792 <__retarget_lock_acquire_recursive>:
 8012792:	4770      	bx	lr

08012794 <__retarget_lock_release_recursive>:
 8012794:	4770      	bx	lr

08012796 <memcpy>:
 8012796:	440a      	add	r2, r1
 8012798:	4291      	cmp	r1, r2
 801279a:	f100 33ff 	add.w	r3, r0, #4294967295
 801279e:	d100      	bne.n	80127a2 <memcpy+0xc>
 80127a0:	4770      	bx	lr
 80127a2:	b510      	push	{r4, lr}
 80127a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127ac:	4291      	cmp	r1, r2
 80127ae:	d1f9      	bne.n	80127a4 <memcpy+0xe>
 80127b0:	bd10      	pop	{r4, pc}

080127b2 <quorem>:
 80127b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b6:	6903      	ldr	r3, [r0, #16]
 80127b8:	690c      	ldr	r4, [r1, #16]
 80127ba:	42a3      	cmp	r3, r4
 80127bc:	4607      	mov	r7, r0
 80127be:	db7e      	blt.n	80128be <quorem+0x10c>
 80127c0:	3c01      	subs	r4, #1
 80127c2:	f101 0814 	add.w	r8, r1, #20
 80127c6:	00a3      	lsls	r3, r4, #2
 80127c8:	f100 0514 	add.w	r5, r0, #20
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80127d2:	9301      	str	r3, [sp, #4]
 80127d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80127d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80127dc:	3301      	adds	r3, #1
 80127de:	429a      	cmp	r2, r3
 80127e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80127e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80127e8:	d32e      	bcc.n	8012848 <quorem+0x96>
 80127ea:	f04f 0a00 	mov.w	sl, #0
 80127ee:	46c4      	mov	ip, r8
 80127f0:	46ae      	mov	lr, r5
 80127f2:	46d3      	mov	fp, sl
 80127f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80127f8:	b298      	uxth	r0, r3
 80127fa:	fb06 a000 	mla	r0, r6, r0, sl
 80127fe:	0c02      	lsrs	r2, r0, #16
 8012800:	0c1b      	lsrs	r3, r3, #16
 8012802:	fb06 2303 	mla	r3, r6, r3, r2
 8012806:	f8de 2000 	ldr.w	r2, [lr]
 801280a:	b280      	uxth	r0, r0
 801280c:	b292      	uxth	r2, r2
 801280e:	1a12      	subs	r2, r2, r0
 8012810:	445a      	add	r2, fp
 8012812:	f8de 0000 	ldr.w	r0, [lr]
 8012816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801281a:	b29b      	uxth	r3, r3
 801281c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012820:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012824:	b292      	uxth	r2, r2
 8012826:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801282a:	45e1      	cmp	r9, ip
 801282c:	f84e 2b04 	str.w	r2, [lr], #4
 8012830:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012834:	d2de      	bcs.n	80127f4 <quorem+0x42>
 8012836:	9b00      	ldr	r3, [sp, #0]
 8012838:	58eb      	ldr	r3, [r5, r3]
 801283a:	b92b      	cbnz	r3, 8012848 <quorem+0x96>
 801283c:	9b01      	ldr	r3, [sp, #4]
 801283e:	3b04      	subs	r3, #4
 8012840:	429d      	cmp	r5, r3
 8012842:	461a      	mov	r2, r3
 8012844:	d32f      	bcc.n	80128a6 <quorem+0xf4>
 8012846:	613c      	str	r4, [r7, #16]
 8012848:	4638      	mov	r0, r7
 801284a:	f001 f8c5 	bl	80139d8 <__mcmp>
 801284e:	2800      	cmp	r0, #0
 8012850:	db25      	blt.n	801289e <quorem+0xec>
 8012852:	4629      	mov	r1, r5
 8012854:	2000      	movs	r0, #0
 8012856:	f858 2b04 	ldr.w	r2, [r8], #4
 801285a:	f8d1 c000 	ldr.w	ip, [r1]
 801285e:	fa1f fe82 	uxth.w	lr, r2
 8012862:	fa1f f38c 	uxth.w	r3, ip
 8012866:	eba3 030e 	sub.w	r3, r3, lr
 801286a:	4403      	add	r3, r0
 801286c:	0c12      	lsrs	r2, r2, #16
 801286e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012872:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012876:	b29b      	uxth	r3, r3
 8012878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801287c:	45c1      	cmp	r9, r8
 801287e:	f841 3b04 	str.w	r3, [r1], #4
 8012882:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012886:	d2e6      	bcs.n	8012856 <quorem+0xa4>
 8012888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801288c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012890:	b922      	cbnz	r2, 801289c <quorem+0xea>
 8012892:	3b04      	subs	r3, #4
 8012894:	429d      	cmp	r5, r3
 8012896:	461a      	mov	r2, r3
 8012898:	d30b      	bcc.n	80128b2 <quorem+0x100>
 801289a:	613c      	str	r4, [r7, #16]
 801289c:	3601      	adds	r6, #1
 801289e:	4630      	mov	r0, r6
 80128a0:	b003      	add	sp, #12
 80128a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a6:	6812      	ldr	r2, [r2, #0]
 80128a8:	3b04      	subs	r3, #4
 80128aa:	2a00      	cmp	r2, #0
 80128ac:	d1cb      	bne.n	8012846 <quorem+0x94>
 80128ae:	3c01      	subs	r4, #1
 80128b0:	e7c6      	b.n	8012840 <quorem+0x8e>
 80128b2:	6812      	ldr	r2, [r2, #0]
 80128b4:	3b04      	subs	r3, #4
 80128b6:	2a00      	cmp	r2, #0
 80128b8:	d1ef      	bne.n	801289a <quorem+0xe8>
 80128ba:	3c01      	subs	r4, #1
 80128bc:	e7ea      	b.n	8012894 <quorem+0xe2>
 80128be:	2000      	movs	r0, #0
 80128c0:	e7ee      	b.n	80128a0 <quorem+0xee>
 80128c2:	0000      	movs	r0, r0
 80128c4:	0000      	movs	r0, r0
	...

080128c8 <_dtoa_r>:
 80128c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	69c7      	ldr	r7, [r0, #28]
 80128ce:	b099      	sub	sp, #100	@ 0x64
 80128d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80128d4:	ec55 4b10 	vmov	r4, r5, d0
 80128d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80128da:	9109      	str	r1, [sp, #36]	@ 0x24
 80128dc:	4683      	mov	fp, r0
 80128de:	920e      	str	r2, [sp, #56]	@ 0x38
 80128e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80128e2:	b97f      	cbnz	r7, 8012904 <_dtoa_r+0x3c>
 80128e4:	2010      	movs	r0, #16
 80128e6:	f7fe fead 	bl	8011644 <malloc>
 80128ea:	4602      	mov	r2, r0
 80128ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80128f0:	b920      	cbnz	r0, 80128fc <_dtoa_r+0x34>
 80128f2:	4ba7      	ldr	r3, [pc, #668]	@ (8012b90 <_dtoa_r+0x2c8>)
 80128f4:	21ef      	movs	r1, #239	@ 0xef
 80128f6:	48a7      	ldr	r0, [pc, #668]	@ (8012b94 <_dtoa_r+0x2cc>)
 80128f8:	f001 fc94 	bl	8014224 <__assert_func>
 80128fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012900:	6007      	str	r7, [r0, #0]
 8012902:	60c7      	str	r7, [r0, #12]
 8012904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012908:	6819      	ldr	r1, [r3, #0]
 801290a:	b159      	cbz	r1, 8012924 <_dtoa_r+0x5c>
 801290c:	685a      	ldr	r2, [r3, #4]
 801290e:	604a      	str	r2, [r1, #4]
 8012910:	2301      	movs	r3, #1
 8012912:	4093      	lsls	r3, r2
 8012914:	608b      	str	r3, [r1, #8]
 8012916:	4658      	mov	r0, fp
 8012918:	f000 fe24 	bl	8013564 <_Bfree>
 801291c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012920:	2200      	movs	r2, #0
 8012922:	601a      	str	r2, [r3, #0]
 8012924:	1e2b      	subs	r3, r5, #0
 8012926:	bfb9      	ittee	lt
 8012928:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801292c:	9303      	strlt	r3, [sp, #12]
 801292e:	2300      	movge	r3, #0
 8012930:	6033      	strge	r3, [r6, #0]
 8012932:	9f03      	ldr	r7, [sp, #12]
 8012934:	4b98      	ldr	r3, [pc, #608]	@ (8012b98 <_dtoa_r+0x2d0>)
 8012936:	bfbc      	itt	lt
 8012938:	2201      	movlt	r2, #1
 801293a:	6032      	strlt	r2, [r6, #0]
 801293c:	43bb      	bics	r3, r7
 801293e:	d112      	bne.n	8012966 <_dtoa_r+0x9e>
 8012940:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012942:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012946:	6013      	str	r3, [r2, #0]
 8012948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801294c:	4323      	orrs	r3, r4
 801294e:	f000 854d 	beq.w	80133ec <_dtoa_r+0xb24>
 8012952:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012954:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012bac <_dtoa_r+0x2e4>
 8012958:	2b00      	cmp	r3, #0
 801295a:	f000 854f 	beq.w	80133fc <_dtoa_r+0xb34>
 801295e:	f10a 0303 	add.w	r3, sl, #3
 8012962:	f000 bd49 	b.w	80133f8 <_dtoa_r+0xb30>
 8012966:	ed9d 7b02 	vldr	d7, [sp, #8]
 801296a:	2200      	movs	r2, #0
 801296c:	ec51 0b17 	vmov	r0, r1, d7
 8012970:	2300      	movs	r3, #0
 8012972:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012976:	f7ee f8c7 	bl	8000b08 <__aeabi_dcmpeq>
 801297a:	4680      	mov	r8, r0
 801297c:	b158      	cbz	r0, 8012996 <_dtoa_r+0xce>
 801297e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012980:	2301      	movs	r3, #1
 8012982:	6013      	str	r3, [r2, #0]
 8012984:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012986:	b113      	cbz	r3, 801298e <_dtoa_r+0xc6>
 8012988:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801298a:	4b84      	ldr	r3, [pc, #528]	@ (8012b9c <_dtoa_r+0x2d4>)
 801298c:	6013      	str	r3, [r2, #0]
 801298e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012bb0 <_dtoa_r+0x2e8>
 8012992:	f000 bd33 	b.w	80133fc <_dtoa_r+0xb34>
 8012996:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801299a:	aa16      	add	r2, sp, #88	@ 0x58
 801299c:	a917      	add	r1, sp, #92	@ 0x5c
 801299e:	4658      	mov	r0, fp
 80129a0:	f001 f8ca 	bl	8013b38 <__d2b>
 80129a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80129a8:	4681      	mov	r9, r0
 80129aa:	2e00      	cmp	r6, #0
 80129ac:	d077      	beq.n	8012a9e <_dtoa_r+0x1d6>
 80129ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80129b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80129b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80129bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80129c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80129c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80129c8:	4619      	mov	r1, r3
 80129ca:	2200      	movs	r2, #0
 80129cc:	4b74      	ldr	r3, [pc, #464]	@ (8012ba0 <_dtoa_r+0x2d8>)
 80129ce:	f7ed fc7b 	bl	80002c8 <__aeabi_dsub>
 80129d2:	a369      	add	r3, pc, #420	@ (adr r3, 8012b78 <_dtoa_r+0x2b0>)
 80129d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d8:	f7ed fe2e 	bl	8000638 <__aeabi_dmul>
 80129dc:	a368      	add	r3, pc, #416	@ (adr r3, 8012b80 <_dtoa_r+0x2b8>)
 80129de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e2:	f7ed fc73 	bl	80002cc <__adddf3>
 80129e6:	4604      	mov	r4, r0
 80129e8:	4630      	mov	r0, r6
 80129ea:	460d      	mov	r5, r1
 80129ec:	f7ed fdba 	bl	8000564 <__aeabi_i2d>
 80129f0:	a365      	add	r3, pc, #404	@ (adr r3, 8012b88 <_dtoa_r+0x2c0>)
 80129f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f6:	f7ed fe1f 	bl	8000638 <__aeabi_dmul>
 80129fa:	4602      	mov	r2, r0
 80129fc:	460b      	mov	r3, r1
 80129fe:	4620      	mov	r0, r4
 8012a00:	4629      	mov	r1, r5
 8012a02:	f7ed fc63 	bl	80002cc <__adddf3>
 8012a06:	4604      	mov	r4, r0
 8012a08:	460d      	mov	r5, r1
 8012a0a:	f7ee f8c5 	bl	8000b98 <__aeabi_d2iz>
 8012a0e:	2200      	movs	r2, #0
 8012a10:	4607      	mov	r7, r0
 8012a12:	2300      	movs	r3, #0
 8012a14:	4620      	mov	r0, r4
 8012a16:	4629      	mov	r1, r5
 8012a18:	f7ee f880 	bl	8000b1c <__aeabi_dcmplt>
 8012a1c:	b140      	cbz	r0, 8012a30 <_dtoa_r+0x168>
 8012a1e:	4638      	mov	r0, r7
 8012a20:	f7ed fda0 	bl	8000564 <__aeabi_i2d>
 8012a24:	4622      	mov	r2, r4
 8012a26:	462b      	mov	r3, r5
 8012a28:	f7ee f86e 	bl	8000b08 <__aeabi_dcmpeq>
 8012a2c:	b900      	cbnz	r0, 8012a30 <_dtoa_r+0x168>
 8012a2e:	3f01      	subs	r7, #1
 8012a30:	2f16      	cmp	r7, #22
 8012a32:	d851      	bhi.n	8012ad8 <_dtoa_r+0x210>
 8012a34:	4b5b      	ldr	r3, [pc, #364]	@ (8012ba4 <_dtoa_r+0x2dc>)
 8012a36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a42:	f7ee f86b 	bl	8000b1c <__aeabi_dcmplt>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	d048      	beq.n	8012adc <_dtoa_r+0x214>
 8012a4a:	3f01      	subs	r7, #1
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012a50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012a52:	1b9b      	subs	r3, r3, r6
 8012a54:	1e5a      	subs	r2, r3, #1
 8012a56:	bf44      	itt	mi
 8012a58:	f1c3 0801 	rsbmi	r8, r3, #1
 8012a5c:	2300      	movmi	r3, #0
 8012a5e:	9208      	str	r2, [sp, #32]
 8012a60:	bf54      	ite	pl
 8012a62:	f04f 0800 	movpl.w	r8, #0
 8012a66:	9308      	strmi	r3, [sp, #32]
 8012a68:	2f00      	cmp	r7, #0
 8012a6a:	db39      	blt.n	8012ae0 <_dtoa_r+0x218>
 8012a6c:	9b08      	ldr	r3, [sp, #32]
 8012a6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012a70:	443b      	add	r3, r7
 8012a72:	9308      	str	r3, [sp, #32]
 8012a74:	2300      	movs	r3, #0
 8012a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a7a:	2b09      	cmp	r3, #9
 8012a7c:	d864      	bhi.n	8012b48 <_dtoa_r+0x280>
 8012a7e:	2b05      	cmp	r3, #5
 8012a80:	bfc4      	itt	gt
 8012a82:	3b04      	subgt	r3, #4
 8012a84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a88:	f1a3 0302 	sub.w	r3, r3, #2
 8012a8c:	bfcc      	ite	gt
 8012a8e:	2400      	movgt	r4, #0
 8012a90:	2401      	movle	r4, #1
 8012a92:	2b03      	cmp	r3, #3
 8012a94:	d863      	bhi.n	8012b5e <_dtoa_r+0x296>
 8012a96:	e8df f003 	tbb	[pc, r3]
 8012a9a:	372a      	.short	0x372a
 8012a9c:	5535      	.short	0x5535
 8012a9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012aa2:	441e      	add	r6, r3
 8012aa4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012aa8:	2b20      	cmp	r3, #32
 8012aaa:	bfc1      	itttt	gt
 8012aac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012ab0:	409f      	lslgt	r7, r3
 8012ab2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012ab6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012aba:	bfd6      	itet	le
 8012abc:	f1c3 0320 	rsble	r3, r3, #32
 8012ac0:	ea47 0003 	orrgt.w	r0, r7, r3
 8012ac4:	fa04 f003 	lslle.w	r0, r4, r3
 8012ac8:	f7ed fd3c 	bl	8000544 <__aeabi_ui2d>
 8012acc:	2201      	movs	r2, #1
 8012ace:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012ad2:	3e01      	subs	r6, #1
 8012ad4:	9214      	str	r2, [sp, #80]	@ 0x50
 8012ad6:	e777      	b.n	80129c8 <_dtoa_r+0x100>
 8012ad8:	2301      	movs	r3, #1
 8012ada:	e7b8      	b.n	8012a4e <_dtoa_r+0x186>
 8012adc:	9012      	str	r0, [sp, #72]	@ 0x48
 8012ade:	e7b7      	b.n	8012a50 <_dtoa_r+0x188>
 8012ae0:	427b      	negs	r3, r7
 8012ae2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	eba8 0807 	sub.w	r8, r8, r7
 8012aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012aec:	e7c4      	b.n	8012a78 <_dtoa_r+0x1b0>
 8012aee:	2300      	movs	r3, #0
 8012af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	dc35      	bgt.n	8012b64 <_dtoa_r+0x29c>
 8012af8:	2301      	movs	r3, #1
 8012afa:	9300      	str	r3, [sp, #0]
 8012afc:	9307      	str	r3, [sp, #28]
 8012afe:	461a      	mov	r2, r3
 8012b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b02:	e00b      	b.n	8012b1c <_dtoa_r+0x254>
 8012b04:	2301      	movs	r3, #1
 8012b06:	e7f3      	b.n	8012af0 <_dtoa_r+0x228>
 8012b08:	2300      	movs	r3, #0
 8012b0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b0e:	18fb      	adds	r3, r7, r3
 8012b10:	9300      	str	r3, [sp, #0]
 8012b12:	3301      	adds	r3, #1
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	9307      	str	r3, [sp, #28]
 8012b18:	bfb8      	it	lt
 8012b1a:	2301      	movlt	r3, #1
 8012b1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012b20:	2100      	movs	r1, #0
 8012b22:	2204      	movs	r2, #4
 8012b24:	f102 0514 	add.w	r5, r2, #20
 8012b28:	429d      	cmp	r5, r3
 8012b2a:	d91f      	bls.n	8012b6c <_dtoa_r+0x2a4>
 8012b2c:	6041      	str	r1, [r0, #4]
 8012b2e:	4658      	mov	r0, fp
 8012b30:	f000 fcd8 	bl	80134e4 <_Balloc>
 8012b34:	4682      	mov	sl, r0
 8012b36:	2800      	cmp	r0, #0
 8012b38:	d13c      	bne.n	8012bb4 <_dtoa_r+0x2ec>
 8012b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8012ba8 <_dtoa_r+0x2e0>)
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012b42:	e6d8      	b.n	80128f6 <_dtoa_r+0x2e>
 8012b44:	2301      	movs	r3, #1
 8012b46:	e7e0      	b.n	8012b0a <_dtoa_r+0x242>
 8012b48:	2401      	movs	r4, #1
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012b50:	f04f 33ff 	mov.w	r3, #4294967295
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	9307      	str	r3, [sp, #28]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	2312      	movs	r3, #18
 8012b5c:	e7d0      	b.n	8012b00 <_dtoa_r+0x238>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b62:	e7f5      	b.n	8012b50 <_dtoa_r+0x288>
 8012b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b66:	9300      	str	r3, [sp, #0]
 8012b68:	9307      	str	r3, [sp, #28]
 8012b6a:	e7d7      	b.n	8012b1c <_dtoa_r+0x254>
 8012b6c:	3101      	adds	r1, #1
 8012b6e:	0052      	lsls	r2, r2, #1
 8012b70:	e7d8      	b.n	8012b24 <_dtoa_r+0x25c>
 8012b72:	bf00      	nop
 8012b74:	f3af 8000 	nop.w
 8012b78:	636f4361 	.word	0x636f4361
 8012b7c:	3fd287a7 	.word	0x3fd287a7
 8012b80:	8b60c8b3 	.word	0x8b60c8b3
 8012b84:	3fc68a28 	.word	0x3fc68a28
 8012b88:	509f79fb 	.word	0x509f79fb
 8012b8c:	3fd34413 	.word	0x3fd34413
 8012b90:	08015d89 	.word	0x08015d89
 8012b94:	08015da0 	.word	0x08015da0
 8012b98:	7ff00000 	.word	0x7ff00000
 8012b9c:	08015d59 	.word	0x08015d59
 8012ba0:	3ff80000 	.word	0x3ff80000
 8012ba4:	08015e98 	.word	0x08015e98
 8012ba8:	08015df8 	.word	0x08015df8
 8012bac:	08015d85 	.word	0x08015d85
 8012bb0:	08015d58 	.word	0x08015d58
 8012bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012bb8:	6018      	str	r0, [r3, #0]
 8012bba:	9b07      	ldr	r3, [sp, #28]
 8012bbc:	2b0e      	cmp	r3, #14
 8012bbe:	f200 80a4 	bhi.w	8012d0a <_dtoa_r+0x442>
 8012bc2:	2c00      	cmp	r4, #0
 8012bc4:	f000 80a1 	beq.w	8012d0a <_dtoa_r+0x442>
 8012bc8:	2f00      	cmp	r7, #0
 8012bca:	dd33      	ble.n	8012c34 <_dtoa_r+0x36c>
 8012bcc:	4bad      	ldr	r3, [pc, #692]	@ (8012e84 <_dtoa_r+0x5bc>)
 8012bce:	f007 020f 	and.w	r2, r7, #15
 8012bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012bd6:	ed93 7b00 	vldr	d7, [r3]
 8012bda:	05f8      	lsls	r0, r7, #23
 8012bdc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012be0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012be4:	d516      	bpl.n	8012c14 <_dtoa_r+0x34c>
 8012be6:	4ba8      	ldr	r3, [pc, #672]	@ (8012e88 <_dtoa_r+0x5c0>)
 8012be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012bec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012bf0:	f7ed fe4c 	bl	800088c <__aeabi_ddiv>
 8012bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bf8:	f004 040f 	and.w	r4, r4, #15
 8012bfc:	2603      	movs	r6, #3
 8012bfe:	4da2      	ldr	r5, [pc, #648]	@ (8012e88 <_dtoa_r+0x5c0>)
 8012c00:	b954      	cbnz	r4, 8012c18 <_dtoa_r+0x350>
 8012c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c0a:	f7ed fe3f 	bl	800088c <__aeabi_ddiv>
 8012c0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c12:	e028      	b.n	8012c66 <_dtoa_r+0x39e>
 8012c14:	2602      	movs	r6, #2
 8012c16:	e7f2      	b.n	8012bfe <_dtoa_r+0x336>
 8012c18:	07e1      	lsls	r1, r4, #31
 8012c1a:	d508      	bpl.n	8012c2e <_dtoa_r+0x366>
 8012c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c24:	f7ed fd08 	bl	8000638 <__aeabi_dmul>
 8012c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c2c:	3601      	adds	r6, #1
 8012c2e:	1064      	asrs	r4, r4, #1
 8012c30:	3508      	adds	r5, #8
 8012c32:	e7e5      	b.n	8012c00 <_dtoa_r+0x338>
 8012c34:	f000 80d2 	beq.w	8012ddc <_dtoa_r+0x514>
 8012c38:	427c      	negs	r4, r7
 8012c3a:	4b92      	ldr	r3, [pc, #584]	@ (8012e84 <_dtoa_r+0x5bc>)
 8012c3c:	4d92      	ldr	r5, [pc, #584]	@ (8012e88 <_dtoa_r+0x5c0>)
 8012c3e:	f004 020f 	and.w	r2, r4, #15
 8012c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c4e:	f7ed fcf3 	bl	8000638 <__aeabi_dmul>
 8012c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c56:	1124      	asrs	r4, r4, #4
 8012c58:	2300      	movs	r3, #0
 8012c5a:	2602      	movs	r6, #2
 8012c5c:	2c00      	cmp	r4, #0
 8012c5e:	f040 80b2 	bne.w	8012dc6 <_dtoa_r+0x4fe>
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d1d3      	bne.n	8012c0e <_dtoa_r+0x346>
 8012c66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012c68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	f000 80b7 	beq.w	8012de0 <_dtoa_r+0x518>
 8012c72:	4b86      	ldr	r3, [pc, #536]	@ (8012e8c <_dtoa_r+0x5c4>)
 8012c74:	2200      	movs	r2, #0
 8012c76:	4620      	mov	r0, r4
 8012c78:	4629      	mov	r1, r5
 8012c7a:	f7ed ff4f 	bl	8000b1c <__aeabi_dcmplt>
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	f000 80ae 	beq.w	8012de0 <_dtoa_r+0x518>
 8012c84:	9b07      	ldr	r3, [sp, #28]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	f000 80aa 	beq.w	8012de0 <_dtoa_r+0x518>
 8012c8c:	9b00      	ldr	r3, [sp, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	dd37      	ble.n	8012d02 <_dtoa_r+0x43a>
 8012c92:	1e7b      	subs	r3, r7, #1
 8012c94:	9304      	str	r3, [sp, #16]
 8012c96:	4620      	mov	r0, r4
 8012c98:	4b7d      	ldr	r3, [pc, #500]	@ (8012e90 <_dtoa_r+0x5c8>)
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	f7ed fccb 	bl	8000638 <__aeabi_dmul>
 8012ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ca6:	9c00      	ldr	r4, [sp, #0]
 8012ca8:	3601      	adds	r6, #1
 8012caa:	4630      	mov	r0, r6
 8012cac:	f7ed fc5a 	bl	8000564 <__aeabi_i2d>
 8012cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cb4:	f7ed fcc0 	bl	8000638 <__aeabi_dmul>
 8012cb8:	4b76      	ldr	r3, [pc, #472]	@ (8012e94 <_dtoa_r+0x5cc>)
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f7ed fb06 	bl	80002cc <__adddf3>
 8012cc0:	4605      	mov	r5, r0
 8012cc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012cc6:	2c00      	cmp	r4, #0
 8012cc8:	f040 808d 	bne.w	8012de6 <_dtoa_r+0x51e>
 8012ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cd0:	4b71      	ldr	r3, [pc, #452]	@ (8012e98 <_dtoa_r+0x5d0>)
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f7ed faf8 	bl	80002c8 <__aeabi_dsub>
 8012cd8:	4602      	mov	r2, r0
 8012cda:	460b      	mov	r3, r1
 8012cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012ce0:	462a      	mov	r2, r5
 8012ce2:	4633      	mov	r3, r6
 8012ce4:	f7ed ff38 	bl	8000b58 <__aeabi_dcmpgt>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	f040 828b 	bne.w	8013204 <_dtoa_r+0x93c>
 8012cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cf2:	462a      	mov	r2, r5
 8012cf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012cf8:	f7ed ff10 	bl	8000b1c <__aeabi_dcmplt>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	f040 8128 	bne.w	8012f52 <_dtoa_r+0x68a>
 8012d02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012d06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012d0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	f2c0 815a 	blt.w	8012fc6 <_dtoa_r+0x6fe>
 8012d12:	2f0e      	cmp	r7, #14
 8012d14:	f300 8157 	bgt.w	8012fc6 <_dtoa_r+0x6fe>
 8012d18:	4b5a      	ldr	r3, [pc, #360]	@ (8012e84 <_dtoa_r+0x5bc>)
 8012d1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012d1e:	ed93 7b00 	vldr	d7, [r3]
 8012d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	ed8d 7b00 	vstr	d7, [sp]
 8012d2a:	da03      	bge.n	8012d34 <_dtoa_r+0x46c>
 8012d2c:	9b07      	ldr	r3, [sp, #28]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	f340 8101 	ble.w	8012f36 <_dtoa_r+0x66e>
 8012d34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012d38:	4656      	mov	r6, sl
 8012d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d3e:	4620      	mov	r0, r4
 8012d40:	4629      	mov	r1, r5
 8012d42:	f7ed fda3 	bl	800088c <__aeabi_ddiv>
 8012d46:	f7ed ff27 	bl	8000b98 <__aeabi_d2iz>
 8012d4a:	4680      	mov	r8, r0
 8012d4c:	f7ed fc0a 	bl	8000564 <__aeabi_i2d>
 8012d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d54:	f7ed fc70 	bl	8000638 <__aeabi_dmul>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	4629      	mov	r1, r5
 8012d60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012d64:	f7ed fab0 	bl	80002c8 <__aeabi_dsub>
 8012d68:	f806 4b01 	strb.w	r4, [r6], #1
 8012d6c:	9d07      	ldr	r5, [sp, #28]
 8012d6e:	eba6 040a 	sub.w	r4, r6, sl
 8012d72:	42a5      	cmp	r5, r4
 8012d74:	4602      	mov	r2, r0
 8012d76:	460b      	mov	r3, r1
 8012d78:	f040 8117 	bne.w	8012faa <_dtoa_r+0x6e2>
 8012d7c:	f7ed faa6 	bl	80002cc <__adddf3>
 8012d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d84:	4604      	mov	r4, r0
 8012d86:	460d      	mov	r5, r1
 8012d88:	f7ed fee6 	bl	8000b58 <__aeabi_dcmpgt>
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	f040 80f9 	bne.w	8012f84 <_dtoa_r+0x6bc>
 8012d92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d96:	4620      	mov	r0, r4
 8012d98:	4629      	mov	r1, r5
 8012d9a:	f7ed feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8012d9e:	b118      	cbz	r0, 8012da8 <_dtoa_r+0x4e0>
 8012da0:	f018 0f01 	tst.w	r8, #1
 8012da4:	f040 80ee 	bne.w	8012f84 <_dtoa_r+0x6bc>
 8012da8:	4649      	mov	r1, r9
 8012daa:	4658      	mov	r0, fp
 8012dac:	f000 fbda 	bl	8013564 <_Bfree>
 8012db0:	2300      	movs	r3, #0
 8012db2:	7033      	strb	r3, [r6, #0]
 8012db4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012db6:	3701      	adds	r7, #1
 8012db8:	601f      	str	r7, [r3, #0]
 8012dba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	f000 831d 	beq.w	80133fc <_dtoa_r+0xb34>
 8012dc2:	601e      	str	r6, [r3, #0]
 8012dc4:	e31a      	b.n	80133fc <_dtoa_r+0xb34>
 8012dc6:	07e2      	lsls	r2, r4, #31
 8012dc8:	d505      	bpl.n	8012dd6 <_dtoa_r+0x50e>
 8012dca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012dce:	f7ed fc33 	bl	8000638 <__aeabi_dmul>
 8012dd2:	3601      	adds	r6, #1
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	1064      	asrs	r4, r4, #1
 8012dd8:	3508      	adds	r5, #8
 8012dda:	e73f      	b.n	8012c5c <_dtoa_r+0x394>
 8012ddc:	2602      	movs	r6, #2
 8012dde:	e742      	b.n	8012c66 <_dtoa_r+0x39e>
 8012de0:	9c07      	ldr	r4, [sp, #28]
 8012de2:	9704      	str	r7, [sp, #16]
 8012de4:	e761      	b.n	8012caa <_dtoa_r+0x3e2>
 8012de6:	4b27      	ldr	r3, [pc, #156]	@ (8012e84 <_dtoa_r+0x5bc>)
 8012de8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012dea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012dee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012df2:	4454      	add	r4, sl
 8012df4:	2900      	cmp	r1, #0
 8012df6:	d053      	beq.n	8012ea0 <_dtoa_r+0x5d8>
 8012df8:	4928      	ldr	r1, [pc, #160]	@ (8012e9c <_dtoa_r+0x5d4>)
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	f7ed fd46 	bl	800088c <__aeabi_ddiv>
 8012e00:	4633      	mov	r3, r6
 8012e02:	462a      	mov	r2, r5
 8012e04:	f7ed fa60 	bl	80002c8 <__aeabi_dsub>
 8012e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012e0c:	4656      	mov	r6, sl
 8012e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e12:	f7ed fec1 	bl	8000b98 <__aeabi_d2iz>
 8012e16:	4605      	mov	r5, r0
 8012e18:	f7ed fba4 	bl	8000564 <__aeabi_i2d>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	460b      	mov	r3, r1
 8012e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e24:	f7ed fa50 	bl	80002c8 <__aeabi_dsub>
 8012e28:	3530      	adds	r5, #48	@ 0x30
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e32:	f806 5b01 	strb.w	r5, [r6], #1
 8012e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012e3a:	f7ed fe6f 	bl	8000b1c <__aeabi_dcmplt>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	d171      	bne.n	8012f26 <_dtoa_r+0x65e>
 8012e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e46:	4911      	ldr	r1, [pc, #68]	@ (8012e8c <_dtoa_r+0x5c4>)
 8012e48:	2000      	movs	r0, #0
 8012e4a:	f7ed fa3d 	bl	80002c8 <__aeabi_dsub>
 8012e4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012e52:	f7ed fe63 	bl	8000b1c <__aeabi_dcmplt>
 8012e56:	2800      	cmp	r0, #0
 8012e58:	f040 8095 	bne.w	8012f86 <_dtoa_r+0x6be>
 8012e5c:	42a6      	cmp	r6, r4
 8012e5e:	f43f af50 	beq.w	8012d02 <_dtoa_r+0x43a>
 8012e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012e66:	4b0a      	ldr	r3, [pc, #40]	@ (8012e90 <_dtoa_r+0x5c8>)
 8012e68:	2200      	movs	r2, #0
 8012e6a:	f7ed fbe5 	bl	8000638 <__aeabi_dmul>
 8012e6e:	4b08      	ldr	r3, [pc, #32]	@ (8012e90 <_dtoa_r+0x5c8>)
 8012e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012e74:	2200      	movs	r2, #0
 8012e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e7a:	f7ed fbdd 	bl	8000638 <__aeabi_dmul>
 8012e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e82:	e7c4      	b.n	8012e0e <_dtoa_r+0x546>
 8012e84:	08015e98 	.word	0x08015e98
 8012e88:	08015e70 	.word	0x08015e70
 8012e8c:	3ff00000 	.word	0x3ff00000
 8012e90:	40240000 	.word	0x40240000
 8012e94:	401c0000 	.word	0x401c0000
 8012e98:	40140000 	.word	0x40140000
 8012e9c:	3fe00000 	.word	0x3fe00000
 8012ea0:	4631      	mov	r1, r6
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f7ed fbc8 	bl	8000638 <__aeabi_dmul>
 8012ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012eac:	9415      	str	r4, [sp, #84]	@ 0x54
 8012eae:	4656      	mov	r6, sl
 8012eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eb4:	f7ed fe70 	bl	8000b98 <__aeabi_d2iz>
 8012eb8:	4605      	mov	r5, r0
 8012eba:	f7ed fb53 	bl	8000564 <__aeabi_i2d>
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ec6:	f7ed f9ff 	bl	80002c8 <__aeabi_dsub>
 8012eca:	3530      	adds	r5, #48	@ 0x30
 8012ecc:	f806 5b01 	strb.w	r5, [r6], #1
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	460b      	mov	r3, r1
 8012ed4:	42a6      	cmp	r6, r4
 8012ed6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012eda:	f04f 0200 	mov.w	r2, #0
 8012ede:	d124      	bne.n	8012f2a <_dtoa_r+0x662>
 8012ee0:	4bac      	ldr	r3, [pc, #688]	@ (8013194 <_dtoa_r+0x8cc>)
 8012ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012ee6:	f7ed f9f1 	bl	80002cc <__adddf3>
 8012eea:	4602      	mov	r2, r0
 8012eec:	460b      	mov	r3, r1
 8012eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ef2:	f7ed fe31 	bl	8000b58 <__aeabi_dcmpgt>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d145      	bne.n	8012f86 <_dtoa_r+0x6be>
 8012efa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012efe:	49a5      	ldr	r1, [pc, #660]	@ (8013194 <_dtoa_r+0x8cc>)
 8012f00:	2000      	movs	r0, #0
 8012f02:	f7ed f9e1 	bl	80002c8 <__aeabi_dsub>
 8012f06:	4602      	mov	r2, r0
 8012f08:	460b      	mov	r3, r1
 8012f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f0e:	f7ed fe05 	bl	8000b1c <__aeabi_dcmplt>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	f43f aef5 	beq.w	8012d02 <_dtoa_r+0x43a>
 8012f18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012f1a:	1e73      	subs	r3, r6, #1
 8012f1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8012f1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f22:	2b30      	cmp	r3, #48	@ 0x30
 8012f24:	d0f8      	beq.n	8012f18 <_dtoa_r+0x650>
 8012f26:	9f04      	ldr	r7, [sp, #16]
 8012f28:	e73e      	b.n	8012da8 <_dtoa_r+0x4e0>
 8012f2a:	4b9b      	ldr	r3, [pc, #620]	@ (8013198 <_dtoa_r+0x8d0>)
 8012f2c:	f7ed fb84 	bl	8000638 <__aeabi_dmul>
 8012f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f34:	e7bc      	b.n	8012eb0 <_dtoa_r+0x5e8>
 8012f36:	d10c      	bne.n	8012f52 <_dtoa_r+0x68a>
 8012f38:	4b98      	ldr	r3, [pc, #608]	@ (801319c <_dtoa_r+0x8d4>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f40:	f7ed fb7a 	bl	8000638 <__aeabi_dmul>
 8012f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f48:	f7ed fdfc 	bl	8000b44 <__aeabi_dcmpge>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	f000 8157 	beq.w	8013200 <_dtoa_r+0x938>
 8012f52:	2400      	movs	r4, #0
 8012f54:	4625      	mov	r5, r4
 8012f56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f58:	43db      	mvns	r3, r3
 8012f5a:	9304      	str	r3, [sp, #16]
 8012f5c:	4656      	mov	r6, sl
 8012f5e:	2700      	movs	r7, #0
 8012f60:	4621      	mov	r1, r4
 8012f62:	4658      	mov	r0, fp
 8012f64:	f000 fafe 	bl	8013564 <_Bfree>
 8012f68:	2d00      	cmp	r5, #0
 8012f6a:	d0dc      	beq.n	8012f26 <_dtoa_r+0x65e>
 8012f6c:	b12f      	cbz	r7, 8012f7a <_dtoa_r+0x6b2>
 8012f6e:	42af      	cmp	r7, r5
 8012f70:	d003      	beq.n	8012f7a <_dtoa_r+0x6b2>
 8012f72:	4639      	mov	r1, r7
 8012f74:	4658      	mov	r0, fp
 8012f76:	f000 faf5 	bl	8013564 <_Bfree>
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	4658      	mov	r0, fp
 8012f7e:	f000 faf1 	bl	8013564 <_Bfree>
 8012f82:	e7d0      	b.n	8012f26 <_dtoa_r+0x65e>
 8012f84:	9704      	str	r7, [sp, #16]
 8012f86:	4633      	mov	r3, r6
 8012f88:	461e      	mov	r6, r3
 8012f8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f8e:	2a39      	cmp	r2, #57	@ 0x39
 8012f90:	d107      	bne.n	8012fa2 <_dtoa_r+0x6da>
 8012f92:	459a      	cmp	sl, r3
 8012f94:	d1f8      	bne.n	8012f88 <_dtoa_r+0x6c0>
 8012f96:	9a04      	ldr	r2, [sp, #16]
 8012f98:	3201      	adds	r2, #1
 8012f9a:	9204      	str	r2, [sp, #16]
 8012f9c:	2230      	movs	r2, #48	@ 0x30
 8012f9e:	f88a 2000 	strb.w	r2, [sl]
 8012fa2:	781a      	ldrb	r2, [r3, #0]
 8012fa4:	3201      	adds	r2, #1
 8012fa6:	701a      	strb	r2, [r3, #0]
 8012fa8:	e7bd      	b.n	8012f26 <_dtoa_r+0x65e>
 8012faa:	4b7b      	ldr	r3, [pc, #492]	@ (8013198 <_dtoa_r+0x8d0>)
 8012fac:	2200      	movs	r2, #0
 8012fae:	f7ed fb43 	bl	8000638 <__aeabi_dmul>
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	460d      	mov	r5, r1
 8012fba:	f7ed fda5 	bl	8000b08 <__aeabi_dcmpeq>
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	f43f aebb 	beq.w	8012d3a <_dtoa_r+0x472>
 8012fc4:	e6f0      	b.n	8012da8 <_dtoa_r+0x4e0>
 8012fc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012fc8:	2a00      	cmp	r2, #0
 8012fca:	f000 80db 	beq.w	8013184 <_dtoa_r+0x8bc>
 8012fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012fd0:	2a01      	cmp	r2, #1
 8012fd2:	f300 80bf 	bgt.w	8013154 <_dtoa_r+0x88c>
 8012fd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012fd8:	2a00      	cmp	r2, #0
 8012fda:	f000 80b7 	beq.w	801314c <_dtoa_r+0x884>
 8012fde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012fe2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012fe4:	4646      	mov	r6, r8
 8012fe6:	9a08      	ldr	r2, [sp, #32]
 8012fe8:	2101      	movs	r1, #1
 8012fea:	441a      	add	r2, r3
 8012fec:	4658      	mov	r0, fp
 8012fee:	4498      	add	r8, r3
 8012ff0:	9208      	str	r2, [sp, #32]
 8012ff2:	f000 fb6b 	bl	80136cc <__i2b>
 8012ff6:	4605      	mov	r5, r0
 8012ff8:	b15e      	cbz	r6, 8013012 <_dtoa_r+0x74a>
 8012ffa:	9b08      	ldr	r3, [sp, #32]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	dd08      	ble.n	8013012 <_dtoa_r+0x74a>
 8013000:	42b3      	cmp	r3, r6
 8013002:	9a08      	ldr	r2, [sp, #32]
 8013004:	bfa8      	it	ge
 8013006:	4633      	movge	r3, r6
 8013008:	eba8 0803 	sub.w	r8, r8, r3
 801300c:	1af6      	subs	r6, r6, r3
 801300e:	1ad3      	subs	r3, r2, r3
 8013010:	9308      	str	r3, [sp, #32]
 8013012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013014:	b1f3      	cbz	r3, 8013054 <_dtoa_r+0x78c>
 8013016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013018:	2b00      	cmp	r3, #0
 801301a:	f000 80b7 	beq.w	801318c <_dtoa_r+0x8c4>
 801301e:	b18c      	cbz	r4, 8013044 <_dtoa_r+0x77c>
 8013020:	4629      	mov	r1, r5
 8013022:	4622      	mov	r2, r4
 8013024:	4658      	mov	r0, fp
 8013026:	f000 fc11 	bl	801384c <__pow5mult>
 801302a:	464a      	mov	r2, r9
 801302c:	4601      	mov	r1, r0
 801302e:	4605      	mov	r5, r0
 8013030:	4658      	mov	r0, fp
 8013032:	f000 fb61 	bl	80136f8 <__multiply>
 8013036:	4649      	mov	r1, r9
 8013038:	9004      	str	r0, [sp, #16]
 801303a:	4658      	mov	r0, fp
 801303c:	f000 fa92 	bl	8013564 <_Bfree>
 8013040:	9b04      	ldr	r3, [sp, #16]
 8013042:	4699      	mov	r9, r3
 8013044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013046:	1b1a      	subs	r2, r3, r4
 8013048:	d004      	beq.n	8013054 <_dtoa_r+0x78c>
 801304a:	4649      	mov	r1, r9
 801304c:	4658      	mov	r0, fp
 801304e:	f000 fbfd 	bl	801384c <__pow5mult>
 8013052:	4681      	mov	r9, r0
 8013054:	2101      	movs	r1, #1
 8013056:	4658      	mov	r0, fp
 8013058:	f000 fb38 	bl	80136cc <__i2b>
 801305c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801305e:	4604      	mov	r4, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	f000 81cf 	beq.w	8013404 <_dtoa_r+0xb3c>
 8013066:	461a      	mov	r2, r3
 8013068:	4601      	mov	r1, r0
 801306a:	4658      	mov	r0, fp
 801306c:	f000 fbee 	bl	801384c <__pow5mult>
 8013070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013072:	2b01      	cmp	r3, #1
 8013074:	4604      	mov	r4, r0
 8013076:	f300 8095 	bgt.w	80131a4 <_dtoa_r+0x8dc>
 801307a:	9b02      	ldr	r3, [sp, #8]
 801307c:	2b00      	cmp	r3, #0
 801307e:	f040 8087 	bne.w	8013190 <_dtoa_r+0x8c8>
 8013082:	9b03      	ldr	r3, [sp, #12]
 8013084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013088:	2b00      	cmp	r3, #0
 801308a:	f040 8089 	bne.w	80131a0 <_dtoa_r+0x8d8>
 801308e:	9b03      	ldr	r3, [sp, #12]
 8013090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013094:	0d1b      	lsrs	r3, r3, #20
 8013096:	051b      	lsls	r3, r3, #20
 8013098:	b12b      	cbz	r3, 80130a6 <_dtoa_r+0x7de>
 801309a:	9b08      	ldr	r3, [sp, #32]
 801309c:	3301      	adds	r3, #1
 801309e:	9308      	str	r3, [sp, #32]
 80130a0:	f108 0801 	add.w	r8, r8, #1
 80130a4:	2301      	movs	r3, #1
 80130a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80130a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f000 81b0 	beq.w	8013410 <_dtoa_r+0xb48>
 80130b0:	6923      	ldr	r3, [r4, #16]
 80130b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80130b6:	6918      	ldr	r0, [r3, #16]
 80130b8:	f000 fabc 	bl	8013634 <__hi0bits>
 80130bc:	f1c0 0020 	rsb	r0, r0, #32
 80130c0:	9b08      	ldr	r3, [sp, #32]
 80130c2:	4418      	add	r0, r3
 80130c4:	f010 001f 	ands.w	r0, r0, #31
 80130c8:	d077      	beq.n	80131ba <_dtoa_r+0x8f2>
 80130ca:	f1c0 0320 	rsb	r3, r0, #32
 80130ce:	2b04      	cmp	r3, #4
 80130d0:	dd6b      	ble.n	80131aa <_dtoa_r+0x8e2>
 80130d2:	9b08      	ldr	r3, [sp, #32]
 80130d4:	f1c0 001c 	rsb	r0, r0, #28
 80130d8:	4403      	add	r3, r0
 80130da:	4480      	add	r8, r0
 80130dc:	4406      	add	r6, r0
 80130de:	9308      	str	r3, [sp, #32]
 80130e0:	f1b8 0f00 	cmp.w	r8, #0
 80130e4:	dd05      	ble.n	80130f2 <_dtoa_r+0x82a>
 80130e6:	4649      	mov	r1, r9
 80130e8:	4642      	mov	r2, r8
 80130ea:	4658      	mov	r0, fp
 80130ec:	f000 fc08 	bl	8013900 <__lshift>
 80130f0:	4681      	mov	r9, r0
 80130f2:	9b08      	ldr	r3, [sp, #32]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	dd05      	ble.n	8013104 <_dtoa_r+0x83c>
 80130f8:	4621      	mov	r1, r4
 80130fa:	461a      	mov	r2, r3
 80130fc:	4658      	mov	r0, fp
 80130fe:	f000 fbff 	bl	8013900 <__lshift>
 8013102:	4604      	mov	r4, r0
 8013104:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013106:	2b00      	cmp	r3, #0
 8013108:	d059      	beq.n	80131be <_dtoa_r+0x8f6>
 801310a:	4621      	mov	r1, r4
 801310c:	4648      	mov	r0, r9
 801310e:	f000 fc63 	bl	80139d8 <__mcmp>
 8013112:	2800      	cmp	r0, #0
 8013114:	da53      	bge.n	80131be <_dtoa_r+0x8f6>
 8013116:	1e7b      	subs	r3, r7, #1
 8013118:	9304      	str	r3, [sp, #16]
 801311a:	4649      	mov	r1, r9
 801311c:	2300      	movs	r3, #0
 801311e:	220a      	movs	r2, #10
 8013120:	4658      	mov	r0, fp
 8013122:	f000 fa41 	bl	80135a8 <__multadd>
 8013126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013128:	4681      	mov	r9, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	f000 8172 	beq.w	8013414 <_dtoa_r+0xb4c>
 8013130:	2300      	movs	r3, #0
 8013132:	4629      	mov	r1, r5
 8013134:	220a      	movs	r2, #10
 8013136:	4658      	mov	r0, fp
 8013138:	f000 fa36 	bl	80135a8 <__multadd>
 801313c:	9b00      	ldr	r3, [sp, #0]
 801313e:	2b00      	cmp	r3, #0
 8013140:	4605      	mov	r5, r0
 8013142:	dc67      	bgt.n	8013214 <_dtoa_r+0x94c>
 8013144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013146:	2b02      	cmp	r3, #2
 8013148:	dc41      	bgt.n	80131ce <_dtoa_r+0x906>
 801314a:	e063      	b.n	8013214 <_dtoa_r+0x94c>
 801314c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801314e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013152:	e746      	b.n	8012fe2 <_dtoa_r+0x71a>
 8013154:	9b07      	ldr	r3, [sp, #28]
 8013156:	1e5c      	subs	r4, r3, #1
 8013158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801315a:	42a3      	cmp	r3, r4
 801315c:	bfbf      	itttt	lt
 801315e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013160:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013162:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013164:	1ae3      	sublt	r3, r4, r3
 8013166:	bfb4      	ite	lt
 8013168:	18d2      	addlt	r2, r2, r3
 801316a:	1b1c      	subge	r4, r3, r4
 801316c:	9b07      	ldr	r3, [sp, #28]
 801316e:	bfbc      	itt	lt
 8013170:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013172:	2400      	movlt	r4, #0
 8013174:	2b00      	cmp	r3, #0
 8013176:	bfb5      	itete	lt
 8013178:	eba8 0603 	sublt.w	r6, r8, r3
 801317c:	9b07      	ldrge	r3, [sp, #28]
 801317e:	2300      	movlt	r3, #0
 8013180:	4646      	movge	r6, r8
 8013182:	e730      	b.n	8012fe6 <_dtoa_r+0x71e>
 8013184:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013186:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013188:	4646      	mov	r6, r8
 801318a:	e735      	b.n	8012ff8 <_dtoa_r+0x730>
 801318c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801318e:	e75c      	b.n	801304a <_dtoa_r+0x782>
 8013190:	2300      	movs	r3, #0
 8013192:	e788      	b.n	80130a6 <_dtoa_r+0x7de>
 8013194:	3fe00000 	.word	0x3fe00000
 8013198:	40240000 	.word	0x40240000
 801319c:	40140000 	.word	0x40140000
 80131a0:	9b02      	ldr	r3, [sp, #8]
 80131a2:	e780      	b.n	80130a6 <_dtoa_r+0x7de>
 80131a4:	2300      	movs	r3, #0
 80131a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80131a8:	e782      	b.n	80130b0 <_dtoa_r+0x7e8>
 80131aa:	d099      	beq.n	80130e0 <_dtoa_r+0x818>
 80131ac:	9a08      	ldr	r2, [sp, #32]
 80131ae:	331c      	adds	r3, #28
 80131b0:	441a      	add	r2, r3
 80131b2:	4498      	add	r8, r3
 80131b4:	441e      	add	r6, r3
 80131b6:	9208      	str	r2, [sp, #32]
 80131b8:	e792      	b.n	80130e0 <_dtoa_r+0x818>
 80131ba:	4603      	mov	r3, r0
 80131bc:	e7f6      	b.n	80131ac <_dtoa_r+0x8e4>
 80131be:	9b07      	ldr	r3, [sp, #28]
 80131c0:	9704      	str	r7, [sp, #16]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	dc20      	bgt.n	8013208 <_dtoa_r+0x940>
 80131c6:	9300      	str	r3, [sp, #0]
 80131c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131ca:	2b02      	cmp	r3, #2
 80131cc:	dd1e      	ble.n	801320c <_dtoa_r+0x944>
 80131ce:	9b00      	ldr	r3, [sp, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	f47f aec0 	bne.w	8012f56 <_dtoa_r+0x68e>
 80131d6:	4621      	mov	r1, r4
 80131d8:	2205      	movs	r2, #5
 80131da:	4658      	mov	r0, fp
 80131dc:	f000 f9e4 	bl	80135a8 <__multadd>
 80131e0:	4601      	mov	r1, r0
 80131e2:	4604      	mov	r4, r0
 80131e4:	4648      	mov	r0, r9
 80131e6:	f000 fbf7 	bl	80139d8 <__mcmp>
 80131ea:	2800      	cmp	r0, #0
 80131ec:	f77f aeb3 	ble.w	8012f56 <_dtoa_r+0x68e>
 80131f0:	4656      	mov	r6, sl
 80131f2:	2331      	movs	r3, #49	@ 0x31
 80131f4:	f806 3b01 	strb.w	r3, [r6], #1
 80131f8:	9b04      	ldr	r3, [sp, #16]
 80131fa:	3301      	adds	r3, #1
 80131fc:	9304      	str	r3, [sp, #16]
 80131fe:	e6ae      	b.n	8012f5e <_dtoa_r+0x696>
 8013200:	9c07      	ldr	r4, [sp, #28]
 8013202:	9704      	str	r7, [sp, #16]
 8013204:	4625      	mov	r5, r4
 8013206:	e7f3      	b.n	80131f0 <_dtoa_r+0x928>
 8013208:	9b07      	ldr	r3, [sp, #28]
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801320e:	2b00      	cmp	r3, #0
 8013210:	f000 8104 	beq.w	801341c <_dtoa_r+0xb54>
 8013214:	2e00      	cmp	r6, #0
 8013216:	dd05      	ble.n	8013224 <_dtoa_r+0x95c>
 8013218:	4629      	mov	r1, r5
 801321a:	4632      	mov	r2, r6
 801321c:	4658      	mov	r0, fp
 801321e:	f000 fb6f 	bl	8013900 <__lshift>
 8013222:	4605      	mov	r5, r0
 8013224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013226:	2b00      	cmp	r3, #0
 8013228:	d05a      	beq.n	80132e0 <_dtoa_r+0xa18>
 801322a:	6869      	ldr	r1, [r5, #4]
 801322c:	4658      	mov	r0, fp
 801322e:	f000 f959 	bl	80134e4 <_Balloc>
 8013232:	4606      	mov	r6, r0
 8013234:	b928      	cbnz	r0, 8013242 <_dtoa_r+0x97a>
 8013236:	4b84      	ldr	r3, [pc, #528]	@ (8013448 <_dtoa_r+0xb80>)
 8013238:	4602      	mov	r2, r0
 801323a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801323e:	f7ff bb5a 	b.w	80128f6 <_dtoa_r+0x2e>
 8013242:	692a      	ldr	r2, [r5, #16]
 8013244:	3202      	adds	r2, #2
 8013246:	0092      	lsls	r2, r2, #2
 8013248:	f105 010c 	add.w	r1, r5, #12
 801324c:	300c      	adds	r0, #12
 801324e:	f7ff faa2 	bl	8012796 <memcpy>
 8013252:	2201      	movs	r2, #1
 8013254:	4631      	mov	r1, r6
 8013256:	4658      	mov	r0, fp
 8013258:	f000 fb52 	bl	8013900 <__lshift>
 801325c:	f10a 0301 	add.w	r3, sl, #1
 8013260:	9307      	str	r3, [sp, #28]
 8013262:	9b00      	ldr	r3, [sp, #0]
 8013264:	4453      	add	r3, sl
 8013266:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013268:	9b02      	ldr	r3, [sp, #8]
 801326a:	f003 0301 	and.w	r3, r3, #1
 801326e:	462f      	mov	r7, r5
 8013270:	930a      	str	r3, [sp, #40]	@ 0x28
 8013272:	4605      	mov	r5, r0
 8013274:	9b07      	ldr	r3, [sp, #28]
 8013276:	4621      	mov	r1, r4
 8013278:	3b01      	subs	r3, #1
 801327a:	4648      	mov	r0, r9
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	f7ff fa98 	bl	80127b2 <quorem>
 8013282:	4639      	mov	r1, r7
 8013284:	9002      	str	r0, [sp, #8]
 8013286:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801328a:	4648      	mov	r0, r9
 801328c:	f000 fba4 	bl	80139d8 <__mcmp>
 8013290:	462a      	mov	r2, r5
 8013292:	9008      	str	r0, [sp, #32]
 8013294:	4621      	mov	r1, r4
 8013296:	4658      	mov	r0, fp
 8013298:	f000 fbba 	bl	8013a10 <__mdiff>
 801329c:	68c2      	ldr	r2, [r0, #12]
 801329e:	4606      	mov	r6, r0
 80132a0:	bb02      	cbnz	r2, 80132e4 <_dtoa_r+0xa1c>
 80132a2:	4601      	mov	r1, r0
 80132a4:	4648      	mov	r0, r9
 80132a6:	f000 fb97 	bl	80139d8 <__mcmp>
 80132aa:	4602      	mov	r2, r0
 80132ac:	4631      	mov	r1, r6
 80132ae:	4658      	mov	r0, fp
 80132b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80132b2:	f000 f957 	bl	8013564 <_Bfree>
 80132b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132ba:	9e07      	ldr	r6, [sp, #28]
 80132bc:	ea43 0102 	orr.w	r1, r3, r2
 80132c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132c2:	4319      	orrs	r1, r3
 80132c4:	d110      	bne.n	80132e8 <_dtoa_r+0xa20>
 80132c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80132ca:	d029      	beq.n	8013320 <_dtoa_r+0xa58>
 80132cc:	9b08      	ldr	r3, [sp, #32]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	dd02      	ble.n	80132d8 <_dtoa_r+0xa10>
 80132d2:	9b02      	ldr	r3, [sp, #8]
 80132d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80132d8:	9b00      	ldr	r3, [sp, #0]
 80132da:	f883 8000 	strb.w	r8, [r3]
 80132de:	e63f      	b.n	8012f60 <_dtoa_r+0x698>
 80132e0:	4628      	mov	r0, r5
 80132e2:	e7bb      	b.n	801325c <_dtoa_r+0x994>
 80132e4:	2201      	movs	r2, #1
 80132e6:	e7e1      	b.n	80132ac <_dtoa_r+0x9e4>
 80132e8:	9b08      	ldr	r3, [sp, #32]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	db04      	blt.n	80132f8 <_dtoa_r+0xa30>
 80132ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80132f0:	430b      	orrs	r3, r1
 80132f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80132f4:	430b      	orrs	r3, r1
 80132f6:	d120      	bne.n	801333a <_dtoa_r+0xa72>
 80132f8:	2a00      	cmp	r2, #0
 80132fa:	dded      	ble.n	80132d8 <_dtoa_r+0xa10>
 80132fc:	4649      	mov	r1, r9
 80132fe:	2201      	movs	r2, #1
 8013300:	4658      	mov	r0, fp
 8013302:	f000 fafd 	bl	8013900 <__lshift>
 8013306:	4621      	mov	r1, r4
 8013308:	4681      	mov	r9, r0
 801330a:	f000 fb65 	bl	80139d8 <__mcmp>
 801330e:	2800      	cmp	r0, #0
 8013310:	dc03      	bgt.n	801331a <_dtoa_r+0xa52>
 8013312:	d1e1      	bne.n	80132d8 <_dtoa_r+0xa10>
 8013314:	f018 0f01 	tst.w	r8, #1
 8013318:	d0de      	beq.n	80132d8 <_dtoa_r+0xa10>
 801331a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801331e:	d1d8      	bne.n	80132d2 <_dtoa_r+0xa0a>
 8013320:	9a00      	ldr	r2, [sp, #0]
 8013322:	2339      	movs	r3, #57	@ 0x39
 8013324:	7013      	strb	r3, [r2, #0]
 8013326:	4633      	mov	r3, r6
 8013328:	461e      	mov	r6, r3
 801332a:	3b01      	subs	r3, #1
 801332c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013330:	2a39      	cmp	r2, #57	@ 0x39
 8013332:	d052      	beq.n	80133da <_dtoa_r+0xb12>
 8013334:	3201      	adds	r2, #1
 8013336:	701a      	strb	r2, [r3, #0]
 8013338:	e612      	b.n	8012f60 <_dtoa_r+0x698>
 801333a:	2a00      	cmp	r2, #0
 801333c:	dd07      	ble.n	801334e <_dtoa_r+0xa86>
 801333e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013342:	d0ed      	beq.n	8013320 <_dtoa_r+0xa58>
 8013344:	9a00      	ldr	r2, [sp, #0]
 8013346:	f108 0301 	add.w	r3, r8, #1
 801334a:	7013      	strb	r3, [r2, #0]
 801334c:	e608      	b.n	8012f60 <_dtoa_r+0x698>
 801334e:	9b07      	ldr	r3, [sp, #28]
 8013350:	9a07      	ldr	r2, [sp, #28]
 8013352:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013358:	4293      	cmp	r3, r2
 801335a:	d028      	beq.n	80133ae <_dtoa_r+0xae6>
 801335c:	4649      	mov	r1, r9
 801335e:	2300      	movs	r3, #0
 8013360:	220a      	movs	r2, #10
 8013362:	4658      	mov	r0, fp
 8013364:	f000 f920 	bl	80135a8 <__multadd>
 8013368:	42af      	cmp	r7, r5
 801336a:	4681      	mov	r9, r0
 801336c:	f04f 0300 	mov.w	r3, #0
 8013370:	f04f 020a 	mov.w	r2, #10
 8013374:	4639      	mov	r1, r7
 8013376:	4658      	mov	r0, fp
 8013378:	d107      	bne.n	801338a <_dtoa_r+0xac2>
 801337a:	f000 f915 	bl	80135a8 <__multadd>
 801337e:	4607      	mov	r7, r0
 8013380:	4605      	mov	r5, r0
 8013382:	9b07      	ldr	r3, [sp, #28]
 8013384:	3301      	adds	r3, #1
 8013386:	9307      	str	r3, [sp, #28]
 8013388:	e774      	b.n	8013274 <_dtoa_r+0x9ac>
 801338a:	f000 f90d 	bl	80135a8 <__multadd>
 801338e:	4629      	mov	r1, r5
 8013390:	4607      	mov	r7, r0
 8013392:	2300      	movs	r3, #0
 8013394:	220a      	movs	r2, #10
 8013396:	4658      	mov	r0, fp
 8013398:	f000 f906 	bl	80135a8 <__multadd>
 801339c:	4605      	mov	r5, r0
 801339e:	e7f0      	b.n	8013382 <_dtoa_r+0xaba>
 80133a0:	9b00      	ldr	r3, [sp, #0]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	bfcc      	ite	gt
 80133a6:	461e      	movgt	r6, r3
 80133a8:	2601      	movle	r6, #1
 80133aa:	4456      	add	r6, sl
 80133ac:	2700      	movs	r7, #0
 80133ae:	4649      	mov	r1, r9
 80133b0:	2201      	movs	r2, #1
 80133b2:	4658      	mov	r0, fp
 80133b4:	f000 faa4 	bl	8013900 <__lshift>
 80133b8:	4621      	mov	r1, r4
 80133ba:	4681      	mov	r9, r0
 80133bc:	f000 fb0c 	bl	80139d8 <__mcmp>
 80133c0:	2800      	cmp	r0, #0
 80133c2:	dcb0      	bgt.n	8013326 <_dtoa_r+0xa5e>
 80133c4:	d102      	bne.n	80133cc <_dtoa_r+0xb04>
 80133c6:	f018 0f01 	tst.w	r8, #1
 80133ca:	d1ac      	bne.n	8013326 <_dtoa_r+0xa5e>
 80133cc:	4633      	mov	r3, r6
 80133ce:	461e      	mov	r6, r3
 80133d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80133d4:	2a30      	cmp	r2, #48	@ 0x30
 80133d6:	d0fa      	beq.n	80133ce <_dtoa_r+0xb06>
 80133d8:	e5c2      	b.n	8012f60 <_dtoa_r+0x698>
 80133da:	459a      	cmp	sl, r3
 80133dc:	d1a4      	bne.n	8013328 <_dtoa_r+0xa60>
 80133de:	9b04      	ldr	r3, [sp, #16]
 80133e0:	3301      	adds	r3, #1
 80133e2:	9304      	str	r3, [sp, #16]
 80133e4:	2331      	movs	r3, #49	@ 0x31
 80133e6:	f88a 3000 	strb.w	r3, [sl]
 80133ea:	e5b9      	b.n	8012f60 <_dtoa_r+0x698>
 80133ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80133ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801344c <_dtoa_r+0xb84>
 80133f2:	b11b      	cbz	r3, 80133fc <_dtoa_r+0xb34>
 80133f4:	f10a 0308 	add.w	r3, sl, #8
 80133f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80133fa:	6013      	str	r3, [r2, #0]
 80133fc:	4650      	mov	r0, sl
 80133fe:	b019      	add	sp, #100	@ 0x64
 8013400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013406:	2b01      	cmp	r3, #1
 8013408:	f77f ae37 	ble.w	801307a <_dtoa_r+0x7b2>
 801340c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801340e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013410:	2001      	movs	r0, #1
 8013412:	e655      	b.n	80130c0 <_dtoa_r+0x7f8>
 8013414:	9b00      	ldr	r3, [sp, #0]
 8013416:	2b00      	cmp	r3, #0
 8013418:	f77f aed6 	ble.w	80131c8 <_dtoa_r+0x900>
 801341c:	4656      	mov	r6, sl
 801341e:	4621      	mov	r1, r4
 8013420:	4648      	mov	r0, r9
 8013422:	f7ff f9c6 	bl	80127b2 <quorem>
 8013426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801342a:	f806 8b01 	strb.w	r8, [r6], #1
 801342e:	9b00      	ldr	r3, [sp, #0]
 8013430:	eba6 020a 	sub.w	r2, r6, sl
 8013434:	4293      	cmp	r3, r2
 8013436:	ddb3      	ble.n	80133a0 <_dtoa_r+0xad8>
 8013438:	4649      	mov	r1, r9
 801343a:	2300      	movs	r3, #0
 801343c:	220a      	movs	r2, #10
 801343e:	4658      	mov	r0, fp
 8013440:	f000 f8b2 	bl	80135a8 <__multadd>
 8013444:	4681      	mov	r9, r0
 8013446:	e7ea      	b.n	801341e <_dtoa_r+0xb56>
 8013448:	08015df8 	.word	0x08015df8
 801344c:	08015d7c 	.word	0x08015d7c

08013450 <_free_r>:
 8013450:	b538      	push	{r3, r4, r5, lr}
 8013452:	4605      	mov	r5, r0
 8013454:	2900      	cmp	r1, #0
 8013456:	d041      	beq.n	80134dc <_free_r+0x8c>
 8013458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801345c:	1f0c      	subs	r4, r1, #4
 801345e:	2b00      	cmp	r3, #0
 8013460:	bfb8      	it	lt
 8013462:	18e4      	addlt	r4, r4, r3
 8013464:	f7fe f9a0 	bl	80117a8 <__malloc_lock>
 8013468:	4a1d      	ldr	r2, [pc, #116]	@ (80134e0 <_free_r+0x90>)
 801346a:	6813      	ldr	r3, [r2, #0]
 801346c:	b933      	cbnz	r3, 801347c <_free_r+0x2c>
 801346e:	6063      	str	r3, [r4, #4]
 8013470:	6014      	str	r4, [r2, #0]
 8013472:	4628      	mov	r0, r5
 8013474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013478:	f7fe b99c 	b.w	80117b4 <__malloc_unlock>
 801347c:	42a3      	cmp	r3, r4
 801347e:	d908      	bls.n	8013492 <_free_r+0x42>
 8013480:	6820      	ldr	r0, [r4, #0]
 8013482:	1821      	adds	r1, r4, r0
 8013484:	428b      	cmp	r3, r1
 8013486:	bf01      	itttt	eq
 8013488:	6819      	ldreq	r1, [r3, #0]
 801348a:	685b      	ldreq	r3, [r3, #4]
 801348c:	1809      	addeq	r1, r1, r0
 801348e:	6021      	streq	r1, [r4, #0]
 8013490:	e7ed      	b.n	801346e <_free_r+0x1e>
 8013492:	461a      	mov	r2, r3
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	b10b      	cbz	r3, 801349c <_free_r+0x4c>
 8013498:	42a3      	cmp	r3, r4
 801349a:	d9fa      	bls.n	8013492 <_free_r+0x42>
 801349c:	6811      	ldr	r1, [r2, #0]
 801349e:	1850      	adds	r0, r2, r1
 80134a0:	42a0      	cmp	r0, r4
 80134a2:	d10b      	bne.n	80134bc <_free_r+0x6c>
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	4401      	add	r1, r0
 80134a8:	1850      	adds	r0, r2, r1
 80134aa:	4283      	cmp	r3, r0
 80134ac:	6011      	str	r1, [r2, #0]
 80134ae:	d1e0      	bne.n	8013472 <_free_r+0x22>
 80134b0:	6818      	ldr	r0, [r3, #0]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	6053      	str	r3, [r2, #4]
 80134b6:	4408      	add	r0, r1
 80134b8:	6010      	str	r0, [r2, #0]
 80134ba:	e7da      	b.n	8013472 <_free_r+0x22>
 80134bc:	d902      	bls.n	80134c4 <_free_r+0x74>
 80134be:	230c      	movs	r3, #12
 80134c0:	602b      	str	r3, [r5, #0]
 80134c2:	e7d6      	b.n	8013472 <_free_r+0x22>
 80134c4:	6820      	ldr	r0, [r4, #0]
 80134c6:	1821      	adds	r1, r4, r0
 80134c8:	428b      	cmp	r3, r1
 80134ca:	bf04      	itt	eq
 80134cc:	6819      	ldreq	r1, [r3, #0]
 80134ce:	685b      	ldreq	r3, [r3, #4]
 80134d0:	6063      	str	r3, [r4, #4]
 80134d2:	bf04      	itt	eq
 80134d4:	1809      	addeq	r1, r1, r0
 80134d6:	6021      	streq	r1, [r4, #0]
 80134d8:	6054      	str	r4, [r2, #4]
 80134da:	e7ca      	b.n	8013472 <_free_r+0x22>
 80134dc:	bd38      	pop	{r3, r4, r5, pc}
 80134de:	bf00      	nop
 80134e0:	2000099c 	.word	0x2000099c

080134e4 <_Balloc>:
 80134e4:	b570      	push	{r4, r5, r6, lr}
 80134e6:	69c6      	ldr	r6, [r0, #28]
 80134e8:	4604      	mov	r4, r0
 80134ea:	460d      	mov	r5, r1
 80134ec:	b976      	cbnz	r6, 801350c <_Balloc+0x28>
 80134ee:	2010      	movs	r0, #16
 80134f0:	f7fe f8a8 	bl	8011644 <malloc>
 80134f4:	4602      	mov	r2, r0
 80134f6:	61e0      	str	r0, [r4, #28]
 80134f8:	b920      	cbnz	r0, 8013504 <_Balloc+0x20>
 80134fa:	4b18      	ldr	r3, [pc, #96]	@ (801355c <_Balloc+0x78>)
 80134fc:	4818      	ldr	r0, [pc, #96]	@ (8013560 <_Balloc+0x7c>)
 80134fe:	216b      	movs	r1, #107	@ 0x6b
 8013500:	f000 fe90 	bl	8014224 <__assert_func>
 8013504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013508:	6006      	str	r6, [r0, #0]
 801350a:	60c6      	str	r6, [r0, #12]
 801350c:	69e6      	ldr	r6, [r4, #28]
 801350e:	68f3      	ldr	r3, [r6, #12]
 8013510:	b183      	cbz	r3, 8013534 <_Balloc+0x50>
 8013512:	69e3      	ldr	r3, [r4, #28]
 8013514:	68db      	ldr	r3, [r3, #12]
 8013516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801351a:	b9b8      	cbnz	r0, 801354c <_Balloc+0x68>
 801351c:	2101      	movs	r1, #1
 801351e:	fa01 f605 	lsl.w	r6, r1, r5
 8013522:	1d72      	adds	r2, r6, #5
 8013524:	0092      	lsls	r2, r2, #2
 8013526:	4620      	mov	r0, r4
 8013528:	f7fe f878 	bl	801161c <_calloc_r>
 801352c:	b160      	cbz	r0, 8013548 <_Balloc+0x64>
 801352e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013532:	e00e      	b.n	8013552 <_Balloc+0x6e>
 8013534:	2221      	movs	r2, #33	@ 0x21
 8013536:	2104      	movs	r1, #4
 8013538:	4620      	mov	r0, r4
 801353a:	f7fe f86f 	bl	801161c <_calloc_r>
 801353e:	69e3      	ldr	r3, [r4, #28]
 8013540:	60f0      	str	r0, [r6, #12]
 8013542:	68db      	ldr	r3, [r3, #12]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d1e4      	bne.n	8013512 <_Balloc+0x2e>
 8013548:	2000      	movs	r0, #0
 801354a:	bd70      	pop	{r4, r5, r6, pc}
 801354c:	6802      	ldr	r2, [r0, #0]
 801354e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013552:	2300      	movs	r3, #0
 8013554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013558:	e7f7      	b.n	801354a <_Balloc+0x66>
 801355a:	bf00      	nop
 801355c:	08015d89 	.word	0x08015d89
 8013560:	08015e09 	.word	0x08015e09

08013564 <_Bfree>:
 8013564:	b570      	push	{r4, r5, r6, lr}
 8013566:	69c6      	ldr	r6, [r0, #28]
 8013568:	4605      	mov	r5, r0
 801356a:	460c      	mov	r4, r1
 801356c:	b976      	cbnz	r6, 801358c <_Bfree+0x28>
 801356e:	2010      	movs	r0, #16
 8013570:	f7fe f868 	bl	8011644 <malloc>
 8013574:	4602      	mov	r2, r0
 8013576:	61e8      	str	r0, [r5, #28]
 8013578:	b920      	cbnz	r0, 8013584 <_Bfree+0x20>
 801357a:	4b09      	ldr	r3, [pc, #36]	@ (80135a0 <_Bfree+0x3c>)
 801357c:	4809      	ldr	r0, [pc, #36]	@ (80135a4 <_Bfree+0x40>)
 801357e:	218f      	movs	r1, #143	@ 0x8f
 8013580:	f000 fe50 	bl	8014224 <__assert_func>
 8013584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013588:	6006      	str	r6, [r0, #0]
 801358a:	60c6      	str	r6, [r0, #12]
 801358c:	b13c      	cbz	r4, 801359e <_Bfree+0x3a>
 801358e:	69eb      	ldr	r3, [r5, #28]
 8013590:	6862      	ldr	r2, [r4, #4]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013598:	6021      	str	r1, [r4, #0]
 801359a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801359e:	bd70      	pop	{r4, r5, r6, pc}
 80135a0:	08015d89 	.word	0x08015d89
 80135a4:	08015e09 	.word	0x08015e09

080135a8 <__multadd>:
 80135a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ac:	690d      	ldr	r5, [r1, #16]
 80135ae:	4607      	mov	r7, r0
 80135b0:	460c      	mov	r4, r1
 80135b2:	461e      	mov	r6, r3
 80135b4:	f101 0c14 	add.w	ip, r1, #20
 80135b8:	2000      	movs	r0, #0
 80135ba:	f8dc 3000 	ldr.w	r3, [ip]
 80135be:	b299      	uxth	r1, r3
 80135c0:	fb02 6101 	mla	r1, r2, r1, r6
 80135c4:	0c1e      	lsrs	r6, r3, #16
 80135c6:	0c0b      	lsrs	r3, r1, #16
 80135c8:	fb02 3306 	mla	r3, r2, r6, r3
 80135cc:	b289      	uxth	r1, r1
 80135ce:	3001      	adds	r0, #1
 80135d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80135d4:	4285      	cmp	r5, r0
 80135d6:	f84c 1b04 	str.w	r1, [ip], #4
 80135da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80135de:	dcec      	bgt.n	80135ba <__multadd+0x12>
 80135e0:	b30e      	cbz	r6, 8013626 <__multadd+0x7e>
 80135e2:	68a3      	ldr	r3, [r4, #8]
 80135e4:	42ab      	cmp	r3, r5
 80135e6:	dc19      	bgt.n	801361c <__multadd+0x74>
 80135e8:	6861      	ldr	r1, [r4, #4]
 80135ea:	4638      	mov	r0, r7
 80135ec:	3101      	adds	r1, #1
 80135ee:	f7ff ff79 	bl	80134e4 <_Balloc>
 80135f2:	4680      	mov	r8, r0
 80135f4:	b928      	cbnz	r0, 8013602 <__multadd+0x5a>
 80135f6:	4602      	mov	r2, r0
 80135f8:	4b0c      	ldr	r3, [pc, #48]	@ (801362c <__multadd+0x84>)
 80135fa:	480d      	ldr	r0, [pc, #52]	@ (8013630 <__multadd+0x88>)
 80135fc:	21ba      	movs	r1, #186	@ 0xba
 80135fe:	f000 fe11 	bl	8014224 <__assert_func>
 8013602:	6922      	ldr	r2, [r4, #16]
 8013604:	3202      	adds	r2, #2
 8013606:	f104 010c 	add.w	r1, r4, #12
 801360a:	0092      	lsls	r2, r2, #2
 801360c:	300c      	adds	r0, #12
 801360e:	f7ff f8c2 	bl	8012796 <memcpy>
 8013612:	4621      	mov	r1, r4
 8013614:	4638      	mov	r0, r7
 8013616:	f7ff ffa5 	bl	8013564 <_Bfree>
 801361a:	4644      	mov	r4, r8
 801361c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013620:	3501      	adds	r5, #1
 8013622:	615e      	str	r6, [r3, #20]
 8013624:	6125      	str	r5, [r4, #16]
 8013626:	4620      	mov	r0, r4
 8013628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801362c:	08015df8 	.word	0x08015df8
 8013630:	08015e09 	.word	0x08015e09

08013634 <__hi0bits>:
 8013634:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013638:	4603      	mov	r3, r0
 801363a:	bf36      	itet	cc
 801363c:	0403      	lslcc	r3, r0, #16
 801363e:	2000      	movcs	r0, #0
 8013640:	2010      	movcc	r0, #16
 8013642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013646:	bf3c      	itt	cc
 8013648:	021b      	lslcc	r3, r3, #8
 801364a:	3008      	addcc	r0, #8
 801364c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013650:	bf3c      	itt	cc
 8013652:	011b      	lslcc	r3, r3, #4
 8013654:	3004      	addcc	r0, #4
 8013656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801365a:	bf3c      	itt	cc
 801365c:	009b      	lslcc	r3, r3, #2
 801365e:	3002      	addcc	r0, #2
 8013660:	2b00      	cmp	r3, #0
 8013662:	db05      	blt.n	8013670 <__hi0bits+0x3c>
 8013664:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013668:	f100 0001 	add.w	r0, r0, #1
 801366c:	bf08      	it	eq
 801366e:	2020      	moveq	r0, #32
 8013670:	4770      	bx	lr

08013672 <__lo0bits>:
 8013672:	6803      	ldr	r3, [r0, #0]
 8013674:	4602      	mov	r2, r0
 8013676:	f013 0007 	ands.w	r0, r3, #7
 801367a:	d00b      	beq.n	8013694 <__lo0bits+0x22>
 801367c:	07d9      	lsls	r1, r3, #31
 801367e:	d421      	bmi.n	80136c4 <__lo0bits+0x52>
 8013680:	0798      	lsls	r0, r3, #30
 8013682:	bf49      	itett	mi
 8013684:	085b      	lsrmi	r3, r3, #1
 8013686:	089b      	lsrpl	r3, r3, #2
 8013688:	2001      	movmi	r0, #1
 801368a:	6013      	strmi	r3, [r2, #0]
 801368c:	bf5c      	itt	pl
 801368e:	6013      	strpl	r3, [r2, #0]
 8013690:	2002      	movpl	r0, #2
 8013692:	4770      	bx	lr
 8013694:	b299      	uxth	r1, r3
 8013696:	b909      	cbnz	r1, 801369c <__lo0bits+0x2a>
 8013698:	0c1b      	lsrs	r3, r3, #16
 801369a:	2010      	movs	r0, #16
 801369c:	b2d9      	uxtb	r1, r3
 801369e:	b909      	cbnz	r1, 80136a4 <__lo0bits+0x32>
 80136a0:	3008      	adds	r0, #8
 80136a2:	0a1b      	lsrs	r3, r3, #8
 80136a4:	0719      	lsls	r1, r3, #28
 80136a6:	bf04      	itt	eq
 80136a8:	091b      	lsreq	r3, r3, #4
 80136aa:	3004      	addeq	r0, #4
 80136ac:	0799      	lsls	r1, r3, #30
 80136ae:	bf04      	itt	eq
 80136b0:	089b      	lsreq	r3, r3, #2
 80136b2:	3002      	addeq	r0, #2
 80136b4:	07d9      	lsls	r1, r3, #31
 80136b6:	d403      	bmi.n	80136c0 <__lo0bits+0x4e>
 80136b8:	085b      	lsrs	r3, r3, #1
 80136ba:	f100 0001 	add.w	r0, r0, #1
 80136be:	d003      	beq.n	80136c8 <__lo0bits+0x56>
 80136c0:	6013      	str	r3, [r2, #0]
 80136c2:	4770      	bx	lr
 80136c4:	2000      	movs	r0, #0
 80136c6:	4770      	bx	lr
 80136c8:	2020      	movs	r0, #32
 80136ca:	4770      	bx	lr

080136cc <__i2b>:
 80136cc:	b510      	push	{r4, lr}
 80136ce:	460c      	mov	r4, r1
 80136d0:	2101      	movs	r1, #1
 80136d2:	f7ff ff07 	bl	80134e4 <_Balloc>
 80136d6:	4602      	mov	r2, r0
 80136d8:	b928      	cbnz	r0, 80136e6 <__i2b+0x1a>
 80136da:	4b05      	ldr	r3, [pc, #20]	@ (80136f0 <__i2b+0x24>)
 80136dc:	4805      	ldr	r0, [pc, #20]	@ (80136f4 <__i2b+0x28>)
 80136de:	f240 1145 	movw	r1, #325	@ 0x145
 80136e2:	f000 fd9f 	bl	8014224 <__assert_func>
 80136e6:	2301      	movs	r3, #1
 80136e8:	6144      	str	r4, [r0, #20]
 80136ea:	6103      	str	r3, [r0, #16]
 80136ec:	bd10      	pop	{r4, pc}
 80136ee:	bf00      	nop
 80136f0:	08015df8 	.word	0x08015df8
 80136f4:	08015e09 	.word	0x08015e09

080136f8 <__multiply>:
 80136f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136fc:	4614      	mov	r4, r2
 80136fe:	690a      	ldr	r2, [r1, #16]
 8013700:	6923      	ldr	r3, [r4, #16]
 8013702:	429a      	cmp	r2, r3
 8013704:	bfa8      	it	ge
 8013706:	4623      	movge	r3, r4
 8013708:	460f      	mov	r7, r1
 801370a:	bfa4      	itt	ge
 801370c:	460c      	movge	r4, r1
 801370e:	461f      	movge	r7, r3
 8013710:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013714:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013718:	68a3      	ldr	r3, [r4, #8]
 801371a:	6861      	ldr	r1, [r4, #4]
 801371c:	eb0a 0609 	add.w	r6, sl, r9
 8013720:	42b3      	cmp	r3, r6
 8013722:	b085      	sub	sp, #20
 8013724:	bfb8      	it	lt
 8013726:	3101      	addlt	r1, #1
 8013728:	f7ff fedc 	bl	80134e4 <_Balloc>
 801372c:	b930      	cbnz	r0, 801373c <__multiply+0x44>
 801372e:	4602      	mov	r2, r0
 8013730:	4b44      	ldr	r3, [pc, #272]	@ (8013844 <__multiply+0x14c>)
 8013732:	4845      	ldr	r0, [pc, #276]	@ (8013848 <__multiply+0x150>)
 8013734:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013738:	f000 fd74 	bl	8014224 <__assert_func>
 801373c:	f100 0514 	add.w	r5, r0, #20
 8013740:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013744:	462b      	mov	r3, r5
 8013746:	2200      	movs	r2, #0
 8013748:	4543      	cmp	r3, r8
 801374a:	d321      	bcc.n	8013790 <__multiply+0x98>
 801374c:	f107 0114 	add.w	r1, r7, #20
 8013750:	f104 0214 	add.w	r2, r4, #20
 8013754:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013758:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801375c:	9302      	str	r3, [sp, #8]
 801375e:	1b13      	subs	r3, r2, r4
 8013760:	3b15      	subs	r3, #21
 8013762:	f023 0303 	bic.w	r3, r3, #3
 8013766:	3304      	adds	r3, #4
 8013768:	f104 0715 	add.w	r7, r4, #21
 801376c:	42ba      	cmp	r2, r7
 801376e:	bf38      	it	cc
 8013770:	2304      	movcc	r3, #4
 8013772:	9301      	str	r3, [sp, #4]
 8013774:	9b02      	ldr	r3, [sp, #8]
 8013776:	9103      	str	r1, [sp, #12]
 8013778:	428b      	cmp	r3, r1
 801377a:	d80c      	bhi.n	8013796 <__multiply+0x9e>
 801377c:	2e00      	cmp	r6, #0
 801377e:	dd03      	ble.n	8013788 <__multiply+0x90>
 8013780:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013784:	2b00      	cmp	r3, #0
 8013786:	d05b      	beq.n	8013840 <__multiply+0x148>
 8013788:	6106      	str	r6, [r0, #16]
 801378a:	b005      	add	sp, #20
 801378c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013790:	f843 2b04 	str.w	r2, [r3], #4
 8013794:	e7d8      	b.n	8013748 <__multiply+0x50>
 8013796:	f8b1 a000 	ldrh.w	sl, [r1]
 801379a:	f1ba 0f00 	cmp.w	sl, #0
 801379e:	d024      	beq.n	80137ea <__multiply+0xf2>
 80137a0:	f104 0e14 	add.w	lr, r4, #20
 80137a4:	46a9      	mov	r9, r5
 80137a6:	f04f 0c00 	mov.w	ip, #0
 80137aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80137ae:	f8d9 3000 	ldr.w	r3, [r9]
 80137b2:	fa1f fb87 	uxth.w	fp, r7
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80137bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80137c0:	f8d9 7000 	ldr.w	r7, [r9]
 80137c4:	4463      	add	r3, ip
 80137c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80137ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80137ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80137d8:	4572      	cmp	r2, lr
 80137da:	f849 3b04 	str.w	r3, [r9], #4
 80137de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80137e2:	d8e2      	bhi.n	80137aa <__multiply+0xb2>
 80137e4:	9b01      	ldr	r3, [sp, #4]
 80137e6:	f845 c003 	str.w	ip, [r5, r3]
 80137ea:	9b03      	ldr	r3, [sp, #12]
 80137ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80137f0:	3104      	adds	r1, #4
 80137f2:	f1b9 0f00 	cmp.w	r9, #0
 80137f6:	d021      	beq.n	801383c <__multiply+0x144>
 80137f8:	682b      	ldr	r3, [r5, #0]
 80137fa:	f104 0c14 	add.w	ip, r4, #20
 80137fe:	46ae      	mov	lr, r5
 8013800:	f04f 0a00 	mov.w	sl, #0
 8013804:	f8bc b000 	ldrh.w	fp, [ip]
 8013808:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801380c:	fb09 770b 	mla	r7, r9, fp, r7
 8013810:	4457      	add	r7, sl
 8013812:	b29b      	uxth	r3, r3
 8013814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013818:	f84e 3b04 	str.w	r3, [lr], #4
 801381c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013820:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013824:	f8be 3000 	ldrh.w	r3, [lr]
 8013828:	fb09 330a 	mla	r3, r9, sl, r3
 801382c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013830:	4562      	cmp	r2, ip
 8013832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013836:	d8e5      	bhi.n	8013804 <__multiply+0x10c>
 8013838:	9f01      	ldr	r7, [sp, #4]
 801383a:	51eb      	str	r3, [r5, r7]
 801383c:	3504      	adds	r5, #4
 801383e:	e799      	b.n	8013774 <__multiply+0x7c>
 8013840:	3e01      	subs	r6, #1
 8013842:	e79b      	b.n	801377c <__multiply+0x84>
 8013844:	08015df8 	.word	0x08015df8
 8013848:	08015e09 	.word	0x08015e09

0801384c <__pow5mult>:
 801384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013850:	4615      	mov	r5, r2
 8013852:	f012 0203 	ands.w	r2, r2, #3
 8013856:	4607      	mov	r7, r0
 8013858:	460e      	mov	r6, r1
 801385a:	d007      	beq.n	801386c <__pow5mult+0x20>
 801385c:	4c25      	ldr	r4, [pc, #148]	@ (80138f4 <__pow5mult+0xa8>)
 801385e:	3a01      	subs	r2, #1
 8013860:	2300      	movs	r3, #0
 8013862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013866:	f7ff fe9f 	bl	80135a8 <__multadd>
 801386a:	4606      	mov	r6, r0
 801386c:	10ad      	asrs	r5, r5, #2
 801386e:	d03d      	beq.n	80138ec <__pow5mult+0xa0>
 8013870:	69fc      	ldr	r4, [r7, #28]
 8013872:	b97c      	cbnz	r4, 8013894 <__pow5mult+0x48>
 8013874:	2010      	movs	r0, #16
 8013876:	f7fd fee5 	bl	8011644 <malloc>
 801387a:	4602      	mov	r2, r0
 801387c:	61f8      	str	r0, [r7, #28]
 801387e:	b928      	cbnz	r0, 801388c <__pow5mult+0x40>
 8013880:	4b1d      	ldr	r3, [pc, #116]	@ (80138f8 <__pow5mult+0xac>)
 8013882:	481e      	ldr	r0, [pc, #120]	@ (80138fc <__pow5mult+0xb0>)
 8013884:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013888:	f000 fccc 	bl	8014224 <__assert_func>
 801388c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013890:	6004      	str	r4, [r0, #0]
 8013892:	60c4      	str	r4, [r0, #12]
 8013894:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801389c:	b94c      	cbnz	r4, 80138b2 <__pow5mult+0x66>
 801389e:	f240 2171 	movw	r1, #625	@ 0x271
 80138a2:	4638      	mov	r0, r7
 80138a4:	f7ff ff12 	bl	80136cc <__i2b>
 80138a8:	2300      	movs	r3, #0
 80138aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80138ae:	4604      	mov	r4, r0
 80138b0:	6003      	str	r3, [r0, #0]
 80138b2:	f04f 0900 	mov.w	r9, #0
 80138b6:	07eb      	lsls	r3, r5, #31
 80138b8:	d50a      	bpl.n	80138d0 <__pow5mult+0x84>
 80138ba:	4631      	mov	r1, r6
 80138bc:	4622      	mov	r2, r4
 80138be:	4638      	mov	r0, r7
 80138c0:	f7ff ff1a 	bl	80136f8 <__multiply>
 80138c4:	4631      	mov	r1, r6
 80138c6:	4680      	mov	r8, r0
 80138c8:	4638      	mov	r0, r7
 80138ca:	f7ff fe4b 	bl	8013564 <_Bfree>
 80138ce:	4646      	mov	r6, r8
 80138d0:	106d      	asrs	r5, r5, #1
 80138d2:	d00b      	beq.n	80138ec <__pow5mult+0xa0>
 80138d4:	6820      	ldr	r0, [r4, #0]
 80138d6:	b938      	cbnz	r0, 80138e8 <__pow5mult+0x9c>
 80138d8:	4622      	mov	r2, r4
 80138da:	4621      	mov	r1, r4
 80138dc:	4638      	mov	r0, r7
 80138de:	f7ff ff0b 	bl	80136f8 <__multiply>
 80138e2:	6020      	str	r0, [r4, #0]
 80138e4:	f8c0 9000 	str.w	r9, [r0]
 80138e8:	4604      	mov	r4, r0
 80138ea:	e7e4      	b.n	80138b6 <__pow5mult+0x6a>
 80138ec:	4630      	mov	r0, r6
 80138ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138f2:	bf00      	nop
 80138f4:	08015e64 	.word	0x08015e64
 80138f8:	08015d89 	.word	0x08015d89
 80138fc:	08015e09 	.word	0x08015e09

08013900 <__lshift>:
 8013900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013904:	460c      	mov	r4, r1
 8013906:	6849      	ldr	r1, [r1, #4]
 8013908:	6923      	ldr	r3, [r4, #16]
 801390a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801390e:	68a3      	ldr	r3, [r4, #8]
 8013910:	4607      	mov	r7, r0
 8013912:	4691      	mov	r9, r2
 8013914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013918:	f108 0601 	add.w	r6, r8, #1
 801391c:	42b3      	cmp	r3, r6
 801391e:	db0b      	blt.n	8013938 <__lshift+0x38>
 8013920:	4638      	mov	r0, r7
 8013922:	f7ff fddf 	bl	80134e4 <_Balloc>
 8013926:	4605      	mov	r5, r0
 8013928:	b948      	cbnz	r0, 801393e <__lshift+0x3e>
 801392a:	4602      	mov	r2, r0
 801392c:	4b28      	ldr	r3, [pc, #160]	@ (80139d0 <__lshift+0xd0>)
 801392e:	4829      	ldr	r0, [pc, #164]	@ (80139d4 <__lshift+0xd4>)
 8013930:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013934:	f000 fc76 	bl	8014224 <__assert_func>
 8013938:	3101      	adds	r1, #1
 801393a:	005b      	lsls	r3, r3, #1
 801393c:	e7ee      	b.n	801391c <__lshift+0x1c>
 801393e:	2300      	movs	r3, #0
 8013940:	f100 0114 	add.w	r1, r0, #20
 8013944:	f100 0210 	add.w	r2, r0, #16
 8013948:	4618      	mov	r0, r3
 801394a:	4553      	cmp	r3, sl
 801394c:	db33      	blt.n	80139b6 <__lshift+0xb6>
 801394e:	6920      	ldr	r0, [r4, #16]
 8013950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013954:	f104 0314 	add.w	r3, r4, #20
 8013958:	f019 091f 	ands.w	r9, r9, #31
 801395c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013960:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013964:	d02b      	beq.n	80139be <__lshift+0xbe>
 8013966:	f1c9 0e20 	rsb	lr, r9, #32
 801396a:	468a      	mov	sl, r1
 801396c:	2200      	movs	r2, #0
 801396e:	6818      	ldr	r0, [r3, #0]
 8013970:	fa00 f009 	lsl.w	r0, r0, r9
 8013974:	4310      	orrs	r0, r2
 8013976:	f84a 0b04 	str.w	r0, [sl], #4
 801397a:	f853 2b04 	ldr.w	r2, [r3], #4
 801397e:	459c      	cmp	ip, r3
 8013980:	fa22 f20e 	lsr.w	r2, r2, lr
 8013984:	d8f3      	bhi.n	801396e <__lshift+0x6e>
 8013986:	ebac 0304 	sub.w	r3, ip, r4
 801398a:	3b15      	subs	r3, #21
 801398c:	f023 0303 	bic.w	r3, r3, #3
 8013990:	3304      	adds	r3, #4
 8013992:	f104 0015 	add.w	r0, r4, #21
 8013996:	4584      	cmp	ip, r0
 8013998:	bf38      	it	cc
 801399a:	2304      	movcc	r3, #4
 801399c:	50ca      	str	r2, [r1, r3]
 801399e:	b10a      	cbz	r2, 80139a4 <__lshift+0xa4>
 80139a0:	f108 0602 	add.w	r6, r8, #2
 80139a4:	3e01      	subs	r6, #1
 80139a6:	4638      	mov	r0, r7
 80139a8:	612e      	str	r6, [r5, #16]
 80139aa:	4621      	mov	r1, r4
 80139ac:	f7ff fdda 	bl	8013564 <_Bfree>
 80139b0:	4628      	mov	r0, r5
 80139b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80139ba:	3301      	adds	r3, #1
 80139bc:	e7c5      	b.n	801394a <__lshift+0x4a>
 80139be:	3904      	subs	r1, #4
 80139c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80139c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80139c8:	459c      	cmp	ip, r3
 80139ca:	d8f9      	bhi.n	80139c0 <__lshift+0xc0>
 80139cc:	e7ea      	b.n	80139a4 <__lshift+0xa4>
 80139ce:	bf00      	nop
 80139d0:	08015df8 	.word	0x08015df8
 80139d4:	08015e09 	.word	0x08015e09

080139d8 <__mcmp>:
 80139d8:	690a      	ldr	r2, [r1, #16]
 80139da:	4603      	mov	r3, r0
 80139dc:	6900      	ldr	r0, [r0, #16]
 80139de:	1a80      	subs	r0, r0, r2
 80139e0:	b530      	push	{r4, r5, lr}
 80139e2:	d10e      	bne.n	8013a02 <__mcmp+0x2a>
 80139e4:	3314      	adds	r3, #20
 80139e6:	3114      	adds	r1, #20
 80139e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80139ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80139f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80139f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80139f8:	4295      	cmp	r5, r2
 80139fa:	d003      	beq.n	8013a04 <__mcmp+0x2c>
 80139fc:	d205      	bcs.n	8013a0a <__mcmp+0x32>
 80139fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013a02:	bd30      	pop	{r4, r5, pc}
 8013a04:	42a3      	cmp	r3, r4
 8013a06:	d3f3      	bcc.n	80139f0 <__mcmp+0x18>
 8013a08:	e7fb      	b.n	8013a02 <__mcmp+0x2a>
 8013a0a:	2001      	movs	r0, #1
 8013a0c:	e7f9      	b.n	8013a02 <__mcmp+0x2a>
	...

08013a10 <__mdiff>:
 8013a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a14:	4689      	mov	r9, r1
 8013a16:	4606      	mov	r6, r0
 8013a18:	4611      	mov	r1, r2
 8013a1a:	4648      	mov	r0, r9
 8013a1c:	4614      	mov	r4, r2
 8013a1e:	f7ff ffdb 	bl	80139d8 <__mcmp>
 8013a22:	1e05      	subs	r5, r0, #0
 8013a24:	d112      	bne.n	8013a4c <__mdiff+0x3c>
 8013a26:	4629      	mov	r1, r5
 8013a28:	4630      	mov	r0, r6
 8013a2a:	f7ff fd5b 	bl	80134e4 <_Balloc>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	b928      	cbnz	r0, 8013a3e <__mdiff+0x2e>
 8013a32:	4b3f      	ldr	r3, [pc, #252]	@ (8013b30 <__mdiff+0x120>)
 8013a34:	f240 2137 	movw	r1, #567	@ 0x237
 8013a38:	483e      	ldr	r0, [pc, #248]	@ (8013b34 <__mdiff+0x124>)
 8013a3a:	f000 fbf3 	bl	8014224 <__assert_func>
 8013a3e:	2301      	movs	r3, #1
 8013a40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013a44:	4610      	mov	r0, r2
 8013a46:	b003      	add	sp, #12
 8013a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a4c:	bfbc      	itt	lt
 8013a4e:	464b      	movlt	r3, r9
 8013a50:	46a1      	movlt	r9, r4
 8013a52:	4630      	mov	r0, r6
 8013a54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013a58:	bfba      	itte	lt
 8013a5a:	461c      	movlt	r4, r3
 8013a5c:	2501      	movlt	r5, #1
 8013a5e:	2500      	movge	r5, #0
 8013a60:	f7ff fd40 	bl	80134e4 <_Balloc>
 8013a64:	4602      	mov	r2, r0
 8013a66:	b918      	cbnz	r0, 8013a70 <__mdiff+0x60>
 8013a68:	4b31      	ldr	r3, [pc, #196]	@ (8013b30 <__mdiff+0x120>)
 8013a6a:	f240 2145 	movw	r1, #581	@ 0x245
 8013a6e:	e7e3      	b.n	8013a38 <__mdiff+0x28>
 8013a70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013a74:	6926      	ldr	r6, [r4, #16]
 8013a76:	60c5      	str	r5, [r0, #12]
 8013a78:	f109 0310 	add.w	r3, r9, #16
 8013a7c:	f109 0514 	add.w	r5, r9, #20
 8013a80:	f104 0e14 	add.w	lr, r4, #20
 8013a84:	f100 0b14 	add.w	fp, r0, #20
 8013a88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013a8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013a90:	9301      	str	r3, [sp, #4]
 8013a92:	46d9      	mov	r9, fp
 8013a94:	f04f 0c00 	mov.w	ip, #0
 8013a98:	9b01      	ldr	r3, [sp, #4]
 8013a9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013a9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013aa2:	9301      	str	r3, [sp, #4]
 8013aa4:	fa1f f38a 	uxth.w	r3, sl
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	b283      	uxth	r3, r0
 8013aac:	1acb      	subs	r3, r1, r3
 8013aae:	0c00      	lsrs	r0, r0, #16
 8013ab0:	4463      	add	r3, ip
 8013ab2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013ab6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013ac0:	4576      	cmp	r6, lr
 8013ac2:	f849 3b04 	str.w	r3, [r9], #4
 8013ac6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013aca:	d8e5      	bhi.n	8013a98 <__mdiff+0x88>
 8013acc:	1b33      	subs	r3, r6, r4
 8013ace:	3b15      	subs	r3, #21
 8013ad0:	f023 0303 	bic.w	r3, r3, #3
 8013ad4:	3415      	adds	r4, #21
 8013ad6:	3304      	adds	r3, #4
 8013ad8:	42a6      	cmp	r6, r4
 8013ada:	bf38      	it	cc
 8013adc:	2304      	movcc	r3, #4
 8013ade:	441d      	add	r5, r3
 8013ae0:	445b      	add	r3, fp
 8013ae2:	461e      	mov	r6, r3
 8013ae4:	462c      	mov	r4, r5
 8013ae6:	4544      	cmp	r4, r8
 8013ae8:	d30e      	bcc.n	8013b08 <__mdiff+0xf8>
 8013aea:	f108 0103 	add.w	r1, r8, #3
 8013aee:	1b49      	subs	r1, r1, r5
 8013af0:	f021 0103 	bic.w	r1, r1, #3
 8013af4:	3d03      	subs	r5, #3
 8013af6:	45a8      	cmp	r8, r5
 8013af8:	bf38      	it	cc
 8013afa:	2100      	movcc	r1, #0
 8013afc:	440b      	add	r3, r1
 8013afe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013b02:	b191      	cbz	r1, 8013b2a <__mdiff+0x11a>
 8013b04:	6117      	str	r7, [r2, #16]
 8013b06:	e79d      	b.n	8013a44 <__mdiff+0x34>
 8013b08:	f854 1b04 	ldr.w	r1, [r4], #4
 8013b0c:	46e6      	mov	lr, ip
 8013b0e:	0c08      	lsrs	r0, r1, #16
 8013b10:	fa1c fc81 	uxtah	ip, ip, r1
 8013b14:	4471      	add	r1, lr
 8013b16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013b1a:	b289      	uxth	r1, r1
 8013b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013b20:	f846 1b04 	str.w	r1, [r6], #4
 8013b24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013b28:	e7dd      	b.n	8013ae6 <__mdiff+0xd6>
 8013b2a:	3f01      	subs	r7, #1
 8013b2c:	e7e7      	b.n	8013afe <__mdiff+0xee>
 8013b2e:	bf00      	nop
 8013b30:	08015df8 	.word	0x08015df8
 8013b34:	08015e09 	.word	0x08015e09

08013b38 <__d2b>:
 8013b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013b3c:	460f      	mov	r7, r1
 8013b3e:	2101      	movs	r1, #1
 8013b40:	ec59 8b10 	vmov	r8, r9, d0
 8013b44:	4616      	mov	r6, r2
 8013b46:	f7ff fccd 	bl	80134e4 <_Balloc>
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	b930      	cbnz	r0, 8013b5c <__d2b+0x24>
 8013b4e:	4602      	mov	r2, r0
 8013b50:	4b23      	ldr	r3, [pc, #140]	@ (8013be0 <__d2b+0xa8>)
 8013b52:	4824      	ldr	r0, [pc, #144]	@ (8013be4 <__d2b+0xac>)
 8013b54:	f240 310f 	movw	r1, #783	@ 0x30f
 8013b58:	f000 fb64 	bl	8014224 <__assert_func>
 8013b5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b64:	b10d      	cbz	r5, 8013b6a <__d2b+0x32>
 8013b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013b6a:	9301      	str	r3, [sp, #4]
 8013b6c:	f1b8 0300 	subs.w	r3, r8, #0
 8013b70:	d023      	beq.n	8013bba <__d2b+0x82>
 8013b72:	4668      	mov	r0, sp
 8013b74:	9300      	str	r3, [sp, #0]
 8013b76:	f7ff fd7c 	bl	8013672 <__lo0bits>
 8013b7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013b7e:	b1d0      	cbz	r0, 8013bb6 <__d2b+0x7e>
 8013b80:	f1c0 0320 	rsb	r3, r0, #32
 8013b84:	fa02 f303 	lsl.w	r3, r2, r3
 8013b88:	430b      	orrs	r3, r1
 8013b8a:	40c2      	lsrs	r2, r0
 8013b8c:	6163      	str	r3, [r4, #20]
 8013b8e:	9201      	str	r2, [sp, #4]
 8013b90:	9b01      	ldr	r3, [sp, #4]
 8013b92:	61a3      	str	r3, [r4, #24]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	bf0c      	ite	eq
 8013b98:	2201      	moveq	r2, #1
 8013b9a:	2202      	movne	r2, #2
 8013b9c:	6122      	str	r2, [r4, #16]
 8013b9e:	b1a5      	cbz	r5, 8013bca <__d2b+0x92>
 8013ba0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013ba4:	4405      	add	r5, r0
 8013ba6:	603d      	str	r5, [r7, #0]
 8013ba8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013bac:	6030      	str	r0, [r6, #0]
 8013bae:	4620      	mov	r0, r4
 8013bb0:	b003      	add	sp, #12
 8013bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bb6:	6161      	str	r1, [r4, #20]
 8013bb8:	e7ea      	b.n	8013b90 <__d2b+0x58>
 8013bba:	a801      	add	r0, sp, #4
 8013bbc:	f7ff fd59 	bl	8013672 <__lo0bits>
 8013bc0:	9b01      	ldr	r3, [sp, #4]
 8013bc2:	6163      	str	r3, [r4, #20]
 8013bc4:	3020      	adds	r0, #32
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	e7e8      	b.n	8013b9c <__d2b+0x64>
 8013bca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013bce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013bd2:	6038      	str	r0, [r7, #0]
 8013bd4:	6918      	ldr	r0, [r3, #16]
 8013bd6:	f7ff fd2d 	bl	8013634 <__hi0bits>
 8013bda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013bde:	e7e5      	b.n	8013bac <__d2b+0x74>
 8013be0:	08015df8 	.word	0x08015df8
 8013be4:	08015e09 	.word	0x08015e09

08013be8 <__ssputs_r>:
 8013be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bec:	688e      	ldr	r6, [r1, #8]
 8013bee:	461f      	mov	r7, r3
 8013bf0:	42be      	cmp	r6, r7
 8013bf2:	680b      	ldr	r3, [r1, #0]
 8013bf4:	4682      	mov	sl, r0
 8013bf6:	460c      	mov	r4, r1
 8013bf8:	4690      	mov	r8, r2
 8013bfa:	d82d      	bhi.n	8013c58 <__ssputs_r+0x70>
 8013bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013c04:	d026      	beq.n	8013c54 <__ssputs_r+0x6c>
 8013c06:	6965      	ldr	r5, [r4, #20]
 8013c08:	6909      	ldr	r1, [r1, #16]
 8013c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c0e:	eba3 0901 	sub.w	r9, r3, r1
 8013c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013c16:	1c7b      	adds	r3, r7, #1
 8013c18:	444b      	add	r3, r9
 8013c1a:	106d      	asrs	r5, r5, #1
 8013c1c:	429d      	cmp	r5, r3
 8013c1e:	bf38      	it	cc
 8013c20:	461d      	movcc	r5, r3
 8013c22:	0553      	lsls	r3, r2, #21
 8013c24:	d527      	bpl.n	8013c76 <__ssputs_r+0x8e>
 8013c26:	4629      	mov	r1, r5
 8013c28:	f7fd fd3e 	bl	80116a8 <_malloc_r>
 8013c2c:	4606      	mov	r6, r0
 8013c2e:	b360      	cbz	r0, 8013c8a <__ssputs_r+0xa2>
 8013c30:	6921      	ldr	r1, [r4, #16]
 8013c32:	464a      	mov	r2, r9
 8013c34:	f7fe fdaf 	bl	8012796 <memcpy>
 8013c38:	89a3      	ldrh	r3, [r4, #12]
 8013c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c42:	81a3      	strh	r3, [r4, #12]
 8013c44:	6126      	str	r6, [r4, #16]
 8013c46:	6165      	str	r5, [r4, #20]
 8013c48:	444e      	add	r6, r9
 8013c4a:	eba5 0509 	sub.w	r5, r5, r9
 8013c4e:	6026      	str	r6, [r4, #0]
 8013c50:	60a5      	str	r5, [r4, #8]
 8013c52:	463e      	mov	r6, r7
 8013c54:	42be      	cmp	r6, r7
 8013c56:	d900      	bls.n	8013c5a <__ssputs_r+0x72>
 8013c58:	463e      	mov	r6, r7
 8013c5a:	6820      	ldr	r0, [r4, #0]
 8013c5c:	4632      	mov	r2, r6
 8013c5e:	4641      	mov	r1, r8
 8013c60:	f7fe fcf0 	bl	8012644 <memmove>
 8013c64:	68a3      	ldr	r3, [r4, #8]
 8013c66:	1b9b      	subs	r3, r3, r6
 8013c68:	60a3      	str	r3, [r4, #8]
 8013c6a:	6823      	ldr	r3, [r4, #0]
 8013c6c:	4433      	add	r3, r6
 8013c6e:	6023      	str	r3, [r4, #0]
 8013c70:	2000      	movs	r0, #0
 8013c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c76:	462a      	mov	r2, r5
 8013c78:	f000 fb04 	bl	8014284 <_realloc_r>
 8013c7c:	4606      	mov	r6, r0
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	d1e0      	bne.n	8013c44 <__ssputs_r+0x5c>
 8013c82:	6921      	ldr	r1, [r4, #16]
 8013c84:	4650      	mov	r0, sl
 8013c86:	f7ff fbe3 	bl	8013450 <_free_r>
 8013c8a:	230c      	movs	r3, #12
 8013c8c:	f8ca 3000 	str.w	r3, [sl]
 8013c90:	89a3      	ldrh	r3, [r4, #12]
 8013c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c96:	81a3      	strh	r3, [r4, #12]
 8013c98:	f04f 30ff 	mov.w	r0, #4294967295
 8013c9c:	e7e9      	b.n	8013c72 <__ssputs_r+0x8a>
	...

08013ca0 <_svfiprintf_r>:
 8013ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ca4:	4698      	mov	r8, r3
 8013ca6:	898b      	ldrh	r3, [r1, #12]
 8013ca8:	061b      	lsls	r3, r3, #24
 8013caa:	b09d      	sub	sp, #116	@ 0x74
 8013cac:	4607      	mov	r7, r0
 8013cae:	460d      	mov	r5, r1
 8013cb0:	4614      	mov	r4, r2
 8013cb2:	d510      	bpl.n	8013cd6 <_svfiprintf_r+0x36>
 8013cb4:	690b      	ldr	r3, [r1, #16]
 8013cb6:	b973      	cbnz	r3, 8013cd6 <_svfiprintf_r+0x36>
 8013cb8:	2140      	movs	r1, #64	@ 0x40
 8013cba:	f7fd fcf5 	bl	80116a8 <_malloc_r>
 8013cbe:	6028      	str	r0, [r5, #0]
 8013cc0:	6128      	str	r0, [r5, #16]
 8013cc2:	b930      	cbnz	r0, 8013cd2 <_svfiprintf_r+0x32>
 8013cc4:	230c      	movs	r3, #12
 8013cc6:	603b      	str	r3, [r7, #0]
 8013cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8013ccc:	b01d      	add	sp, #116	@ 0x74
 8013cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cd2:	2340      	movs	r3, #64	@ 0x40
 8013cd4:	616b      	str	r3, [r5, #20]
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013cda:	2320      	movs	r3, #32
 8013cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ce4:	2330      	movs	r3, #48	@ 0x30
 8013ce6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013e84 <_svfiprintf_r+0x1e4>
 8013cea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013cee:	f04f 0901 	mov.w	r9, #1
 8013cf2:	4623      	mov	r3, r4
 8013cf4:	469a      	mov	sl, r3
 8013cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013cfa:	b10a      	cbz	r2, 8013d00 <_svfiprintf_r+0x60>
 8013cfc:	2a25      	cmp	r2, #37	@ 0x25
 8013cfe:	d1f9      	bne.n	8013cf4 <_svfiprintf_r+0x54>
 8013d00:	ebba 0b04 	subs.w	fp, sl, r4
 8013d04:	d00b      	beq.n	8013d1e <_svfiprintf_r+0x7e>
 8013d06:	465b      	mov	r3, fp
 8013d08:	4622      	mov	r2, r4
 8013d0a:	4629      	mov	r1, r5
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	f7ff ff6b 	bl	8013be8 <__ssputs_r>
 8013d12:	3001      	adds	r0, #1
 8013d14:	f000 80a7 	beq.w	8013e66 <_svfiprintf_r+0x1c6>
 8013d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d1a:	445a      	add	r2, fp
 8013d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	f000 809f 	beq.w	8013e66 <_svfiprintf_r+0x1c6>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d32:	f10a 0a01 	add.w	sl, sl, #1
 8013d36:	9304      	str	r3, [sp, #16]
 8013d38:	9307      	str	r3, [sp, #28]
 8013d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d40:	4654      	mov	r4, sl
 8013d42:	2205      	movs	r2, #5
 8013d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d48:	484e      	ldr	r0, [pc, #312]	@ (8013e84 <_svfiprintf_r+0x1e4>)
 8013d4a:	f7ec fa61 	bl	8000210 <memchr>
 8013d4e:	9a04      	ldr	r2, [sp, #16]
 8013d50:	b9d8      	cbnz	r0, 8013d8a <_svfiprintf_r+0xea>
 8013d52:	06d0      	lsls	r0, r2, #27
 8013d54:	bf44      	itt	mi
 8013d56:	2320      	movmi	r3, #32
 8013d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d5c:	0711      	lsls	r1, r2, #28
 8013d5e:	bf44      	itt	mi
 8013d60:	232b      	movmi	r3, #43	@ 0x2b
 8013d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d66:	f89a 3000 	ldrb.w	r3, [sl]
 8013d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d6c:	d015      	beq.n	8013d9a <_svfiprintf_r+0xfa>
 8013d6e:	9a07      	ldr	r2, [sp, #28]
 8013d70:	4654      	mov	r4, sl
 8013d72:	2000      	movs	r0, #0
 8013d74:	f04f 0c0a 	mov.w	ip, #10
 8013d78:	4621      	mov	r1, r4
 8013d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d7e:	3b30      	subs	r3, #48	@ 0x30
 8013d80:	2b09      	cmp	r3, #9
 8013d82:	d94b      	bls.n	8013e1c <_svfiprintf_r+0x17c>
 8013d84:	b1b0      	cbz	r0, 8013db4 <_svfiprintf_r+0x114>
 8013d86:	9207      	str	r2, [sp, #28]
 8013d88:	e014      	b.n	8013db4 <_svfiprintf_r+0x114>
 8013d8a:	eba0 0308 	sub.w	r3, r0, r8
 8013d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8013d92:	4313      	orrs	r3, r2
 8013d94:	9304      	str	r3, [sp, #16]
 8013d96:	46a2      	mov	sl, r4
 8013d98:	e7d2      	b.n	8013d40 <_svfiprintf_r+0xa0>
 8013d9a:	9b03      	ldr	r3, [sp, #12]
 8013d9c:	1d19      	adds	r1, r3, #4
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	9103      	str	r1, [sp, #12]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	bfbb      	ittet	lt
 8013da6:	425b      	neglt	r3, r3
 8013da8:	f042 0202 	orrlt.w	r2, r2, #2
 8013dac:	9307      	strge	r3, [sp, #28]
 8013dae:	9307      	strlt	r3, [sp, #28]
 8013db0:	bfb8      	it	lt
 8013db2:	9204      	strlt	r2, [sp, #16]
 8013db4:	7823      	ldrb	r3, [r4, #0]
 8013db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8013db8:	d10a      	bne.n	8013dd0 <_svfiprintf_r+0x130>
 8013dba:	7863      	ldrb	r3, [r4, #1]
 8013dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8013dbe:	d132      	bne.n	8013e26 <_svfiprintf_r+0x186>
 8013dc0:	9b03      	ldr	r3, [sp, #12]
 8013dc2:	1d1a      	adds	r2, r3, #4
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	9203      	str	r2, [sp, #12]
 8013dc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013dcc:	3402      	adds	r4, #2
 8013dce:	9305      	str	r3, [sp, #20]
 8013dd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013e94 <_svfiprintf_r+0x1f4>
 8013dd4:	7821      	ldrb	r1, [r4, #0]
 8013dd6:	2203      	movs	r2, #3
 8013dd8:	4650      	mov	r0, sl
 8013dda:	f7ec fa19 	bl	8000210 <memchr>
 8013dde:	b138      	cbz	r0, 8013df0 <_svfiprintf_r+0x150>
 8013de0:	9b04      	ldr	r3, [sp, #16]
 8013de2:	eba0 000a 	sub.w	r0, r0, sl
 8013de6:	2240      	movs	r2, #64	@ 0x40
 8013de8:	4082      	lsls	r2, r0
 8013dea:	4313      	orrs	r3, r2
 8013dec:	3401      	adds	r4, #1
 8013dee:	9304      	str	r3, [sp, #16]
 8013df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013df4:	4824      	ldr	r0, [pc, #144]	@ (8013e88 <_svfiprintf_r+0x1e8>)
 8013df6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013dfa:	2206      	movs	r2, #6
 8013dfc:	f7ec fa08 	bl	8000210 <memchr>
 8013e00:	2800      	cmp	r0, #0
 8013e02:	d036      	beq.n	8013e72 <_svfiprintf_r+0x1d2>
 8013e04:	4b21      	ldr	r3, [pc, #132]	@ (8013e8c <_svfiprintf_r+0x1ec>)
 8013e06:	bb1b      	cbnz	r3, 8013e50 <_svfiprintf_r+0x1b0>
 8013e08:	9b03      	ldr	r3, [sp, #12]
 8013e0a:	3307      	adds	r3, #7
 8013e0c:	f023 0307 	bic.w	r3, r3, #7
 8013e10:	3308      	adds	r3, #8
 8013e12:	9303      	str	r3, [sp, #12]
 8013e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e16:	4433      	add	r3, r6
 8013e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e1a:	e76a      	b.n	8013cf2 <_svfiprintf_r+0x52>
 8013e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e20:	460c      	mov	r4, r1
 8013e22:	2001      	movs	r0, #1
 8013e24:	e7a8      	b.n	8013d78 <_svfiprintf_r+0xd8>
 8013e26:	2300      	movs	r3, #0
 8013e28:	3401      	adds	r4, #1
 8013e2a:	9305      	str	r3, [sp, #20]
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	f04f 0c0a 	mov.w	ip, #10
 8013e32:	4620      	mov	r0, r4
 8013e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e38:	3a30      	subs	r2, #48	@ 0x30
 8013e3a:	2a09      	cmp	r2, #9
 8013e3c:	d903      	bls.n	8013e46 <_svfiprintf_r+0x1a6>
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d0c6      	beq.n	8013dd0 <_svfiprintf_r+0x130>
 8013e42:	9105      	str	r1, [sp, #20]
 8013e44:	e7c4      	b.n	8013dd0 <_svfiprintf_r+0x130>
 8013e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e4a:	4604      	mov	r4, r0
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	e7f0      	b.n	8013e32 <_svfiprintf_r+0x192>
 8013e50:	ab03      	add	r3, sp, #12
 8013e52:	9300      	str	r3, [sp, #0]
 8013e54:	462a      	mov	r2, r5
 8013e56:	4b0e      	ldr	r3, [pc, #56]	@ (8013e90 <_svfiprintf_r+0x1f0>)
 8013e58:	a904      	add	r1, sp, #16
 8013e5a:	4638      	mov	r0, r7
 8013e5c:	f7fd fd50 	bl	8011900 <_printf_float>
 8013e60:	1c42      	adds	r2, r0, #1
 8013e62:	4606      	mov	r6, r0
 8013e64:	d1d6      	bne.n	8013e14 <_svfiprintf_r+0x174>
 8013e66:	89ab      	ldrh	r3, [r5, #12]
 8013e68:	065b      	lsls	r3, r3, #25
 8013e6a:	f53f af2d 	bmi.w	8013cc8 <_svfiprintf_r+0x28>
 8013e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e70:	e72c      	b.n	8013ccc <_svfiprintf_r+0x2c>
 8013e72:	ab03      	add	r3, sp, #12
 8013e74:	9300      	str	r3, [sp, #0]
 8013e76:	462a      	mov	r2, r5
 8013e78:	4b05      	ldr	r3, [pc, #20]	@ (8013e90 <_svfiprintf_r+0x1f0>)
 8013e7a:	a904      	add	r1, sp, #16
 8013e7c:	4638      	mov	r0, r7
 8013e7e:	f7fd ffd7 	bl	8011e30 <_printf_i>
 8013e82:	e7ed      	b.n	8013e60 <_svfiprintf_r+0x1c0>
 8013e84:	08015f60 	.word	0x08015f60
 8013e88:	08015f6a 	.word	0x08015f6a
 8013e8c:	08011901 	.word	0x08011901
 8013e90:	08013be9 	.word	0x08013be9
 8013e94:	08015f66 	.word	0x08015f66

08013e98 <__sfputc_r>:
 8013e98:	6893      	ldr	r3, [r2, #8]
 8013e9a:	3b01      	subs	r3, #1
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	b410      	push	{r4}
 8013ea0:	6093      	str	r3, [r2, #8]
 8013ea2:	da08      	bge.n	8013eb6 <__sfputc_r+0x1e>
 8013ea4:	6994      	ldr	r4, [r2, #24]
 8013ea6:	42a3      	cmp	r3, r4
 8013ea8:	db01      	blt.n	8013eae <__sfputc_r+0x16>
 8013eaa:	290a      	cmp	r1, #10
 8013eac:	d103      	bne.n	8013eb6 <__sfputc_r+0x1e>
 8013eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eb2:	f7fe bb32 	b.w	801251a <__swbuf_r>
 8013eb6:	6813      	ldr	r3, [r2, #0]
 8013eb8:	1c58      	adds	r0, r3, #1
 8013eba:	6010      	str	r0, [r2, #0]
 8013ebc:	7019      	strb	r1, [r3, #0]
 8013ebe:	4608      	mov	r0, r1
 8013ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ec4:	4770      	bx	lr

08013ec6 <__sfputs_r>:
 8013ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ec8:	4606      	mov	r6, r0
 8013eca:	460f      	mov	r7, r1
 8013ecc:	4614      	mov	r4, r2
 8013ece:	18d5      	adds	r5, r2, r3
 8013ed0:	42ac      	cmp	r4, r5
 8013ed2:	d101      	bne.n	8013ed8 <__sfputs_r+0x12>
 8013ed4:	2000      	movs	r0, #0
 8013ed6:	e007      	b.n	8013ee8 <__sfputs_r+0x22>
 8013ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013edc:	463a      	mov	r2, r7
 8013ede:	4630      	mov	r0, r6
 8013ee0:	f7ff ffda 	bl	8013e98 <__sfputc_r>
 8013ee4:	1c43      	adds	r3, r0, #1
 8013ee6:	d1f3      	bne.n	8013ed0 <__sfputs_r+0xa>
 8013ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013eec <_vfiprintf_r>:
 8013eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef0:	460d      	mov	r5, r1
 8013ef2:	b09d      	sub	sp, #116	@ 0x74
 8013ef4:	4614      	mov	r4, r2
 8013ef6:	4698      	mov	r8, r3
 8013ef8:	4606      	mov	r6, r0
 8013efa:	b118      	cbz	r0, 8013f04 <_vfiprintf_r+0x18>
 8013efc:	6a03      	ldr	r3, [r0, #32]
 8013efe:	b90b      	cbnz	r3, 8013f04 <_vfiprintf_r+0x18>
 8013f00:	f7fe fa02 	bl	8012308 <__sinit>
 8013f04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f06:	07d9      	lsls	r1, r3, #31
 8013f08:	d405      	bmi.n	8013f16 <_vfiprintf_r+0x2a>
 8013f0a:	89ab      	ldrh	r3, [r5, #12]
 8013f0c:	059a      	lsls	r2, r3, #22
 8013f0e:	d402      	bmi.n	8013f16 <_vfiprintf_r+0x2a>
 8013f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f12:	f7fe fc3e 	bl	8012792 <__retarget_lock_acquire_recursive>
 8013f16:	89ab      	ldrh	r3, [r5, #12]
 8013f18:	071b      	lsls	r3, r3, #28
 8013f1a:	d501      	bpl.n	8013f20 <_vfiprintf_r+0x34>
 8013f1c:	692b      	ldr	r3, [r5, #16]
 8013f1e:	b99b      	cbnz	r3, 8013f48 <_vfiprintf_r+0x5c>
 8013f20:	4629      	mov	r1, r5
 8013f22:	4630      	mov	r0, r6
 8013f24:	f7fe fb38 	bl	8012598 <__swsetup_r>
 8013f28:	b170      	cbz	r0, 8013f48 <_vfiprintf_r+0x5c>
 8013f2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f2c:	07dc      	lsls	r4, r3, #31
 8013f2e:	d504      	bpl.n	8013f3a <_vfiprintf_r+0x4e>
 8013f30:	f04f 30ff 	mov.w	r0, #4294967295
 8013f34:	b01d      	add	sp, #116	@ 0x74
 8013f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f3a:	89ab      	ldrh	r3, [r5, #12]
 8013f3c:	0598      	lsls	r0, r3, #22
 8013f3e:	d4f7      	bmi.n	8013f30 <_vfiprintf_r+0x44>
 8013f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f42:	f7fe fc27 	bl	8012794 <__retarget_lock_release_recursive>
 8013f46:	e7f3      	b.n	8013f30 <_vfiprintf_r+0x44>
 8013f48:	2300      	movs	r3, #0
 8013f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f4c:	2320      	movs	r3, #32
 8013f4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f56:	2330      	movs	r3, #48	@ 0x30
 8013f58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014108 <_vfiprintf_r+0x21c>
 8013f5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f60:	f04f 0901 	mov.w	r9, #1
 8013f64:	4623      	mov	r3, r4
 8013f66:	469a      	mov	sl, r3
 8013f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f6c:	b10a      	cbz	r2, 8013f72 <_vfiprintf_r+0x86>
 8013f6e:	2a25      	cmp	r2, #37	@ 0x25
 8013f70:	d1f9      	bne.n	8013f66 <_vfiprintf_r+0x7a>
 8013f72:	ebba 0b04 	subs.w	fp, sl, r4
 8013f76:	d00b      	beq.n	8013f90 <_vfiprintf_r+0xa4>
 8013f78:	465b      	mov	r3, fp
 8013f7a:	4622      	mov	r2, r4
 8013f7c:	4629      	mov	r1, r5
 8013f7e:	4630      	mov	r0, r6
 8013f80:	f7ff ffa1 	bl	8013ec6 <__sfputs_r>
 8013f84:	3001      	adds	r0, #1
 8013f86:	f000 80a7 	beq.w	80140d8 <_vfiprintf_r+0x1ec>
 8013f8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f8c:	445a      	add	r2, fp
 8013f8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f90:	f89a 3000 	ldrb.w	r3, [sl]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f000 809f 	beq.w	80140d8 <_vfiprintf_r+0x1ec>
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8013fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fa4:	f10a 0a01 	add.w	sl, sl, #1
 8013fa8:	9304      	str	r3, [sp, #16]
 8013faa:	9307      	str	r3, [sp, #28]
 8013fac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013fb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fb2:	4654      	mov	r4, sl
 8013fb4:	2205      	movs	r2, #5
 8013fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fba:	4853      	ldr	r0, [pc, #332]	@ (8014108 <_vfiprintf_r+0x21c>)
 8013fbc:	f7ec f928 	bl	8000210 <memchr>
 8013fc0:	9a04      	ldr	r2, [sp, #16]
 8013fc2:	b9d8      	cbnz	r0, 8013ffc <_vfiprintf_r+0x110>
 8013fc4:	06d1      	lsls	r1, r2, #27
 8013fc6:	bf44      	itt	mi
 8013fc8:	2320      	movmi	r3, #32
 8013fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fce:	0713      	lsls	r3, r2, #28
 8013fd0:	bf44      	itt	mi
 8013fd2:	232b      	movmi	r3, #43	@ 0x2b
 8013fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8013fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fde:	d015      	beq.n	801400c <_vfiprintf_r+0x120>
 8013fe0:	9a07      	ldr	r2, [sp, #28]
 8013fe2:	4654      	mov	r4, sl
 8013fe4:	2000      	movs	r0, #0
 8013fe6:	f04f 0c0a 	mov.w	ip, #10
 8013fea:	4621      	mov	r1, r4
 8013fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ff0:	3b30      	subs	r3, #48	@ 0x30
 8013ff2:	2b09      	cmp	r3, #9
 8013ff4:	d94b      	bls.n	801408e <_vfiprintf_r+0x1a2>
 8013ff6:	b1b0      	cbz	r0, 8014026 <_vfiprintf_r+0x13a>
 8013ff8:	9207      	str	r2, [sp, #28]
 8013ffa:	e014      	b.n	8014026 <_vfiprintf_r+0x13a>
 8013ffc:	eba0 0308 	sub.w	r3, r0, r8
 8014000:	fa09 f303 	lsl.w	r3, r9, r3
 8014004:	4313      	orrs	r3, r2
 8014006:	9304      	str	r3, [sp, #16]
 8014008:	46a2      	mov	sl, r4
 801400a:	e7d2      	b.n	8013fb2 <_vfiprintf_r+0xc6>
 801400c:	9b03      	ldr	r3, [sp, #12]
 801400e:	1d19      	adds	r1, r3, #4
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	9103      	str	r1, [sp, #12]
 8014014:	2b00      	cmp	r3, #0
 8014016:	bfbb      	ittet	lt
 8014018:	425b      	neglt	r3, r3
 801401a:	f042 0202 	orrlt.w	r2, r2, #2
 801401e:	9307      	strge	r3, [sp, #28]
 8014020:	9307      	strlt	r3, [sp, #28]
 8014022:	bfb8      	it	lt
 8014024:	9204      	strlt	r2, [sp, #16]
 8014026:	7823      	ldrb	r3, [r4, #0]
 8014028:	2b2e      	cmp	r3, #46	@ 0x2e
 801402a:	d10a      	bne.n	8014042 <_vfiprintf_r+0x156>
 801402c:	7863      	ldrb	r3, [r4, #1]
 801402e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014030:	d132      	bne.n	8014098 <_vfiprintf_r+0x1ac>
 8014032:	9b03      	ldr	r3, [sp, #12]
 8014034:	1d1a      	adds	r2, r3, #4
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	9203      	str	r2, [sp, #12]
 801403a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801403e:	3402      	adds	r4, #2
 8014040:	9305      	str	r3, [sp, #20]
 8014042:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014118 <_vfiprintf_r+0x22c>
 8014046:	7821      	ldrb	r1, [r4, #0]
 8014048:	2203      	movs	r2, #3
 801404a:	4650      	mov	r0, sl
 801404c:	f7ec f8e0 	bl	8000210 <memchr>
 8014050:	b138      	cbz	r0, 8014062 <_vfiprintf_r+0x176>
 8014052:	9b04      	ldr	r3, [sp, #16]
 8014054:	eba0 000a 	sub.w	r0, r0, sl
 8014058:	2240      	movs	r2, #64	@ 0x40
 801405a:	4082      	lsls	r2, r0
 801405c:	4313      	orrs	r3, r2
 801405e:	3401      	adds	r4, #1
 8014060:	9304      	str	r3, [sp, #16]
 8014062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014066:	4829      	ldr	r0, [pc, #164]	@ (801410c <_vfiprintf_r+0x220>)
 8014068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801406c:	2206      	movs	r2, #6
 801406e:	f7ec f8cf 	bl	8000210 <memchr>
 8014072:	2800      	cmp	r0, #0
 8014074:	d03f      	beq.n	80140f6 <_vfiprintf_r+0x20a>
 8014076:	4b26      	ldr	r3, [pc, #152]	@ (8014110 <_vfiprintf_r+0x224>)
 8014078:	bb1b      	cbnz	r3, 80140c2 <_vfiprintf_r+0x1d6>
 801407a:	9b03      	ldr	r3, [sp, #12]
 801407c:	3307      	adds	r3, #7
 801407e:	f023 0307 	bic.w	r3, r3, #7
 8014082:	3308      	adds	r3, #8
 8014084:	9303      	str	r3, [sp, #12]
 8014086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014088:	443b      	add	r3, r7
 801408a:	9309      	str	r3, [sp, #36]	@ 0x24
 801408c:	e76a      	b.n	8013f64 <_vfiprintf_r+0x78>
 801408e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014092:	460c      	mov	r4, r1
 8014094:	2001      	movs	r0, #1
 8014096:	e7a8      	b.n	8013fea <_vfiprintf_r+0xfe>
 8014098:	2300      	movs	r3, #0
 801409a:	3401      	adds	r4, #1
 801409c:	9305      	str	r3, [sp, #20]
 801409e:	4619      	mov	r1, r3
 80140a0:	f04f 0c0a 	mov.w	ip, #10
 80140a4:	4620      	mov	r0, r4
 80140a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140aa:	3a30      	subs	r2, #48	@ 0x30
 80140ac:	2a09      	cmp	r2, #9
 80140ae:	d903      	bls.n	80140b8 <_vfiprintf_r+0x1cc>
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d0c6      	beq.n	8014042 <_vfiprintf_r+0x156>
 80140b4:	9105      	str	r1, [sp, #20]
 80140b6:	e7c4      	b.n	8014042 <_vfiprintf_r+0x156>
 80140b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80140bc:	4604      	mov	r4, r0
 80140be:	2301      	movs	r3, #1
 80140c0:	e7f0      	b.n	80140a4 <_vfiprintf_r+0x1b8>
 80140c2:	ab03      	add	r3, sp, #12
 80140c4:	9300      	str	r3, [sp, #0]
 80140c6:	462a      	mov	r2, r5
 80140c8:	4b12      	ldr	r3, [pc, #72]	@ (8014114 <_vfiprintf_r+0x228>)
 80140ca:	a904      	add	r1, sp, #16
 80140cc:	4630      	mov	r0, r6
 80140ce:	f7fd fc17 	bl	8011900 <_printf_float>
 80140d2:	4607      	mov	r7, r0
 80140d4:	1c78      	adds	r0, r7, #1
 80140d6:	d1d6      	bne.n	8014086 <_vfiprintf_r+0x19a>
 80140d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80140da:	07d9      	lsls	r1, r3, #31
 80140dc:	d405      	bmi.n	80140ea <_vfiprintf_r+0x1fe>
 80140de:	89ab      	ldrh	r3, [r5, #12]
 80140e0:	059a      	lsls	r2, r3, #22
 80140e2:	d402      	bmi.n	80140ea <_vfiprintf_r+0x1fe>
 80140e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80140e6:	f7fe fb55 	bl	8012794 <__retarget_lock_release_recursive>
 80140ea:	89ab      	ldrh	r3, [r5, #12]
 80140ec:	065b      	lsls	r3, r3, #25
 80140ee:	f53f af1f 	bmi.w	8013f30 <_vfiprintf_r+0x44>
 80140f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140f4:	e71e      	b.n	8013f34 <_vfiprintf_r+0x48>
 80140f6:	ab03      	add	r3, sp, #12
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	462a      	mov	r2, r5
 80140fc:	4b05      	ldr	r3, [pc, #20]	@ (8014114 <_vfiprintf_r+0x228>)
 80140fe:	a904      	add	r1, sp, #16
 8014100:	4630      	mov	r0, r6
 8014102:	f7fd fe95 	bl	8011e30 <_printf_i>
 8014106:	e7e4      	b.n	80140d2 <_vfiprintf_r+0x1e6>
 8014108:	08015f60 	.word	0x08015f60
 801410c:	08015f6a 	.word	0x08015f6a
 8014110:	08011901 	.word	0x08011901
 8014114:	08013ec7 	.word	0x08013ec7
 8014118:	08015f66 	.word	0x08015f66

0801411c <__swhatbuf_r>:
 801411c:	b570      	push	{r4, r5, r6, lr}
 801411e:	460c      	mov	r4, r1
 8014120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014124:	2900      	cmp	r1, #0
 8014126:	b096      	sub	sp, #88	@ 0x58
 8014128:	4615      	mov	r5, r2
 801412a:	461e      	mov	r6, r3
 801412c:	da0d      	bge.n	801414a <__swhatbuf_r+0x2e>
 801412e:	89a3      	ldrh	r3, [r4, #12]
 8014130:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014134:	f04f 0100 	mov.w	r1, #0
 8014138:	bf14      	ite	ne
 801413a:	2340      	movne	r3, #64	@ 0x40
 801413c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014140:	2000      	movs	r0, #0
 8014142:	6031      	str	r1, [r6, #0]
 8014144:	602b      	str	r3, [r5, #0]
 8014146:	b016      	add	sp, #88	@ 0x58
 8014148:	bd70      	pop	{r4, r5, r6, pc}
 801414a:	466a      	mov	r2, sp
 801414c:	f000 f848 	bl	80141e0 <_fstat_r>
 8014150:	2800      	cmp	r0, #0
 8014152:	dbec      	blt.n	801412e <__swhatbuf_r+0x12>
 8014154:	9901      	ldr	r1, [sp, #4]
 8014156:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801415a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801415e:	4259      	negs	r1, r3
 8014160:	4159      	adcs	r1, r3
 8014162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014166:	e7eb      	b.n	8014140 <__swhatbuf_r+0x24>

08014168 <__smakebuf_r>:
 8014168:	898b      	ldrh	r3, [r1, #12]
 801416a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801416c:	079d      	lsls	r5, r3, #30
 801416e:	4606      	mov	r6, r0
 8014170:	460c      	mov	r4, r1
 8014172:	d507      	bpl.n	8014184 <__smakebuf_r+0x1c>
 8014174:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014178:	6023      	str	r3, [r4, #0]
 801417a:	6123      	str	r3, [r4, #16]
 801417c:	2301      	movs	r3, #1
 801417e:	6163      	str	r3, [r4, #20]
 8014180:	b003      	add	sp, #12
 8014182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014184:	ab01      	add	r3, sp, #4
 8014186:	466a      	mov	r2, sp
 8014188:	f7ff ffc8 	bl	801411c <__swhatbuf_r>
 801418c:	9f00      	ldr	r7, [sp, #0]
 801418e:	4605      	mov	r5, r0
 8014190:	4639      	mov	r1, r7
 8014192:	4630      	mov	r0, r6
 8014194:	f7fd fa88 	bl	80116a8 <_malloc_r>
 8014198:	b948      	cbnz	r0, 80141ae <__smakebuf_r+0x46>
 801419a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801419e:	059a      	lsls	r2, r3, #22
 80141a0:	d4ee      	bmi.n	8014180 <__smakebuf_r+0x18>
 80141a2:	f023 0303 	bic.w	r3, r3, #3
 80141a6:	f043 0302 	orr.w	r3, r3, #2
 80141aa:	81a3      	strh	r3, [r4, #12]
 80141ac:	e7e2      	b.n	8014174 <__smakebuf_r+0xc>
 80141ae:	89a3      	ldrh	r3, [r4, #12]
 80141b0:	6020      	str	r0, [r4, #0]
 80141b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141b6:	81a3      	strh	r3, [r4, #12]
 80141b8:	9b01      	ldr	r3, [sp, #4]
 80141ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80141be:	b15b      	cbz	r3, 80141d8 <__smakebuf_r+0x70>
 80141c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141c4:	4630      	mov	r0, r6
 80141c6:	f000 f81d 	bl	8014204 <_isatty_r>
 80141ca:	b128      	cbz	r0, 80141d8 <__smakebuf_r+0x70>
 80141cc:	89a3      	ldrh	r3, [r4, #12]
 80141ce:	f023 0303 	bic.w	r3, r3, #3
 80141d2:	f043 0301 	orr.w	r3, r3, #1
 80141d6:	81a3      	strh	r3, [r4, #12]
 80141d8:	89a3      	ldrh	r3, [r4, #12]
 80141da:	431d      	orrs	r5, r3
 80141dc:	81a5      	strh	r5, [r4, #12]
 80141de:	e7cf      	b.n	8014180 <__smakebuf_r+0x18>

080141e0 <_fstat_r>:
 80141e0:	b538      	push	{r3, r4, r5, lr}
 80141e2:	4d07      	ldr	r5, [pc, #28]	@ (8014200 <_fstat_r+0x20>)
 80141e4:	2300      	movs	r3, #0
 80141e6:	4604      	mov	r4, r0
 80141e8:	4608      	mov	r0, r1
 80141ea:	4611      	mov	r1, r2
 80141ec:	602b      	str	r3, [r5, #0]
 80141ee:	f7f6 fe5f 	bl	800aeb0 <_fstat>
 80141f2:	1c43      	adds	r3, r0, #1
 80141f4:	d102      	bne.n	80141fc <_fstat_r+0x1c>
 80141f6:	682b      	ldr	r3, [r5, #0]
 80141f8:	b103      	cbz	r3, 80141fc <_fstat_r+0x1c>
 80141fa:	6023      	str	r3, [r4, #0]
 80141fc:	bd38      	pop	{r3, r4, r5, pc}
 80141fe:	bf00      	nop
 8014200:	20000adc 	.word	0x20000adc

08014204 <_isatty_r>:
 8014204:	b538      	push	{r3, r4, r5, lr}
 8014206:	4d06      	ldr	r5, [pc, #24]	@ (8014220 <_isatty_r+0x1c>)
 8014208:	2300      	movs	r3, #0
 801420a:	4604      	mov	r4, r0
 801420c:	4608      	mov	r0, r1
 801420e:	602b      	str	r3, [r5, #0]
 8014210:	f7f6 fe5e 	bl	800aed0 <_isatty>
 8014214:	1c43      	adds	r3, r0, #1
 8014216:	d102      	bne.n	801421e <_isatty_r+0x1a>
 8014218:	682b      	ldr	r3, [r5, #0]
 801421a:	b103      	cbz	r3, 801421e <_isatty_r+0x1a>
 801421c:	6023      	str	r3, [r4, #0]
 801421e:	bd38      	pop	{r3, r4, r5, pc}
 8014220:	20000adc 	.word	0x20000adc

08014224 <__assert_func>:
 8014224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014226:	4614      	mov	r4, r2
 8014228:	461a      	mov	r2, r3
 801422a:	4b09      	ldr	r3, [pc, #36]	@ (8014250 <__assert_func+0x2c>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	4605      	mov	r5, r0
 8014230:	68d8      	ldr	r0, [r3, #12]
 8014232:	b954      	cbnz	r4, 801424a <__assert_func+0x26>
 8014234:	4b07      	ldr	r3, [pc, #28]	@ (8014254 <__assert_func+0x30>)
 8014236:	461c      	mov	r4, r3
 8014238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801423c:	9100      	str	r1, [sp, #0]
 801423e:	462b      	mov	r3, r5
 8014240:	4905      	ldr	r1, [pc, #20]	@ (8014258 <__assert_func+0x34>)
 8014242:	f000 f85b 	bl	80142fc <fiprintf>
 8014246:	f000 f86b 	bl	8014320 <abort>
 801424a:	4b04      	ldr	r3, [pc, #16]	@ (801425c <__assert_func+0x38>)
 801424c:	e7f4      	b.n	8014238 <__assert_func+0x14>
 801424e:	bf00      	nop
 8014250:	200002d0 	.word	0x200002d0
 8014254:	08015fb6 	.word	0x08015fb6
 8014258:	08015f88 	.word	0x08015f88
 801425c:	08015f7b 	.word	0x08015f7b

08014260 <__ascii_mbtowc>:
 8014260:	b082      	sub	sp, #8
 8014262:	b901      	cbnz	r1, 8014266 <__ascii_mbtowc+0x6>
 8014264:	a901      	add	r1, sp, #4
 8014266:	b142      	cbz	r2, 801427a <__ascii_mbtowc+0x1a>
 8014268:	b14b      	cbz	r3, 801427e <__ascii_mbtowc+0x1e>
 801426a:	7813      	ldrb	r3, [r2, #0]
 801426c:	600b      	str	r3, [r1, #0]
 801426e:	7812      	ldrb	r2, [r2, #0]
 8014270:	1e10      	subs	r0, r2, #0
 8014272:	bf18      	it	ne
 8014274:	2001      	movne	r0, #1
 8014276:	b002      	add	sp, #8
 8014278:	4770      	bx	lr
 801427a:	4610      	mov	r0, r2
 801427c:	e7fb      	b.n	8014276 <__ascii_mbtowc+0x16>
 801427e:	f06f 0001 	mvn.w	r0, #1
 8014282:	e7f8      	b.n	8014276 <__ascii_mbtowc+0x16>

08014284 <_realloc_r>:
 8014284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014288:	4680      	mov	r8, r0
 801428a:	4615      	mov	r5, r2
 801428c:	460c      	mov	r4, r1
 801428e:	b921      	cbnz	r1, 801429a <_realloc_r+0x16>
 8014290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014294:	4611      	mov	r1, r2
 8014296:	f7fd ba07 	b.w	80116a8 <_malloc_r>
 801429a:	b92a      	cbnz	r2, 80142a8 <_realloc_r+0x24>
 801429c:	f7ff f8d8 	bl	8013450 <_free_r>
 80142a0:	2400      	movs	r4, #0
 80142a2:	4620      	mov	r0, r4
 80142a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142a8:	f000 f841 	bl	801432e <_malloc_usable_size_r>
 80142ac:	4285      	cmp	r5, r0
 80142ae:	4606      	mov	r6, r0
 80142b0:	d802      	bhi.n	80142b8 <_realloc_r+0x34>
 80142b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80142b6:	d8f4      	bhi.n	80142a2 <_realloc_r+0x1e>
 80142b8:	4629      	mov	r1, r5
 80142ba:	4640      	mov	r0, r8
 80142bc:	f7fd f9f4 	bl	80116a8 <_malloc_r>
 80142c0:	4607      	mov	r7, r0
 80142c2:	2800      	cmp	r0, #0
 80142c4:	d0ec      	beq.n	80142a0 <_realloc_r+0x1c>
 80142c6:	42b5      	cmp	r5, r6
 80142c8:	462a      	mov	r2, r5
 80142ca:	4621      	mov	r1, r4
 80142cc:	bf28      	it	cs
 80142ce:	4632      	movcs	r2, r6
 80142d0:	f7fe fa61 	bl	8012796 <memcpy>
 80142d4:	4621      	mov	r1, r4
 80142d6:	4640      	mov	r0, r8
 80142d8:	f7ff f8ba 	bl	8013450 <_free_r>
 80142dc:	463c      	mov	r4, r7
 80142de:	e7e0      	b.n	80142a2 <_realloc_r+0x1e>

080142e0 <__ascii_wctomb>:
 80142e0:	4603      	mov	r3, r0
 80142e2:	4608      	mov	r0, r1
 80142e4:	b141      	cbz	r1, 80142f8 <__ascii_wctomb+0x18>
 80142e6:	2aff      	cmp	r2, #255	@ 0xff
 80142e8:	d904      	bls.n	80142f4 <__ascii_wctomb+0x14>
 80142ea:	228a      	movs	r2, #138	@ 0x8a
 80142ec:	601a      	str	r2, [r3, #0]
 80142ee:	f04f 30ff 	mov.w	r0, #4294967295
 80142f2:	4770      	bx	lr
 80142f4:	700a      	strb	r2, [r1, #0]
 80142f6:	2001      	movs	r0, #1
 80142f8:	4770      	bx	lr
	...

080142fc <fiprintf>:
 80142fc:	b40e      	push	{r1, r2, r3}
 80142fe:	b503      	push	{r0, r1, lr}
 8014300:	4601      	mov	r1, r0
 8014302:	ab03      	add	r3, sp, #12
 8014304:	4805      	ldr	r0, [pc, #20]	@ (801431c <fiprintf+0x20>)
 8014306:	f853 2b04 	ldr.w	r2, [r3], #4
 801430a:	6800      	ldr	r0, [r0, #0]
 801430c:	9301      	str	r3, [sp, #4]
 801430e:	f7ff fded 	bl	8013eec <_vfiprintf_r>
 8014312:	b002      	add	sp, #8
 8014314:	f85d eb04 	ldr.w	lr, [sp], #4
 8014318:	b003      	add	sp, #12
 801431a:	4770      	bx	lr
 801431c:	200002d0 	.word	0x200002d0

08014320 <abort>:
 8014320:	b508      	push	{r3, lr}
 8014322:	2006      	movs	r0, #6
 8014324:	f000 f834 	bl	8014390 <raise>
 8014328:	2001      	movs	r0, #1
 801432a:	f7f6 fd71 	bl	800ae10 <_exit>

0801432e <_malloc_usable_size_r>:
 801432e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014332:	1f18      	subs	r0, r3, #4
 8014334:	2b00      	cmp	r3, #0
 8014336:	bfbc      	itt	lt
 8014338:	580b      	ldrlt	r3, [r1, r0]
 801433a:	18c0      	addlt	r0, r0, r3
 801433c:	4770      	bx	lr

0801433e <_raise_r>:
 801433e:	291f      	cmp	r1, #31
 8014340:	b538      	push	{r3, r4, r5, lr}
 8014342:	4605      	mov	r5, r0
 8014344:	460c      	mov	r4, r1
 8014346:	d904      	bls.n	8014352 <_raise_r+0x14>
 8014348:	2316      	movs	r3, #22
 801434a:	6003      	str	r3, [r0, #0]
 801434c:	f04f 30ff 	mov.w	r0, #4294967295
 8014350:	bd38      	pop	{r3, r4, r5, pc}
 8014352:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014354:	b112      	cbz	r2, 801435c <_raise_r+0x1e>
 8014356:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801435a:	b94b      	cbnz	r3, 8014370 <_raise_r+0x32>
 801435c:	4628      	mov	r0, r5
 801435e:	f000 f831 	bl	80143c4 <_getpid_r>
 8014362:	4622      	mov	r2, r4
 8014364:	4601      	mov	r1, r0
 8014366:	4628      	mov	r0, r5
 8014368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801436c:	f000 b818 	b.w	80143a0 <_kill_r>
 8014370:	2b01      	cmp	r3, #1
 8014372:	d00a      	beq.n	801438a <_raise_r+0x4c>
 8014374:	1c59      	adds	r1, r3, #1
 8014376:	d103      	bne.n	8014380 <_raise_r+0x42>
 8014378:	2316      	movs	r3, #22
 801437a:	6003      	str	r3, [r0, #0]
 801437c:	2001      	movs	r0, #1
 801437e:	e7e7      	b.n	8014350 <_raise_r+0x12>
 8014380:	2100      	movs	r1, #0
 8014382:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014386:	4620      	mov	r0, r4
 8014388:	4798      	blx	r3
 801438a:	2000      	movs	r0, #0
 801438c:	e7e0      	b.n	8014350 <_raise_r+0x12>
	...

08014390 <raise>:
 8014390:	4b02      	ldr	r3, [pc, #8]	@ (801439c <raise+0xc>)
 8014392:	4601      	mov	r1, r0
 8014394:	6818      	ldr	r0, [r3, #0]
 8014396:	f7ff bfd2 	b.w	801433e <_raise_r>
 801439a:	bf00      	nop
 801439c:	200002d0 	.word	0x200002d0

080143a0 <_kill_r>:
 80143a0:	b538      	push	{r3, r4, r5, lr}
 80143a2:	4d07      	ldr	r5, [pc, #28]	@ (80143c0 <_kill_r+0x20>)
 80143a4:	2300      	movs	r3, #0
 80143a6:	4604      	mov	r4, r0
 80143a8:	4608      	mov	r0, r1
 80143aa:	4611      	mov	r1, r2
 80143ac:	602b      	str	r3, [r5, #0]
 80143ae:	f7f6 fd1f 	bl	800adf0 <_kill>
 80143b2:	1c43      	adds	r3, r0, #1
 80143b4:	d102      	bne.n	80143bc <_kill_r+0x1c>
 80143b6:	682b      	ldr	r3, [r5, #0]
 80143b8:	b103      	cbz	r3, 80143bc <_kill_r+0x1c>
 80143ba:	6023      	str	r3, [r4, #0]
 80143bc:	bd38      	pop	{r3, r4, r5, pc}
 80143be:	bf00      	nop
 80143c0:	20000adc 	.word	0x20000adc

080143c4 <_getpid_r>:
 80143c4:	f7f6 bd0c 	b.w	800ade0 <_getpid>

080143c8 <sqrt>:
 80143c8:	b538      	push	{r3, r4, r5, lr}
 80143ca:	ed2d 8b02 	vpush	{d8}
 80143ce:	ec55 4b10 	vmov	r4, r5, d0
 80143d2:	f000 f923 	bl	801461c <__ieee754_sqrt>
 80143d6:	4622      	mov	r2, r4
 80143d8:	462b      	mov	r3, r5
 80143da:	4620      	mov	r0, r4
 80143dc:	4629      	mov	r1, r5
 80143de:	eeb0 8a40 	vmov.f32	s16, s0
 80143e2:	eef0 8a60 	vmov.f32	s17, s1
 80143e6:	f7ec fbc1 	bl	8000b6c <__aeabi_dcmpun>
 80143ea:	b990      	cbnz	r0, 8014412 <sqrt+0x4a>
 80143ec:	2200      	movs	r2, #0
 80143ee:	2300      	movs	r3, #0
 80143f0:	4620      	mov	r0, r4
 80143f2:	4629      	mov	r1, r5
 80143f4:	f7ec fb92 	bl	8000b1c <__aeabi_dcmplt>
 80143f8:	b158      	cbz	r0, 8014412 <sqrt+0x4a>
 80143fa:	f7fe f99f 	bl	801273c <__errno>
 80143fe:	2321      	movs	r3, #33	@ 0x21
 8014400:	6003      	str	r3, [r0, #0]
 8014402:	2200      	movs	r2, #0
 8014404:	2300      	movs	r3, #0
 8014406:	4610      	mov	r0, r2
 8014408:	4619      	mov	r1, r3
 801440a:	f7ec fa3f 	bl	800088c <__aeabi_ddiv>
 801440e:	ec41 0b18 	vmov	d8, r0, r1
 8014412:	eeb0 0a48 	vmov.f32	s0, s16
 8014416:	eef0 0a68 	vmov.f32	s1, s17
 801441a:	ecbd 8b02 	vpop	{d8}
 801441e:	bd38      	pop	{r3, r4, r5, pc}

08014420 <cos>:
 8014420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014422:	ec53 2b10 	vmov	r2, r3, d0
 8014426:	4826      	ldr	r0, [pc, #152]	@ (80144c0 <cos+0xa0>)
 8014428:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801442c:	4281      	cmp	r1, r0
 801442e:	d806      	bhi.n	801443e <cos+0x1e>
 8014430:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80144b8 <cos+0x98>
 8014434:	b005      	add	sp, #20
 8014436:	f85d eb04 	ldr.w	lr, [sp], #4
 801443a:	f000 b9c9 	b.w	80147d0 <__kernel_cos>
 801443e:	4821      	ldr	r0, [pc, #132]	@ (80144c4 <cos+0xa4>)
 8014440:	4281      	cmp	r1, r0
 8014442:	d908      	bls.n	8014456 <cos+0x36>
 8014444:	4610      	mov	r0, r2
 8014446:	4619      	mov	r1, r3
 8014448:	f7eb ff3e 	bl	80002c8 <__aeabi_dsub>
 801444c:	ec41 0b10 	vmov	d0, r0, r1
 8014450:	b005      	add	sp, #20
 8014452:	f85d fb04 	ldr.w	pc, [sp], #4
 8014456:	4668      	mov	r0, sp
 8014458:	f000 fb3e 	bl	8014ad8 <__ieee754_rem_pio2>
 801445c:	f000 0003 	and.w	r0, r0, #3
 8014460:	2801      	cmp	r0, #1
 8014462:	d00b      	beq.n	801447c <cos+0x5c>
 8014464:	2802      	cmp	r0, #2
 8014466:	d015      	beq.n	8014494 <cos+0x74>
 8014468:	b9d8      	cbnz	r0, 80144a2 <cos+0x82>
 801446a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801446e:	ed9d 0b00 	vldr	d0, [sp]
 8014472:	f000 f9ad 	bl	80147d0 <__kernel_cos>
 8014476:	ec51 0b10 	vmov	r0, r1, d0
 801447a:	e7e7      	b.n	801444c <cos+0x2c>
 801447c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014480:	ed9d 0b00 	vldr	d0, [sp]
 8014484:	f000 fa6c 	bl	8014960 <__kernel_sin>
 8014488:	ec53 2b10 	vmov	r2, r3, d0
 801448c:	4610      	mov	r0, r2
 801448e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014492:	e7db      	b.n	801444c <cos+0x2c>
 8014494:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014498:	ed9d 0b00 	vldr	d0, [sp]
 801449c:	f000 f998 	bl	80147d0 <__kernel_cos>
 80144a0:	e7f2      	b.n	8014488 <cos+0x68>
 80144a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144a6:	ed9d 0b00 	vldr	d0, [sp]
 80144aa:	2001      	movs	r0, #1
 80144ac:	f000 fa58 	bl	8014960 <__kernel_sin>
 80144b0:	e7e1      	b.n	8014476 <cos+0x56>
 80144b2:	bf00      	nop
 80144b4:	f3af 8000 	nop.w
	...
 80144c0:	3fe921fb 	.word	0x3fe921fb
 80144c4:	7fefffff 	.word	0x7fefffff

080144c8 <sin>:
 80144c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144ca:	ec53 2b10 	vmov	r2, r3, d0
 80144ce:	4826      	ldr	r0, [pc, #152]	@ (8014568 <sin+0xa0>)
 80144d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80144d4:	4281      	cmp	r1, r0
 80144d6:	d807      	bhi.n	80144e8 <sin+0x20>
 80144d8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8014560 <sin+0x98>
 80144dc:	2000      	movs	r0, #0
 80144de:	b005      	add	sp, #20
 80144e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80144e4:	f000 ba3c 	b.w	8014960 <__kernel_sin>
 80144e8:	4820      	ldr	r0, [pc, #128]	@ (801456c <sin+0xa4>)
 80144ea:	4281      	cmp	r1, r0
 80144ec:	d908      	bls.n	8014500 <sin+0x38>
 80144ee:	4610      	mov	r0, r2
 80144f0:	4619      	mov	r1, r3
 80144f2:	f7eb fee9 	bl	80002c8 <__aeabi_dsub>
 80144f6:	ec41 0b10 	vmov	d0, r0, r1
 80144fa:	b005      	add	sp, #20
 80144fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014500:	4668      	mov	r0, sp
 8014502:	f000 fae9 	bl	8014ad8 <__ieee754_rem_pio2>
 8014506:	f000 0003 	and.w	r0, r0, #3
 801450a:	2801      	cmp	r0, #1
 801450c:	d00c      	beq.n	8014528 <sin+0x60>
 801450e:	2802      	cmp	r0, #2
 8014510:	d011      	beq.n	8014536 <sin+0x6e>
 8014512:	b9e8      	cbnz	r0, 8014550 <sin+0x88>
 8014514:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014518:	ed9d 0b00 	vldr	d0, [sp]
 801451c:	2001      	movs	r0, #1
 801451e:	f000 fa1f 	bl	8014960 <__kernel_sin>
 8014522:	ec51 0b10 	vmov	r0, r1, d0
 8014526:	e7e6      	b.n	80144f6 <sin+0x2e>
 8014528:	ed9d 1b02 	vldr	d1, [sp, #8]
 801452c:	ed9d 0b00 	vldr	d0, [sp]
 8014530:	f000 f94e 	bl	80147d0 <__kernel_cos>
 8014534:	e7f5      	b.n	8014522 <sin+0x5a>
 8014536:	ed9d 1b02 	vldr	d1, [sp, #8]
 801453a:	ed9d 0b00 	vldr	d0, [sp]
 801453e:	2001      	movs	r0, #1
 8014540:	f000 fa0e 	bl	8014960 <__kernel_sin>
 8014544:	ec53 2b10 	vmov	r2, r3, d0
 8014548:	4610      	mov	r0, r2
 801454a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801454e:	e7d2      	b.n	80144f6 <sin+0x2e>
 8014550:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014554:	ed9d 0b00 	vldr	d0, [sp]
 8014558:	f000 f93a 	bl	80147d0 <__kernel_cos>
 801455c:	e7f2      	b.n	8014544 <sin+0x7c>
 801455e:	bf00      	nop
	...
 8014568:	3fe921fb 	.word	0x3fe921fb
 801456c:	7fefffff 	.word	0x7fefffff

08014570 <fmaxf>:
 8014570:	b508      	push	{r3, lr}
 8014572:	ed2d 8b02 	vpush	{d8}
 8014576:	eeb0 8a40 	vmov.f32	s16, s0
 801457a:	eef0 8a60 	vmov.f32	s17, s1
 801457e:	f000 f831 	bl	80145e4 <__fpclassifyf>
 8014582:	b930      	cbnz	r0, 8014592 <fmaxf+0x22>
 8014584:	eeb0 8a68 	vmov.f32	s16, s17
 8014588:	eeb0 0a48 	vmov.f32	s0, s16
 801458c:	ecbd 8b02 	vpop	{d8}
 8014590:	bd08      	pop	{r3, pc}
 8014592:	eeb0 0a68 	vmov.f32	s0, s17
 8014596:	f000 f825 	bl	80145e4 <__fpclassifyf>
 801459a:	2800      	cmp	r0, #0
 801459c:	d0f4      	beq.n	8014588 <fmaxf+0x18>
 801459e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80145a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a6:	dded      	ble.n	8014584 <fmaxf+0x14>
 80145a8:	e7ee      	b.n	8014588 <fmaxf+0x18>

080145aa <fminf>:
 80145aa:	b508      	push	{r3, lr}
 80145ac:	ed2d 8b02 	vpush	{d8}
 80145b0:	eeb0 8a40 	vmov.f32	s16, s0
 80145b4:	eef0 8a60 	vmov.f32	s17, s1
 80145b8:	f000 f814 	bl	80145e4 <__fpclassifyf>
 80145bc:	b930      	cbnz	r0, 80145cc <fminf+0x22>
 80145be:	eeb0 8a68 	vmov.f32	s16, s17
 80145c2:	eeb0 0a48 	vmov.f32	s0, s16
 80145c6:	ecbd 8b02 	vpop	{d8}
 80145ca:	bd08      	pop	{r3, pc}
 80145cc:	eeb0 0a68 	vmov.f32	s0, s17
 80145d0:	f000 f808 	bl	80145e4 <__fpclassifyf>
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d0f4      	beq.n	80145c2 <fminf+0x18>
 80145d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80145dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e0:	d5ed      	bpl.n	80145be <fminf+0x14>
 80145e2:	e7ee      	b.n	80145c2 <fminf+0x18>

080145e4 <__fpclassifyf>:
 80145e4:	ee10 3a10 	vmov	r3, s0
 80145e8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80145ec:	d00d      	beq.n	801460a <__fpclassifyf+0x26>
 80145ee:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80145f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80145f6:	d30a      	bcc.n	801460e <__fpclassifyf+0x2a>
 80145f8:	4b07      	ldr	r3, [pc, #28]	@ (8014618 <__fpclassifyf+0x34>)
 80145fa:	1e42      	subs	r2, r0, #1
 80145fc:	429a      	cmp	r2, r3
 80145fe:	d908      	bls.n	8014612 <__fpclassifyf+0x2e>
 8014600:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8014604:	4258      	negs	r0, r3
 8014606:	4158      	adcs	r0, r3
 8014608:	4770      	bx	lr
 801460a:	2002      	movs	r0, #2
 801460c:	4770      	bx	lr
 801460e:	2004      	movs	r0, #4
 8014610:	4770      	bx	lr
 8014612:	2003      	movs	r0, #3
 8014614:	4770      	bx	lr
 8014616:	bf00      	nop
 8014618:	007ffffe 	.word	0x007ffffe

0801461c <__ieee754_sqrt>:
 801461c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014620:	4a68      	ldr	r2, [pc, #416]	@ (80147c4 <__ieee754_sqrt+0x1a8>)
 8014622:	ec55 4b10 	vmov	r4, r5, d0
 8014626:	43aa      	bics	r2, r5
 8014628:	462b      	mov	r3, r5
 801462a:	4621      	mov	r1, r4
 801462c:	d110      	bne.n	8014650 <__ieee754_sqrt+0x34>
 801462e:	4622      	mov	r2, r4
 8014630:	4620      	mov	r0, r4
 8014632:	4629      	mov	r1, r5
 8014634:	f7ec f800 	bl	8000638 <__aeabi_dmul>
 8014638:	4602      	mov	r2, r0
 801463a:	460b      	mov	r3, r1
 801463c:	4620      	mov	r0, r4
 801463e:	4629      	mov	r1, r5
 8014640:	f7eb fe44 	bl	80002cc <__adddf3>
 8014644:	4604      	mov	r4, r0
 8014646:	460d      	mov	r5, r1
 8014648:	ec45 4b10 	vmov	d0, r4, r5
 801464c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014650:	2d00      	cmp	r5, #0
 8014652:	dc0e      	bgt.n	8014672 <__ieee754_sqrt+0x56>
 8014654:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8014658:	4322      	orrs	r2, r4
 801465a:	d0f5      	beq.n	8014648 <__ieee754_sqrt+0x2c>
 801465c:	b19d      	cbz	r5, 8014686 <__ieee754_sqrt+0x6a>
 801465e:	4622      	mov	r2, r4
 8014660:	4620      	mov	r0, r4
 8014662:	4629      	mov	r1, r5
 8014664:	f7eb fe30 	bl	80002c8 <__aeabi_dsub>
 8014668:	4602      	mov	r2, r0
 801466a:	460b      	mov	r3, r1
 801466c:	f7ec f90e 	bl	800088c <__aeabi_ddiv>
 8014670:	e7e8      	b.n	8014644 <__ieee754_sqrt+0x28>
 8014672:	152a      	asrs	r2, r5, #20
 8014674:	d115      	bne.n	80146a2 <__ieee754_sqrt+0x86>
 8014676:	2000      	movs	r0, #0
 8014678:	e009      	b.n	801468e <__ieee754_sqrt+0x72>
 801467a:	0acb      	lsrs	r3, r1, #11
 801467c:	3a15      	subs	r2, #21
 801467e:	0549      	lsls	r1, r1, #21
 8014680:	2b00      	cmp	r3, #0
 8014682:	d0fa      	beq.n	801467a <__ieee754_sqrt+0x5e>
 8014684:	e7f7      	b.n	8014676 <__ieee754_sqrt+0x5a>
 8014686:	462a      	mov	r2, r5
 8014688:	e7fa      	b.n	8014680 <__ieee754_sqrt+0x64>
 801468a:	005b      	lsls	r3, r3, #1
 801468c:	3001      	adds	r0, #1
 801468e:	02dc      	lsls	r4, r3, #11
 8014690:	d5fb      	bpl.n	801468a <__ieee754_sqrt+0x6e>
 8014692:	1e44      	subs	r4, r0, #1
 8014694:	1b12      	subs	r2, r2, r4
 8014696:	f1c0 0420 	rsb	r4, r0, #32
 801469a:	fa21 f404 	lsr.w	r4, r1, r4
 801469e:	4323      	orrs	r3, r4
 80146a0:	4081      	lsls	r1, r0
 80146a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80146a6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80146aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80146ae:	07d2      	lsls	r2, r2, #31
 80146b0:	bf5c      	itt	pl
 80146b2:	005b      	lslpl	r3, r3, #1
 80146b4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80146b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80146bc:	bf58      	it	pl
 80146be:	0049      	lslpl	r1, r1, #1
 80146c0:	2600      	movs	r6, #0
 80146c2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80146c6:	106d      	asrs	r5, r5, #1
 80146c8:	0049      	lsls	r1, r1, #1
 80146ca:	2016      	movs	r0, #22
 80146cc:	4632      	mov	r2, r6
 80146ce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80146d2:	1917      	adds	r7, r2, r4
 80146d4:	429f      	cmp	r7, r3
 80146d6:	bfde      	ittt	le
 80146d8:	193a      	addle	r2, r7, r4
 80146da:	1bdb      	suble	r3, r3, r7
 80146dc:	1936      	addle	r6, r6, r4
 80146de:	0fcf      	lsrs	r7, r1, #31
 80146e0:	3801      	subs	r0, #1
 80146e2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80146e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80146ea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80146ee:	d1f0      	bne.n	80146d2 <__ieee754_sqrt+0xb6>
 80146f0:	4604      	mov	r4, r0
 80146f2:	2720      	movs	r7, #32
 80146f4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80146f8:	429a      	cmp	r2, r3
 80146fa:	eb00 0e0c 	add.w	lr, r0, ip
 80146fe:	db02      	blt.n	8014706 <__ieee754_sqrt+0xea>
 8014700:	d113      	bne.n	801472a <__ieee754_sqrt+0x10e>
 8014702:	458e      	cmp	lr, r1
 8014704:	d811      	bhi.n	801472a <__ieee754_sqrt+0x10e>
 8014706:	f1be 0f00 	cmp.w	lr, #0
 801470a:	eb0e 000c 	add.w	r0, lr, ip
 801470e:	da42      	bge.n	8014796 <__ieee754_sqrt+0x17a>
 8014710:	2800      	cmp	r0, #0
 8014712:	db40      	blt.n	8014796 <__ieee754_sqrt+0x17a>
 8014714:	f102 0801 	add.w	r8, r2, #1
 8014718:	1a9b      	subs	r3, r3, r2
 801471a:	458e      	cmp	lr, r1
 801471c:	bf88      	it	hi
 801471e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014722:	eba1 010e 	sub.w	r1, r1, lr
 8014726:	4464      	add	r4, ip
 8014728:	4642      	mov	r2, r8
 801472a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801472e:	3f01      	subs	r7, #1
 8014730:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8014734:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014738:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801473c:	d1dc      	bne.n	80146f8 <__ieee754_sqrt+0xdc>
 801473e:	4319      	orrs	r1, r3
 8014740:	d01b      	beq.n	801477a <__ieee754_sqrt+0x15e>
 8014742:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80147c8 <__ieee754_sqrt+0x1ac>
 8014746:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80147cc <__ieee754_sqrt+0x1b0>
 801474a:	e9da 0100 	ldrd	r0, r1, [sl]
 801474e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014752:	f7eb fdb9 	bl	80002c8 <__aeabi_dsub>
 8014756:	e9da 8900 	ldrd	r8, r9, [sl]
 801475a:	4602      	mov	r2, r0
 801475c:	460b      	mov	r3, r1
 801475e:	4640      	mov	r0, r8
 8014760:	4649      	mov	r1, r9
 8014762:	f7ec f9e5 	bl	8000b30 <__aeabi_dcmple>
 8014766:	b140      	cbz	r0, 801477a <__ieee754_sqrt+0x15e>
 8014768:	f1b4 3fff 	cmp.w	r4, #4294967295
 801476c:	e9da 0100 	ldrd	r0, r1, [sl]
 8014770:	e9db 2300 	ldrd	r2, r3, [fp]
 8014774:	d111      	bne.n	801479a <__ieee754_sqrt+0x17e>
 8014776:	3601      	adds	r6, #1
 8014778:	463c      	mov	r4, r7
 801477a:	1072      	asrs	r2, r6, #1
 801477c:	0863      	lsrs	r3, r4, #1
 801477e:	07f1      	lsls	r1, r6, #31
 8014780:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014784:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014788:	bf48      	it	mi
 801478a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801478e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8014792:	4618      	mov	r0, r3
 8014794:	e756      	b.n	8014644 <__ieee754_sqrt+0x28>
 8014796:	4690      	mov	r8, r2
 8014798:	e7be      	b.n	8014718 <__ieee754_sqrt+0xfc>
 801479a:	f7eb fd97 	bl	80002cc <__adddf3>
 801479e:	e9da 8900 	ldrd	r8, r9, [sl]
 80147a2:	4602      	mov	r2, r0
 80147a4:	460b      	mov	r3, r1
 80147a6:	4640      	mov	r0, r8
 80147a8:	4649      	mov	r1, r9
 80147aa:	f7ec f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80147ae:	b120      	cbz	r0, 80147ba <__ieee754_sqrt+0x19e>
 80147b0:	1ca0      	adds	r0, r4, #2
 80147b2:	bf08      	it	eq
 80147b4:	3601      	addeq	r6, #1
 80147b6:	3402      	adds	r4, #2
 80147b8:	e7df      	b.n	801477a <__ieee754_sqrt+0x15e>
 80147ba:	1c63      	adds	r3, r4, #1
 80147bc:	f023 0401 	bic.w	r4, r3, #1
 80147c0:	e7db      	b.n	801477a <__ieee754_sqrt+0x15e>
 80147c2:	bf00      	nop
 80147c4:	7ff00000 	.word	0x7ff00000
 80147c8:	20000498 	.word	0x20000498
 80147cc:	20000490 	.word	0x20000490

080147d0 <__kernel_cos>:
 80147d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147d4:	ec57 6b10 	vmov	r6, r7, d0
 80147d8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80147dc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80147e0:	ed8d 1b00 	vstr	d1, [sp]
 80147e4:	d206      	bcs.n	80147f4 <__kernel_cos+0x24>
 80147e6:	4630      	mov	r0, r6
 80147e8:	4639      	mov	r1, r7
 80147ea:	f7ec f9d5 	bl	8000b98 <__aeabi_d2iz>
 80147ee:	2800      	cmp	r0, #0
 80147f0:	f000 8088 	beq.w	8014904 <__kernel_cos+0x134>
 80147f4:	4632      	mov	r2, r6
 80147f6:	463b      	mov	r3, r7
 80147f8:	4630      	mov	r0, r6
 80147fa:	4639      	mov	r1, r7
 80147fc:	f7eb ff1c 	bl	8000638 <__aeabi_dmul>
 8014800:	4b51      	ldr	r3, [pc, #324]	@ (8014948 <__kernel_cos+0x178>)
 8014802:	2200      	movs	r2, #0
 8014804:	4604      	mov	r4, r0
 8014806:	460d      	mov	r5, r1
 8014808:	f7eb ff16 	bl	8000638 <__aeabi_dmul>
 801480c:	a340      	add	r3, pc, #256	@ (adr r3, 8014910 <__kernel_cos+0x140>)
 801480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014812:	4682      	mov	sl, r0
 8014814:	468b      	mov	fp, r1
 8014816:	4620      	mov	r0, r4
 8014818:	4629      	mov	r1, r5
 801481a:	f7eb ff0d 	bl	8000638 <__aeabi_dmul>
 801481e:	a33e      	add	r3, pc, #248	@ (adr r3, 8014918 <__kernel_cos+0x148>)
 8014820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014824:	f7eb fd52 	bl	80002cc <__adddf3>
 8014828:	4622      	mov	r2, r4
 801482a:	462b      	mov	r3, r5
 801482c:	f7eb ff04 	bl	8000638 <__aeabi_dmul>
 8014830:	a33b      	add	r3, pc, #236	@ (adr r3, 8014920 <__kernel_cos+0x150>)
 8014832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014836:	f7eb fd47 	bl	80002c8 <__aeabi_dsub>
 801483a:	4622      	mov	r2, r4
 801483c:	462b      	mov	r3, r5
 801483e:	f7eb fefb 	bl	8000638 <__aeabi_dmul>
 8014842:	a339      	add	r3, pc, #228	@ (adr r3, 8014928 <__kernel_cos+0x158>)
 8014844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014848:	f7eb fd40 	bl	80002cc <__adddf3>
 801484c:	4622      	mov	r2, r4
 801484e:	462b      	mov	r3, r5
 8014850:	f7eb fef2 	bl	8000638 <__aeabi_dmul>
 8014854:	a336      	add	r3, pc, #216	@ (adr r3, 8014930 <__kernel_cos+0x160>)
 8014856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485a:	f7eb fd35 	bl	80002c8 <__aeabi_dsub>
 801485e:	4622      	mov	r2, r4
 8014860:	462b      	mov	r3, r5
 8014862:	f7eb fee9 	bl	8000638 <__aeabi_dmul>
 8014866:	a334      	add	r3, pc, #208	@ (adr r3, 8014938 <__kernel_cos+0x168>)
 8014868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486c:	f7eb fd2e 	bl	80002cc <__adddf3>
 8014870:	4622      	mov	r2, r4
 8014872:	462b      	mov	r3, r5
 8014874:	f7eb fee0 	bl	8000638 <__aeabi_dmul>
 8014878:	4622      	mov	r2, r4
 801487a:	462b      	mov	r3, r5
 801487c:	f7eb fedc 	bl	8000638 <__aeabi_dmul>
 8014880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014884:	4604      	mov	r4, r0
 8014886:	460d      	mov	r5, r1
 8014888:	4630      	mov	r0, r6
 801488a:	4639      	mov	r1, r7
 801488c:	f7eb fed4 	bl	8000638 <__aeabi_dmul>
 8014890:	460b      	mov	r3, r1
 8014892:	4602      	mov	r2, r0
 8014894:	4629      	mov	r1, r5
 8014896:	4620      	mov	r0, r4
 8014898:	f7eb fd16 	bl	80002c8 <__aeabi_dsub>
 801489c:	4b2b      	ldr	r3, [pc, #172]	@ (801494c <__kernel_cos+0x17c>)
 801489e:	4598      	cmp	r8, r3
 80148a0:	4606      	mov	r6, r0
 80148a2:	460f      	mov	r7, r1
 80148a4:	d810      	bhi.n	80148c8 <__kernel_cos+0xf8>
 80148a6:	4602      	mov	r2, r0
 80148a8:	460b      	mov	r3, r1
 80148aa:	4650      	mov	r0, sl
 80148ac:	4659      	mov	r1, fp
 80148ae:	f7eb fd0b 	bl	80002c8 <__aeabi_dsub>
 80148b2:	460b      	mov	r3, r1
 80148b4:	4926      	ldr	r1, [pc, #152]	@ (8014950 <__kernel_cos+0x180>)
 80148b6:	4602      	mov	r2, r0
 80148b8:	2000      	movs	r0, #0
 80148ba:	f7eb fd05 	bl	80002c8 <__aeabi_dsub>
 80148be:	ec41 0b10 	vmov	d0, r0, r1
 80148c2:	b003      	add	sp, #12
 80148c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c8:	4b22      	ldr	r3, [pc, #136]	@ (8014954 <__kernel_cos+0x184>)
 80148ca:	4921      	ldr	r1, [pc, #132]	@ (8014950 <__kernel_cos+0x180>)
 80148cc:	4598      	cmp	r8, r3
 80148ce:	bf8c      	ite	hi
 80148d0:	4d21      	ldrhi	r5, [pc, #132]	@ (8014958 <__kernel_cos+0x188>)
 80148d2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80148d6:	2400      	movs	r4, #0
 80148d8:	4622      	mov	r2, r4
 80148da:	462b      	mov	r3, r5
 80148dc:	2000      	movs	r0, #0
 80148de:	f7eb fcf3 	bl	80002c8 <__aeabi_dsub>
 80148e2:	4622      	mov	r2, r4
 80148e4:	4680      	mov	r8, r0
 80148e6:	4689      	mov	r9, r1
 80148e8:	462b      	mov	r3, r5
 80148ea:	4650      	mov	r0, sl
 80148ec:	4659      	mov	r1, fp
 80148ee:	f7eb fceb 	bl	80002c8 <__aeabi_dsub>
 80148f2:	4632      	mov	r2, r6
 80148f4:	463b      	mov	r3, r7
 80148f6:	f7eb fce7 	bl	80002c8 <__aeabi_dsub>
 80148fa:	4602      	mov	r2, r0
 80148fc:	460b      	mov	r3, r1
 80148fe:	4640      	mov	r0, r8
 8014900:	4649      	mov	r1, r9
 8014902:	e7da      	b.n	80148ba <__kernel_cos+0xea>
 8014904:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8014940 <__kernel_cos+0x170>
 8014908:	e7db      	b.n	80148c2 <__kernel_cos+0xf2>
 801490a:	bf00      	nop
 801490c:	f3af 8000 	nop.w
 8014910:	be8838d4 	.word	0xbe8838d4
 8014914:	bda8fae9 	.word	0xbda8fae9
 8014918:	bdb4b1c4 	.word	0xbdb4b1c4
 801491c:	3e21ee9e 	.word	0x3e21ee9e
 8014920:	809c52ad 	.word	0x809c52ad
 8014924:	3e927e4f 	.word	0x3e927e4f
 8014928:	19cb1590 	.word	0x19cb1590
 801492c:	3efa01a0 	.word	0x3efa01a0
 8014930:	16c15177 	.word	0x16c15177
 8014934:	3f56c16c 	.word	0x3f56c16c
 8014938:	5555554c 	.word	0x5555554c
 801493c:	3fa55555 	.word	0x3fa55555
 8014940:	00000000 	.word	0x00000000
 8014944:	3ff00000 	.word	0x3ff00000
 8014948:	3fe00000 	.word	0x3fe00000
 801494c:	3fd33332 	.word	0x3fd33332
 8014950:	3ff00000 	.word	0x3ff00000
 8014954:	3fe90000 	.word	0x3fe90000
 8014958:	3fd20000 	.word	0x3fd20000
 801495c:	00000000 	.word	0x00000000

08014960 <__kernel_sin>:
 8014960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014964:	ec55 4b10 	vmov	r4, r5, d0
 8014968:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801496c:	b085      	sub	sp, #20
 801496e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8014972:	ed8d 1b02 	vstr	d1, [sp, #8]
 8014976:	4680      	mov	r8, r0
 8014978:	d205      	bcs.n	8014986 <__kernel_sin+0x26>
 801497a:	4620      	mov	r0, r4
 801497c:	4629      	mov	r1, r5
 801497e:	f7ec f90b 	bl	8000b98 <__aeabi_d2iz>
 8014982:	2800      	cmp	r0, #0
 8014984:	d052      	beq.n	8014a2c <__kernel_sin+0xcc>
 8014986:	4622      	mov	r2, r4
 8014988:	462b      	mov	r3, r5
 801498a:	4620      	mov	r0, r4
 801498c:	4629      	mov	r1, r5
 801498e:	f7eb fe53 	bl	8000638 <__aeabi_dmul>
 8014992:	4682      	mov	sl, r0
 8014994:	468b      	mov	fp, r1
 8014996:	4602      	mov	r2, r0
 8014998:	460b      	mov	r3, r1
 801499a:	4620      	mov	r0, r4
 801499c:	4629      	mov	r1, r5
 801499e:	f7eb fe4b 	bl	8000638 <__aeabi_dmul>
 80149a2:	a342      	add	r3, pc, #264	@ (adr r3, 8014aac <__kernel_sin+0x14c>)
 80149a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a8:	e9cd 0100 	strd	r0, r1, [sp]
 80149ac:	4650      	mov	r0, sl
 80149ae:	4659      	mov	r1, fp
 80149b0:	f7eb fe42 	bl	8000638 <__aeabi_dmul>
 80149b4:	a33f      	add	r3, pc, #252	@ (adr r3, 8014ab4 <__kernel_sin+0x154>)
 80149b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ba:	f7eb fc85 	bl	80002c8 <__aeabi_dsub>
 80149be:	4652      	mov	r2, sl
 80149c0:	465b      	mov	r3, fp
 80149c2:	f7eb fe39 	bl	8000638 <__aeabi_dmul>
 80149c6:	a33d      	add	r3, pc, #244	@ (adr r3, 8014abc <__kernel_sin+0x15c>)
 80149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149cc:	f7eb fc7e 	bl	80002cc <__adddf3>
 80149d0:	4652      	mov	r2, sl
 80149d2:	465b      	mov	r3, fp
 80149d4:	f7eb fe30 	bl	8000638 <__aeabi_dmul>
 80149d8:	a33a      	add	r3, pc, #232	@ (adr r3, 8014ac4 <__kernel_sin+0x164>)
 80149da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149de:	f7eb fc73 	bl	80002c8 <__aeabi_dsub>
 80149e2:	4652      	mov	r2, sl
 80149e4:	465b      	mov	r3, fp
 80149e6:	f7eb fe27 	bl	8000638 <__aeabi_dmul>
 80149ea:	a338      	add	r3, pc, #224	@ (adr r3, 8014acc <__kernel_sin+0x16c>)
 80149ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f0:	f7eb fc6c 	bl	80002cc <__adddf3>
 80149f4:	4606      	mov	r6, r0
 80149f6:	460f      	mov	r7, r1
 80149f8:	f1b8 0f00 	cmp.w	r8, #0
 80149fc:	d11b      	bne.n	8014a36 <__kernel_sin+0xd6>
 80149fe:	4602      	mov	r2, r0
 8014a00:	460b      	mov	r3, r1
 8014a02:	4650      	mov	r0, sl
 8014a04:	4659      	mov	r1, fp
 8014a06:	f7eb fe17 	bl	8000638 <__aeabi_dmul>
 8014a0a:	a325      	add	r3, pc, #148	@ (adr r3, 8014aa0 <__kernel_sin+0x140>)
 8014a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a10:	f7eb fc5a 	bl	80002c8 <__aeabi_dsub>
 8014a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a18:	f7eb fe0e 	bl	8000638 <__aeabi_dmul>
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	460b      	mov	r3, r1
 8014a20:	4620      	mov	r0, r4
 8014a22:	4629      	mov	r1, r5
 8014a24:	f7eb fc52 	bl	80002cc <__adddf3>
 8014a28:	4604      	mov	r4, r0
 8014a2a:	460d      	mov	r5, r1
 8014a2c:	ec45 4b10 	vmov	d0, r4, r5
 8014a30:	b005      	add	sp, #20
 8014a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8014aa8 <__kernel_sin+0x148>)
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	f7eb fdfb 	bl	8000638 <__aeabi_dmul>
 8014a42:	4632      	mov	r2, r6
 8014a44:	4680      	mov	r8, r0
 8014a46:	4689      	mov	r9, r1
 8014a48:	463b      	mov	r3, r7
 8014a4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a4e:	f7eb fdf3 	bl	8000638 <__aeabi_dmul>
 8014a52:	4602      	mov	r2, r0
 8014a54:	460b      	mov	r3, r1
 8014a56:	4640      	mov	r0, r8
 8014a58:	4649      	mov	r1, r9
 8014a5a:	f7eb fc35 	bl	80002c8 <__aeabi_dsub>
 8014a5e:	4652      	mov	r2, sl
 8014a60:	465b      	mov	r3, fp
 8014a62:	f7eb fde9 	bl	8000638 <__aeabi_dmul>
 8014a66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a6a:	f7eb fc2d 	bl	80002c8 <__aeabi_dsub>
 8014a6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8014aa0 <__kernel_sin+0x140>)
 8014a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a74:	4606      	mov	r6, r0
 8014a76:	460f      	mov	r7, r1
 8014a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a7c:	f7eb fddc 	bl	8000638 <__aeabi_dmul>
 8014a80:	4602      	mov	r2, r0
 8014a82:	460b      	mov	r3, r1
 8014a84:	4630      	mov	r0, r6
 8014a86:	4639      	mov	r1, r7
 8014a88:	f7eb fc20 	bl	80002cc <__adddf3>
 8014a8c:	4602      	mov	r2, r0
 8014a8e:	460b      	mov	r3, r1
 8014a90:	4620      	mov	r0, r4
 8014a92:	4629      	mov	r1, r5
 8014a94:	f7eb fc18 	bl	80002c8 <__aeabi_dsub>
 8014a98:	e7c6      	b.n	8014a28 <__kernel_sin+0xc8>
 8014a9a:	bf00      	nop
 8014a9c:	f3af 8000 	nop.w
 8014aa0:	55555549 	.word	0x55555549
 8014aa4:	3fc55555 	.word	0x3fc55555
 8014aa8:	3fe00000 	.word	0x3fe00000
 8014aac:	5acfd57c 	.word	0x5acfd57c
 8014ab0:	3de5d93a 	.word	0x3de5d93a
 8014ab4:	8a2b9ceb 	.word	0x8a2b9ceb
 8014ab8:	3e5ae5e6 	.word	0x3e5ae5e6
 8014abc:	57b1fe7d 	.word	0x57b1fe7d
 8014ac0:	3ec71de3 	.word	0x3ec71de3
 8014ac4:	19c161d5 	.word	0x19c161d5
 8014ac8:	3f2a01a0 	.word	0x3f2a01a0
 8014acc:	1110f8a6 	.word	0x1110f8a6
 8014ad0:	3f811111 	.word	0x3f811111
 8014ad4:	00000000 	.word	0x00000000

08014ad8 <__ieee754_rem_pio2>:
 8014ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014adc:	ec57 6b10 	vmov	r6, r7, d0
 8014ae0:	4bc5      	ldr	r3, [pc, #788]	@ (8014df8 <__ieee754_rem_pio2+0x320>)
 8014ae2:	b08d      	sub	sp, #52	@ 0x34
 8014ae4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014ae8:	4598      	cmp	r8, r3
 8014aea:	4604      	mov	r4, r0
 8014aec:	9704      	str	r7, [sp, #16]
 8014aee:	d807      	bhi.n	8014b00 <__ieee754_rem_pio2+0x28>
 8014af0:	2200      	movs	r2, #0
 8014af2:	2300      	movs	r3, #0
 8014af4:	ed80 0b00 	vstr	d0, [r0]
 8014af8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014afc:	2500      	movs	r5, #0
 8014afe:	e028      	b.n	8014b52 <__ieee754_rem_pio2+0x7a>
 8014b00:	4bbe      	ldr	r3, [pc, #760]	@ (8014dfc <__ieee754_rem_pio2+0x324>)
 8014b02:	4598      	cmp	r8, r3
 8014b04:	d878      	bhi.n	8014bf8 <__ieee754_rem_pio2+0x120>
 8014b06:	9b04      	ldr	r3, [sp, #16]
 8014b08:	4dbd      	ldr	r5, [pc, #756]	@ (8014e00 <__ieee754_rem_pio2+0x328>)
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8014dc0 <__ieee754_rem_pio2+0x2e8>)
 8014b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b14:	4639      	mov	r1, r7
 8014b16:	dd38      	ble.n	8014b8a <__ieee754_rem_pio2+0xb2>
 8014b18:	f7eb fbd6 	bl	80002c8 <__aeabi_dsub>
 8014b1c:	45a8      	cmp	r8, r5
 8014b1e:	4606      	mov	r6, r0
 8014b20:	460f      	mov	r7, r1
 8014b22:	d01a      	beq.n	8014b5a <__ieee754_rem_pio2+0x82>
 8014b24:	a3a8      	add	r3, pc, #672	@ (adr r3, 8014dc8 <__ieee754_rem_pio2+0x2f0>)
 8014b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2a:	f7eb fbcd 	bl	80002c8 <__aeabi_dsub>
 8014b2e:	4602      	mov	r2, r0
 8014b30:	460b      	mov	r3, r1
 8014b32:	4680      	mov	r8, r0
 8014b34:	4689      	mov	r9, r1
 8014b36:	4630      	mov	r0, r6
 8014b38:	4639      	mov	r1, r7
 8014b3a:	f7eb fbc5 	bl	80002c8 <__aeabi_dsub>
 8014b3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8014dc8 <__ieee754_rem_pio2+0x2f0>)
 8014b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b44:	f7eb fbc0 	bl	80002c8 <__aeabi_dsub>
 8014b48:	e9c4 8900 	strd	r8, r9, [r4]
 8014b4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b50:	2501      	movs	r5, #1
 8014b52:	4628      	mov	r0, r5
 8014b54:	b00d      	add	sp, #52	@ 0x34
 8014b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5a:	a39d      	add	r3, pc, #628	@ (adr r3, 8014dd0 <__ieee754_rem_pio2+0x2f8>)
 8014b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b60:	f7eb fbb2 	bl	80002c8 <__aeabi_dsub>
 8014b64:	a39c      	add	r3, pc, #624	@ (adr r3, 8014dd8 <__ieee754_rem_pio2+0x300>)
 8014b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b6a:	4606      	mov	r6, r0
 8014b6c:	460f      	mov	r7, r1
 8014b6e:	f7eb fbab 	bl	80002c8 <__aeabi_dsub>
 8014b72:	4602      	mov	r2, r0
 8014b74:	460b      	mov	r3, r1
 8014b76:	4680      	mov	r8, r0
 8014b78:	4689      	mov	r9, r1
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	4639      	mov	r1, r7
 8014b7e:	f7eb fba3 	bl	80002c8 <__aeabi_dsub>
 8014b82:	a395      	add	r3, pc, #596	@ (adr r3, 8014dd8 <__ieee754_rem_pio2+0x300>)
 8014b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b88:	e7dc      	b.n	8014b44 <__ieee754_rem_pio2+0x6c>
 8014b8a:	f7eb fb9f 	bl	80002cc <__adddf3>
 8014b8e:	45a8      	cmp	r8, r5
 8014b90:	4606      	mov	r6, r0
 8014b92:	460f      	mov	r7, r1
 8014b94:	d018      	beq.n	8014bc8 <__ieee754_rem_pio2+0xf0>
 8014b96:	a38c      	add	r3, pc, #560	@ (adr r3, 8014dc8 <__ieee754_rem_pio2+0x2f0>)
 8014b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9c:	f7eb fb96 	bl	80002cc <__adddf3>
 8014ba0:	4602      	mov	r2, r0
 8014ba2:	460b      	mov	r3, r1
 8014ba4:	4680      	mov	r8, r0
 8014ba6:	4689      	mov	r9, r1
 8014ba8:	4630      	mov	r0, r6
 8014baa:	4639      	mov	r1, r7
 8014bac:	f7eb fb8c 	bl	80002c8 <__aeabi_dsub>
 8014bb0:	a385      	add	r3, pc, #532	@ (adr r3, 8014dc8 <__ieee754_rem_pio2+0x2f0>)
 8014bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb6:	f7eb fb89 	bl	80002cc <__adddf3>
 8014bba:	f04f 35ff 	mov.w	r5, #4294967295
 8014bbe:	e9c4 8900 	strd	r8, r9, [r4]
 8014bc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014bc6:	e7c4      	b.n	8014b52 <__ieee754_rem_pio2+0x7a>
 8014bc8:	a381      	add	r3, pc, #516	@ (adr r3, 8014dd0 <__ieee754_rem_pio2+0x2f8>)
 8014bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bce:	f7eb fb7d 	bl	80002cc <__adddf3>
 8014bd2:	a381      	add	r3, pc, #516	@ (adr r3, 8014dd8 <__ieee754_rem_pio2+0x300>)
 8014bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd8:	4606      	mov	r6, r0
 8014bda:	460f      	mov	r7, r1
 8014bdc:	f7eb fb76 	bl	80002cc <__adddf3>
 8014be0:	4602      	mov	r2, r0
 8014be2:	460b      	mov	r3, r1
 8014be4:	4680      	mov	r8, r0
 8014be6:	4689      	mov	r9, r1
 8014be8:	4630      	mov	r0, r6
 8014bea:	4639      	mov	r1, r7
 8014bec:	f7eb fb6c 	bl	80002c8 <__aeabi_dsub>
 8014bf0:	a379      	add	r3, pc, #484	@ (adr r3, 8014dd8 <__ieee754_rem_pio2+0x300>)
 8014bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf6:	e7de      	b.n	8014bb6 <__ieee754_rem_pio2+0xde>
 8014bf8:	4b82      	ldr	r3, [pc, #520]	@ (8014e04 <__ieee754_rem_pio2+0x32c>)
 8014bfa:	4598      	cmp	r8, r3
 8014bfc:	f200 80d1 	bhi.w	8014da2 <__ieee754_rem_pio2+0x2ca>
 8014c00:	f000 f966 	bl	8014ed0 <fabs>
 8014c04:	ec57 6b10 	vmov	r6, r7, d0
 8014c08:	a375      	add	r3, pc, #468	@ (adr r3, 8014de0 <__ieee754_rem_pio2+0x308>)
 8014c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0e:	4630      	mov	r0, r6
 8014c10:	4639      	mov	r1, r7
 8014c12:	f7eb fd11 	bl	8000638 <__aeabi_dmul>
 8014c16:	4b7c      	ldr	r3, [pc, #496]	@ (8014e08 <__ieee754_rem_pio2+0x330>)
 8014c18:	2200      	movs	r2, #0
 8014c1a:	f7eb fb57 	bl	80002cc <__adddf3>
 8014c1e:	f7eb ffbb 	bl	8000b98 <__aeabi_d2iz>
 8014c22:	4605      	mov	r5, r0
 8014c24:	f7eb fc9e 	bl	8000564 <__aeabi_i2d>
 8014c28:	4602      	mov	r2, r0
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014c30:	a363      	add	r3, pc, #396	@ (adr r3, 8014dc0 <__ieee754_rem_pio2+0x2e8>)
 8014c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c36:	f7eb fcff 	bl	8000638 <__aeabi_dmul>
 8014c3a:	4602      	mov	r2, r0
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	4630      	mov	r0, r6
 8014c40:	4639      	mov	r1, r7
 8014c42:	f7eb fb41 	bl	80002c8 <__aeabi_dsub>
 8014c46:	a360      	add	r3, pc, #384	@ (adr r3, 8014dc8 <__ieee754_rem_pio2+0x2f0>)
 8014c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4c:	4682      	mov	sl, r0
 8014c4e:	468b      	mov	fp, r1
 8014c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c54:	f7eb fcf0 	bl	8000638 <__aeabi_dmul>
 8014c58:	2d1f      	cmp	r5, #31
 8014c5a:	4606      	mov	r6, r0
 8014c5c:	460f      	mov	r7, r1
 8014c5e:	dc0c      	bgt.n	8014c7a <__ieee754_rem_pio2+0x1a2>
 8014c60:	4b6a      	ldr	r3, [pc, #424]	@ (8014e0c <__ieee754_rem_pio2+0x334>)
 8014c62:	1e6a      	subs	r2, r5, #1
 8014c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c68:	4543      	cmp	r3, r8
 8014c6a:	d006      	beq.n	8014c7a <__ieee754_rem_pio2+0x1a2>
 8014c6c:	4632      	mov	r2, r6
 8014c6e:	463b      	mov	r3, r7
 8014c70:	4650      	mov	r0, sl
 8014c72:	4659      	mov	r1, fp
 8014c74:	f7eb fb28 	bl	80002c8 <__aeabi_dsub>
 8014c78:	e00e      	b.n	8014c98 <__ieee754_rem_pio2+0x1c0>
 8014c7a:	463b      	mov	r3, r7
 8014c7c:	4632      	mov	r2, r6
 8014c7e:	4650      	mov	r0, sl
 8014c80:	4659      	mov	r1, fp
 8014c82:	f7eb fb21 	bl	80002c8 <__aeabi_dsub>
 8014c86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014c8a:	9305      	str	r3, [sp, #20]
 8014c8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014c90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8014c94:	2b10      	cmp	r3, #16
 8014c96:	dc02      	bgt.n	8014c9e <__ieee754_rem_pio2+0x1c6>
 8014c98:	e9c4 0100 	strd	r0, r1, [r4]
 8014c9c:	e039      	b.n	8014d12 <__ieee754_rem_pio2+0x23a>
 8014c9e:	a34c      	add	r3, pc, #304	@ (adr r3, 8014dd0 <__ieee754_rem_pio2+0x2f8>)
 8014ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ca8:	f7eb fcc6 	bl	8000638 <__aeabi_dmul>
 8014cac:	4606      	mov	r6, r0
 8014cae:	460f      	mov	r7, r1
 8014cb0:	4602      	mov	r2, r0
 8014cb2:	460b      	mov	r3, r1
 8014cb4:	4650      	mov	r0, sl
 8014cb6:	4659      	mov	r1, fp
 8014cb8:	f7eb fb06 	bl	80002c8 <__aeabi_dsub>
 8014cbc:	4602      	mov	r2, r0
 8014cbe:	460b      	mov	r3, r1
 8014cc0:	4680      	mov	r8, r0
 8014cc2:	4689      	mov	r9, r1
 8014cc4:	4650      	mov	r0, sl
 8014cc6:	4659      	mov	r1, fp
 8014cc8:	f7eb fafe 	bl	80002c8 <__aeabi_dsub>
 8014ccc:	4632      	mov	r2, r6
 8014cce:	463b      	mov	r3, r7
 8014cd0:	f7eb fafa 	bl	80002c8 <__aeabi_dsub>
 8014cd4:	a340      	add	r3, pc, #256	@ (adr r3, 8014dd8 <__ieee754_rem_pio2+0x300>)
 8014cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cda:	4606      	mov	r6, r0
 8014cdc:	460f      	mov	r7, r1
 8014cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ce2:	f7eb fca9 	bl	8000638 <__aeabi_dmul>
 8014ce6:	4632      	mov	r2, r6
 8014ce8:	463b      	mov	r3, r7
 8014cea:	f7eb faed 	bl	80002c8 <__aeabi_dsub>
 8014cee:	4602      	mov	r2, r0
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	4606      	mov	r6, r0
 8014cf4:	460f      	mov	r7, r1
 8014cf6:	4640      	mov	r0, r8
 8014cf8:	4649      	mov	r1, r9
 8014cfa:	f7eb fae5 	bl	80002c8 <__aeabi_dsub>
 8014cfe:	9a05      	ldr	r2, [sp, #20]
 8014d00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014d04:	1ad3      	subs	r3, r2, r3
 8014d06:	2b31      	cmp	r3, #49	@ 0x31
 8014d08:	dc20      	bgt.n	8014d4c <__ieee754_rem_pio2+0x274>
 8014d0a:	e9c4 0100 	strd	r0, r1, [r4]
 8014d0e:	46c2      	mov	sl, r8
 8014d10:	46cb      	mov	fp, r9
 8014d12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014d16:	4650      	mov	r0, sl
 8014d18:	4642      	mov	r2, r8
 8014d1a:	464b      	mov	r3, r9
 8014d1c:	4659      	mov	r1, fp
 8014d1e:	f7eb fad3 	bl	80002c8 <__aeabi_dsub>
 8014d22:	463b      	mov	r3, r7
 8014d24:	4632      	mov	r2, r6
 8014d26:	f7eb facf 	bl	80002c8 <__aeabi_dsub>
 8014d2a:	9b04      	ldr	r3, [sp, #16]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014d32:	f6bf af0e 	bge.w	8014b52 <__ieee754_rem_pio2+0x7a>
 8014d36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8014d3a:	6063      	str	r3, [r4, #4]
 8014d3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014d40:	f8c4 8000 	str.w	r8, [r4]
 8014d44:	60a0      	str	r0, [r4, #8]
 8014d46:	60e3      	str	r3, [r4, #12]
 8014d48:	426d      	negs	r5, r5
 8014d4a:	e702      	b.n	8014b52 <__ieee754_rem_pio2+0x7a>
 8014d4c:	a326      	add	r3, pc, #152	@ (adr r3, 8014de8 <__ieee754_rem_pio2+0x310>)
 8014d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d56:	f7eb fc6f 	bl	8000638 <__aeabi_dmul>
 8014d5a:	4606      	mov	r6, r0
 8014d5c:	460f      	mov	r7, r1
 8014d5e:	4602      	mov	r2, r0
 8014d60:	460b      	mov	r3, r1
 8014d62:	4640      	mov	r0, r8
 8014d64:	4649      	mov	r1, r9
 8014d66:	f7eb faaf 	bl	80002c8 <__aeabi_dsub>
 8014d6a:	4602      	mov	r2, r0
 8014d6c:	460b      	mov	r3, r1
 8014d6e:	4682      	mov	sl, r0
 8014d70:	468b      	mov	fp, r1
 8014d72:	4640      	mov	r0, r8
 8014d74:	4649      	mov	r1, r9
 8014d76:	f7eb faa7 	bl	80002c8 <__aeabi_dsub>
 8014d7a:	4632      	mov	r2, r6
 8014d7c:	463b      	mov	r3, r7
 8014d7e:	f7eb faa3 	bl	80002c8 <__aeabi_dsub>
 8014d82:	a31b      	add	r3, pc, #108	@ (adr r3, 8014df0 <__ieee754_rem_pio2+0x318>)
 8014d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d88:	4606      	mov	r6, r0
 8014d8a:	460f      	mov	r7, r1
 8014d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d90:	f7eb fc52 	bl	8000638 <__aeabi_dmul>
 8014d94:	4632      	mov	r2, r6
 8014d96:	463b      	mov	r3, r7
 8014d98:	f7eb fa96 	bl	80002c8 <__aeabi_dsub>
 8014d9c:	4606      	mov	r6, r0
 8014d9e:	460f      	mov	r7, r1
 8014da0:	e764      	b.n	8014c6c <__ieee754_rem_pio2+0x194>
 8014da2:	4b1b      	ldr	r3, [pc, #108]	@ (8014e10 <__ieee754_rem_pio2+0x338>)
 8014da4:	4598      	cmp	r8, r3
 8014da6:	d935      	bls.n	8014e14 <__ieee754_rem_pio2+0x33c>
 8014da8:	4632      	mov	r2, r6
 8014daa:	463b      	mov	r3, r7
 8014dac:	4630      	mov	r0, r6
 8014dae:	4639      	mov	r1, r7
 8014db0:	f7eb fa8a 	bl	80002c8 <__aeabi_dsub>
 8014db4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014db8:	e9c4 0100 	strd	r0, r1, [r4]
 8014dbc:	e69e      	b.n	8014afc <__ieee754_rem_pio2+0x24>
 8014dbe:	bf00      	nop
 8014dc0:	54400000 	.word	0x54400000
 8014dc4:	3ff921fb 	.word	0x3ff921fb
 8014dc8:	1a626331 	.word	0x1a626331
 8014dcc:	3dd0b461 	.word	0x3dd0b461
 8014dd0:	1a600000 	.word	0x1a600000
 8014dd4:	3dd0b461 	.word	0x3dd0b461
 8014dd8:	2e037073 	.word	0x2e037073
 8014ddc:	3ba3198a 	.word	0x3ba3198a
 8014de0:	6dc9c883 	.word	0x6dc9c883
 8014de4:	3fe45f30 	.word	0x3fe45f30
 8014de8:	2e000000 	.word	0x2e000000
 8014dec:	3ba3198a 	.word	0x3ba3198a
 8014df0:	252049c1 	.word	0x252049c1
 8014df4:	397b839a 	.word	0x397b839a
 8014df8:	3fe921fb 	.word	0x3fe921fb
 8014dfc:	4002d97b 	.word	0x4002d97b
 8014e00:	3ff921fb 	.word	0x3ff921fb
 8014e04:	413921fb 	.word	0x413921fb
 8014e08:	3fe00000 	.word	0x3fe00000
 8014e0c:	080160b8 	.word	0x080160b8
 8014e10:	7fefffff 	.word	0x7fefffff
 8014e14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014e18:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8014e1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014e20:	4630      	mov	r0, r6
 8014e22:	460f      	mov	r7, r1
 8014e24:	f7eb feb8 	bl	8000b98 <__aeabi_d2iz>
 8014e28:	f7eb fb9c 	bl	8000564 <__aeabi_i2d>
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	460b      	mov	r3, r1
 8014e30:	4630      	mov	r0, r6
 8014e32:	4639      	mov	r1, r7
 8014e34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014e38:	f7eb fa46 	bl	80002c8 <__aeabi_dsub>
 8014e3c:	4b22      	ldr	r3, [pc, #136]	@ (8014ec8 <__ieee754_rem_pio2+0x3f0>)
 8014e3e:	2200      	movs	r2, #0
 8014e40:	f7eb fbfa 	bl	8000638 <__aeabi_dmul>
 8014e44:	460f      	mov	r7, r1
 8014e46:	4606      	mov	r6, r0
 8014e48:	f7eb fea6 	bl	8000b98 <__aeabi_d2iz>
 8014e4c:	f7eb fb8a 	bl	8000564 <__aeabi_i2d>
 8014e50:	4602      	mov	r2, r0
 8014e52:	460b      	mov	r3, r1
 8014e54:	4630      	mov	r0, r6
 8014e56:	4639      	mov	r1, r7
 8014e58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014e5c:	f7eb fa34 	bl	80002c8 <__aeabi_dsub>
 8014e60:	4b19      	ldr	r3, [pc, #100]	@ (8014ec8 <__ieee754_rem_pio2+0x3f0>)
 8014e62:	2200      	movs	r2, #0
 8014e64:	f7eb fbe8 	bl	8000638 <__aeabi_dmul>
 8014e68:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8014e6c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014e70:	f04f 0803 	mov.w	r8, #3
 8014e74:	2600      	movs	r6, #0
 8014e76:	2700      	movs	r7, #0
 8014e78:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014e7c:	4632      	mov	r2, r6
 8014e7e:	463b      	mov	r3, r7
 8014e80:	46c2      	mov	sl, r8
 8014e82:	f108 38ff 	add.w	r8, r8, #4294967295
 8014e86:	f7eb fe3f 	bl	8000b08 <__aeabi_dcmpeq>
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	d1f4      	bne.n	8014e78 <__ieee754_rem_pio2+0x3a0>
 8014e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8014ecc <__ieee754_rem_pio2+0x3f4>)
 8014e90:	9301      	str	r3, [sp, #4]
 8014e92:	2302      	movs	r3, #2
 8014e94:	9300      	str	r3, [sp, #0]
 8014e96:	462a      	mov	r2, r5
 8014e98:	4653      	mov	r3, sl
 8014e9a:	4621      	mov	r1, r4
 8014e9c:	a806      	add	r0, sp, #24
 8014e9e:	f000 f81f 	bl	8014ee0 <__kernel_rem_pio2>
 8014ea2:	9b04      	ldr	r3, [sp, #16]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	4605      	mov	r5, r0
 8014ea8:	f6bf ae53 	bge.w	8014b52 <__ieee754_rem_pio2+0x7a>
 8014eac:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014eb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014eb4:	e9c4 2300 	strd	r2, r3, [r4]
 8014eb8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8014ebc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014ec0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8014ec4:	e740      	b.n	8014d48 <__ieee754_rem_pio2+0x270>
 8014ec6:	bf00      	nop
 8014ec8:	41700000 	.word	0x41700000
 8014ecc:	08016138 	.word	0x08016138

08014ed0 <fabs>:
 8014ed0:	ec51 0b10 	vmov	r0, r1, d0
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014eda:	ec43 2b10 	vmov	d0, r2, r3
 8014ede:	4770      	bx	lr

08014ee0 <__kernel_rem_pio2>:
 8014ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee4:	ed2d 8b02 	vpush	{d8}
 8014ee8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014eec:	f112 0f14 	cmn.w	r2, #20
 8014ef0:	9306      	str	r3, [sp, #24]
 8014ef2:	9104      	str	r1, [sp, #16]
 8014ef4:	4bbe      	ldr	r3, [pc, #760]	@ (80151f0 <__kernel_rem_pio2+0x310>)
 8014ef6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014ef8:	9008      	str	r0, [sp, #32]
 8014efa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014efe:	9300      	str	r3, [sp, #0]
 8014f00:	9b06      	ldr	r3, [sp, #24]
 8014f02:	f103 33ff 	add.w	r3, r3, #4294967295
 8014f06:	bfa8      	it	ge
 8014f08:	1ed4      	subge	r4, r2, #3
 8014f0a:	9305      	str	r3, [sp, #20]
 8014f0c:	bfb2      	itee	lt
 8014f0e:	2400      	movlt	r4, #0
 8014f10:	2318      	movge	r3, #24
 8014f12:	fb94 f4f3 	sdivge	r4, r4, r3
 8014f16:	f06f 0317 	mvn.w	r3, #23
 8014f1a:	fb04 3303 	mla	r3, r4, r3, r3
 8014f1e:	eb03 0b02 	add.w	fp, r3, r2
 8014f22:	9b00      	ldr	r3, [sp, #0]
 8014f24:	9a05      	ldr	r2, [sp, #20]
 8014f26:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80151e0 <__kernel_rem_pio2+0x300>
 8014f2a:	eb03 0802 	add.w	r8, r3, r2
 8014f2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014f30:	1aa7      	subs	r7, r4, r2
 8014f32:	ae20      	add	r6, sp, #128	@ 0x80
 8014f34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014f38:	2500      	movs	r5, #0
 8014f3a:	4545      	cmp	r5, r8
 8014f3c:	dd13      	ble.n	8014f66 <__kernel_rem_pio2+0x86>
 8014f3e:	9b06      	ldr	r3, [sp, #24]
 8014f40:	aa20      	add	r2, sp, #128	@ 0x80
 8014f42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014f46:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014f4a:	f04f 0800 	mov.w	r8, #0
 8014f4e:	9b00      	ldr	r3, [sp, #0]
 8014f50:	4598      	cmp	r8, r3
 8014f52:	dc31      	bgt.n	8014fb8 <__kernel_rem_pio2+0xd8>
 8014f54:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80151e0 <__kernel_rem_pio2+0x300>
 8014f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014f5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014f60:	462f      	mov	r7, r5
 8014f62:	2600      	movs	r6, #0
 8014f64:	e01b      	b.n	8014f9e <__kernel_rem_pio2+0xbe>
 8014f66:	42ef      	cmn	r7, r5
 8014f68:	d407      	bmi.n	8014f7a <__kernel_rem_pio2+0x9a>
 8014f6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014f6e:	f7eb faf9 	bl	8000564 <__aeabi_i2d>
 8014f72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014f76:	3501      	adds	r5, #1
 8014f78:	e7df      	b.n	8014f3a <__kernel_rem_pio2+0x5a>
 8014f7a:	ec51 0b18 	vmov	r0, r1, d8
 8014f7e:	e7f8      	b.n	8014f72 <__kernel_rem_pio2+0x92>
 8014f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014f88:	f7eb fb56 	bl	8000638 <__aeabi_dmul>
 8014f8c:	4602      	mov	r2, r0
 8014f8e:	460b      	mov	r3, r1
 8014f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f94:	f7eb f99a 	bl	80002cc <__adddf3>
 8014f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f9c:	3601      	adds	r6, #1
 8014f9e:	9b05      	ldr	r3, [sp, #20]
 8014fa0:	429e      	cmp	r6, r3
 8014fa2:	f1a7 0708 	sub.w	r7, r7, #8
 8014fa6:	ddeb      	ble.n	8014f80 <__kernel_rem_pio2+0xa0>
 8014fa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014fac:	f108 0801 	add.w	r8, r8, #1
 8014fb0:	ecaa 7b02 	vstmia	sl!, {d7}
 8014fb4:	3508      	adds	r5, #8
 8014fb6:	e7ca      	b.n	8014f4e <__kernel_rem_pio2+0x6e>
 8014fb8:	9b00      	ldr	r3, [sp, #0]
 8014fba:	f8dd 8000 	ldr.w	r8, [sp]
 8014fbe:	aa0c      	add	r2, sp, #48	@ 0x30
 8014fc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014fc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8014fc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014fc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014fd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014fd4:	ab98      	add	r3, sp, #608	@ 0x260
 8014fd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014fda:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014fde:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014fe2:	ac0c      	add	r4, sp, #48	@ 0x30
 8014fe4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014fe6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014fea:	46a1      	mov	r9, r4
 8014fec:	46c2      	mov	sl, r8
 8014fee:	f1ba 0f00 	cmp.w	sl, #0
 8014ff2:	f1a5 0508 	sub.w	r5, r5, #8
 8014ff6:	dc77      	bgt.n	80150e8 <__kernel_rem_pio2+0x208>
 8014ff8:	4658      	mov	r0, fp
 8014ffa:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014ffe:	f000 fac7 	bl	8015590 <scalbn>
 8015002:	ec57 6b10 	vmov	r6, r7, d0
 8015006:	2200      	movs	r2, #0
 8015008:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801500c:	4630      	mov	r0, r6
 801500e:	4639      	mov	r1, r7
 8015010:	f7eb fb12 	bl	8000638 <__aeabi_dmul>
 8015014:	ec41 0b10 	vmov	d0, r0, r1
 8015018:	f000 fb3a 	bl	8015690 <floor>
 801501c:	4b75      	ldr	r3, [pc, #468]	@ (80151f4 <__kernel_rem_pio2+0x314>)
 801501e:	ec51 0b10 	vmov	r0, r1, d0
 8015022:	2200      	movs	r2, #0
 8015024:	f7eb fb08 	bl	8000638 <__aeabi_dmul>
 8015028:	4602      	mov	r2, r0
 801502a:	460b      	mov	r3, r1
 801502c:	4630      	mov	r0, r6
 801502e:	4639      	mov	r1, r7
 8015030:	f7eb f94a 	bl	80002c8 <__aeabi_dsub>
 8015034:	460f      	mov	r7, r1
 8015036:	4606      	mov	r6, r0
 8015038:	f7eb fdae 	bl	8000b98 <__aeabi_d2iz>
 801503c:	9002      	str	r0, [sp, #8]
 801503e:	f7eb fa91 	bl	8000564 <__aeabi_i2d>
 8015042:	4602      	mov	r2, r0
 8015044:	460b      	mov	r3, r1
 8015046:	4630      	mov	r0, r6
 8015048:	4639      	mov	r1, r7
 801504a:	f7eb f93d 	bl	80002c8 <__aeabi_dsub>
 801504e:	f1bb 0f00 	cmp.w	fp, #0
 8015052:	4606      	mov	r6, r0
 8015054:	460f      	mov	r7, r1
 8015056:	dd6c      	ble.n	8015132 <__kernel_rem_pio2+0x252>
 8015058:	f108 31ff 	add.w	r1, r8, #4294967295
 801505c:	ab0c      	add	r3, sp, #48	@ 0x30
 801505e:	9d02      	ldr	r5, [sp, #8]
 8015060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015064:	f1cb 0018 	rsb	r0, fp, #24
 8015068:	fa43 f200 	asr.w	r2, r3, r0
 801506c:	4415      	add	r5, r2
 801506e:	4082      	lsls	r2, r0
 8015070:	1a9b      	subs	r3, r3, r2
 8015072:	aa0c      	add	r2, sp, #48	@ 0x30
 8015074:	9502      	str	r5, [sp, #8]
 8015076:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801507a:	f1cb 0217 	rsb	r2, fp, #23
 801507e:	fa43 f902 	asr.w	r9, r3, r2
 8015082:	f1b9 0f00 	cmp.w	r9, #0
 8015086:	dd64      	ble.n	8015152 <__kernel_rem_pio2+0x272>
 8015088:	9b02      	ldr	r3, [sp, #8]
 801508a:	2200      	movs	r2, #0
 801508c:	3301      	adds	r3, #1
 801508e:	9302      	str	r3, [sp, #8]
 8015090:	4615      	mov	r5, r2
 8015092:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8015096:	4590      	cmp	r8, r2
 8015098:	f300 80b8 	bgt.w	801520c <__kernel_rem_pio2+0x32c>
 801509c:	f1bb 0f00 	cmp.w	fp, #0
 80150a0:	dd07      	ble.n	80150b2 <__kernel_rem_pio2+0x1d2>
 80150a2:	f1bb 0f01 	cmp.w	fp, #1
 80150a6:	f000 80bf 	beq.w	8015228 <__kernel_rem_pio2+0x348>
 80150aa:	f1bb 0f02 	cmp.w	fp, #2
 80150ae:	f000 80c6 	beq.w	801523e <__kernel_rem_pio2+0x35e>
 80150b2:	f1b9 0f02 	cmp.w	r9, #2
 80150b6:	d14c      	bne.n	8015152 <__kernel_rem_pio2+0x272>
 80150b8:	4632      	mov	r2, r6
 80150ba:	463b      	mov	r3, r7
 80150bc:	494e      	ldr	r1, [pc, #312]	@ (80151f8 <__kernel_rem_pio2+0x318>)
 80150be:	2000      	movs	r0, #0
 80150c0:	f7eb f902 	bl	80002c8 <__aeabi_dsub>
 80150c4:	4606      	mov	r6, r0
 80150c6:	460f      	mov	r7, r1
 80150c8:	2d00      	cmp	r5, #0
 80150ca:	d042      	beq.n	8015152 <__kernel_rem_pio2+0x272>
 80150cc:	4658      	mov	r0, fp
 80150ce:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80151e8 <__kernel_rem_pio2+0x308>
 80150d2:	f000 fa5d 	bl	8015590 <scalbn>
 80150d6:	4630      	mov	r0, r6
 80150d8:	4639      	mov	r1, r7
 80150da:	ec53 2b10 	vmov	r2, r3, d0
 80150de:	f7eb f8f3 	bl	80002c8 <__aeabi_dsub>
 80150e2:	4606      	mov	r6, r0
 80150e4:	460f      	mov	r7, r1
 80150e6:	e034      	b.n	8015152 <__kernel_rem_pio2+0x272>
 80150e8:	4b44      	ldr	r3, [pc, #272]	@ (80151fc <__kernel_rem_pio2+0x31c>)
 80150ea:	2200      	movs	r2, #0
 80150ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150f0:	f7eb faa2 	bl	8000638 <__aeabi_dmul>
 80150f4:	f7eb fd50 	bl	8000b98 <__aeabi_d2iz>
 80150f8:	f7eb fa34 	bl	8000564 <__aeabi_i2d>
 80150fc:	4b40      	ldr	r3, [pc, #256]	@ (8015200 <__kernel_rem_pio2+0x320>)
 80150fe:	2200      	movs	r2, #0
 8015100:	4606      	mov	r6, r0
 8015102:	460f      	mov	r7, r1
 8015104:	f7eb fa98 	bl	8000638 <__aeabi_dmul>
 8015108:	4602      	mov	r2, r0
 801510a:	460b      	mov	r3, r1
 801510c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015110:	f7eb f8da 	bl	80002c8 <__aeabi_dsub>
 8015114:	f7eb fd40 	bl	8000b98 <__aeabi_d2iz>
 8015118:	e9d5 2300 	ldrd	r2, r3, [r5]
 801511c:	f849 0b04 	str.w	r0, [r9], #4
 8015120:	4639      	mov	r1, r7
 8015122:	4630      	mov	r0, r6
 8015124:	f7eb f8d2 	bl	80002cc <__adddf3>
 8015128:	f10a 3aff 	add.w	sl, sl, #4294967295
 801512c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015130:	e75d      	b.n	8014fee <__kernel_rem_pio2+0x10e>
 8015132:	d107      	bne.n	8015144 <__kernel_rem_pio2+0x264>
 8015134:	f108 33ff 	add.w	r3, r8, #4294967295
 8015138:	aa0c      	add	r2, sp, #48	@ 0x30
 801513a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801513e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8015142:	e79e      	b.n	8015082 <__kernel_rem_pio2+0x1a2>
 8015144:	4b2f      	ldr	r3, [pc, #188]	@ (8015204 <__kernel_rem_pio2+0x324>)
 8015146:	2200      	movs	r2, #0
 8015148:	f7eb fcfc 	bl	8000b44 <__aeabi_dcmpge>
 801514c:	2800      	cmp	r0, #0
 801514e:	d143      	bne.n	80151d8 <__kernel_rem_pio2+0x2f8>
 8015150:	4681      	mov	r9, r0
 8015152:	2200      	movs	r2, #0
 8015154:	2300      	movs	r3, #0
 8015156:	4630      	mov	r0, r6
 8015158:	4639      	mov	r1, r7
 801515a:	f7eb fcd5 	bl	8000b08 <__aeabi_dcmpeq>
 801515e:	2800      	cmp	r0, #0
 8015160:	f000 80bf 	beq.w	80152e2 <__kernel_rem_pio2+0x402>
 8015164:	f108 33ff 	add.w	r3, r8, #4294967295
 8015168:	2200      	movs	r2, #0
 801516a:	9900      	ldr	r1, [sp, #0]
 801516c:	428b      	cmp	r3, r1
 801516e:	da6e      	bge.n	801524e <__kernel_rem_pio2+0x36e>
 8015170:	2a00      	cmp	r2, #0
 8015172:	f000 8089 	beq.w	8015288 <__kernel_rem_pio2+0x3a8>
 8015176:	f108 38ff 	add.w	r8, r8, #4294967295
 801517a:	ab0c      	add	r3, sp, #48	@ 0x30
 801517c:	f1ab 0b18 	sub.w	fp, fp, #24
 8015180:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d0f6      	beq.n	8015176 <__kernel_rem_pio2+0x296>
 8015188:	4658      	mov	r0, fp
 801518a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80151e8 <__kernel_rem_pio2+0x308>
 801518e:	f000 f9ff 	bl	8015590 <scalbn>
 8015192:	f108 0301 	add.w	r3, r8, #1
 8015196:	00da      	lsls	r2, r3, #3
 8015198:	9205      	str	r2, [sp, #20]
 801519a:	ec55 4b10 	vmov	r4, r5, d0
 801519e:	aa70      	add	r2, sp, #448	@ 0x1c0
 80151a0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80151fc <__kernel_rem_pio2+0x31c>
 80151a4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80151a8:	4646      	mov	r6, r8
 80151aa:	f04f 0a00 	mov.w	sl, #0
 80151ae:	2e00      	cmp	r6, #0
 80151b0:	f280 80cf 	bge.w	8015352 <__kernel_rem_pio2+0x472>
 80151b4:	4644      	mov	r4, r8
 80151b6:	2c00      	cmp	r4, #0
 80151b8:	f2c0 80fd 	blt.w	80153b6 <__kernel_rem_pio2+0x4d6>
 80151bc:	4b12      	ldr	r3, [pc, #72]	@ (8015208 <__kernel_rem_pio2+0x328>)
 80151be:	461f      	mov	r7, r3
 80151c0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80151c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80151c6:	9306      	str	r3, [sp, #24]
 80151c8:	f04f 0a00 	mov.w	sl, #0
 80151cc:	f04f 0b00 	mov.w	fp, #0
 80151d0:	2600      	movs	r6, #0
 80151d2:	eba8 0504 	sub.w	r5, r8, r4
 80151d6:	e0e2      	b.n	801539e <__kernel_rem_pio2+0x4be>
 80151d8:	f04f 0902 	mov.w	r9, #2
 80151dc:	e754      	b.n	8015088 <__kernel_rem_pio2+0x1a8>
 80151de:	bf00      	nop
	...
 80151ec:	3ff00000 	.word	0x3ff00000
 80151f0:	08016280 	.word	0x08016280
 80151f4:	40200000 	.word	0x40200000
 80151f8:	3ff00000 	.word	0x3ff00000
 80151fc:	3e700000 	.word	0x3e700000
 8015200:	41700000 	.word	0x41700000
 8015204:	3fe00000 	.word	0x3fe00000
 8015208:	08016240 	.word	0x08016240
 801520c:	f854 3b04 	ldr.w	r3, [r4], #4
 8015210:	b945      	cbnz	r5, 8015224 <__kernel_rem_pio2+0x344>
 8015212:	b123      	cbz	r3, 801521e <__kernel_rem_pio2+0x33e>
 8015214:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8015218:	f844 3c04 	str.w	r3, [r4, #-4]
 801521c:	2301      	movs	r3, #1
 801521e:	3201      	adds	r2, #1
 8015220:	461d      	mov	r5, r3
 8015222:	e738      	b.n	8015096 <__kernel_rem_pio2+0x1b6>
 8015224:	1acb      	subs	r3, r1, r3
 8015226:	e7f7      	b.n	8015218 <__kernel_rem_pio2+0x338>
 8015228:	f108 32ff 	add.w	r2, r8, #4294967295
 801522c:	ab0c      	add	r3, sp, #48	@ 0x30
 801522e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015232:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015236:	a90c      	add	r1, sp, #48	@ 0x30
 8015238:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801523c:	e739      	b.n	80150b2 <__kernel_rem_pio2+0x1d2>
 801523e:	f108 32ff 	add.w	r2, r8, #4294967295
 8015242:	ab0c      	add	r3, sp, #48	@ 0x30
 8015244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015248:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801524c:	e7f3      	b.n	8015236 <__kernel_rem_pio2+0x356>
 801524e:	a90c      	add	r1, sp, #48	@ 0x30
 8015250:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015254:	3b01      	subs	r3, #1
 8015256:	430a      	orrs	r2, r1
 8015258:	e787      	b.n	801516a <__kernel_rem_pio2+0x28a>
 801525a:	3401      	adds	r4, #1
 801525c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015260:	2a00      	cmp	r2, #0
 8015262:	d0fa      	beq.n	801525a <__kernel_rem_pio2+0x37a>
 8015264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015266:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801526a:	eb0d 0503 	add.w	r5, sp, r3
 801526e:	9b06      	ldr	r3, [sp, #24]
 8015270:	aa20      	add	r2, sp, #128	@ 0x80
 8015272:	4443      	add	r3, r8
 8015274:	f108 0701 	add.w	r7, r8, #1
 8015278:	3d98      	subs	r5, #152	@ 0x98
 801527a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801527e:	4444      	add	r4, r8
 8015280:	42bc      	cmp	r4, r7
 8015282:	da04      	bge.n	801528e <__kernel_rem_pio2+0x3ae>
 8015284:	46a0      	mov	r8, r4
 8015286:	e6a2      	b.n	8014fce <__kernel_rem_pio2+0xee>
 8015288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801528a:	2401      	movs	r4, #1
 801528c:	e7e6      	b.n	801525c <__kernel_rem_pio2+0x37c>
 801528e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015290:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8015294:	f7eb f966 	bl	8000564 <__aeabi_i2d>
 8015298:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8015560 <__kernel_rem_pio2+0x680>
 801529c:	e8e6 0102 	strd	r0, r1, [r6], #8
 80152a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80152a8:	46b2      	mov	sl, r6
 80152aa:	f04f 0800 	mov.w	r8, #0
 80152ae:	9b05      	ldr	r3, [sp, #20]
 80152b0:	4598      	cmp	r8, r3
 80152b2:	dd05      	ble.n	80152c0 <__kernel_rem_pio2+0x3e0>
 80152b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152b8:	3701      	adds	r7, #1
 80152ba:	eca5 7b02 	vstmia	r5!, {d7}
 80152be:	e7df      	b.n	8015280 <__kernel_rem_pio2+0x3a0>
 80152c0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80152c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80152c8:	f7eb f9b6 	bl	8000638 <__aeabi_dmul>
 80152cc:	4602      	mov	r2, r0
 80152ce:	460b      	mov	r3, r1
 80152d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152d4:	f7ea fffa 	bl	80002cc <__adddf3>
 80152d8:	f108 0801 	add.w	r8, r8, #1
 80152dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152e0:	e7e5      	b.n	80152ae <__kernel_rem_pio2+0x3ce>
 80152e2:	f1cb 0000 	rsb	r0, fp, #0
 80152e6:	ec47 6b10 	vmov	d0, r6, r7
 80152ea:	f000 f951 	bl	8015590 <scalbn>
 80152ee:	ec55 4b10 	vmov	r4, r5, d0
 80152f2:	4b9d      	ldr	r3, [pc, #628]	@ (8015568 <__kernel_rem_pio2+0x688>)
 80152f4:	2200      	movs	r2, #0
 80152f6:	4620      	mov	r0, r4
 80152f8:	4629      	mov	r1, r5
 80152fa:	f7eb fc23 	bl	8000b44 <__aeabi_dcmpge>
 80152fe:	b300      	cbz	r0, 8015342 <__kernel_rem_pio2+0x462>
 8015300:	4b9a      	ldr	r3, [pc, #616]	@ (801556c <__kernel_rem_pio2+0x68c>)
 8015302:	2200      	movs	r2, #0
 8015304:	4620      	mov	r0, r4
 8015306:	4629      	mov	r1, r5
 8015308:	f7eb f996 	bl	8000638 <__aeabi_dmul>
 801530c:	f7eb fc44 	bl	8000b98 <__aeabi_d2iz>
 8015310:	4606      	mov	r6, r0
 8015312:	f7eb f927 	bl	8000564 <__aeabi_i2d>
 8015316:	4b94      	ldr	r3, [pc, #592]	@ (8015568 <__kernel_rem_pio2+0x688>)
 8015318:	2200      	movs	r2, #0
 801531a:	f7eb f98d 	bl	8000638 <__aeabi_dmul>
 801531e:	460b      	mov	r3, r1
 8015320:	4602      	mov	r2, r0
 8015322:	4629      	mov	r1, r5
 8015324:	4620      	mov	r0, r4
 8015326:	f7ea ffcf 	bl	80002c8 <__aeabi_dsub>
 801532a:	f7eb fc35 	bl	8000b98 <__aeabi_d2iz>
 801532e:	ab0c      	add	r3, sp, #48	@ 0x30
 8015330:	f10b 0b18 	add.w	fp, fp, #24
 8015334:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015338:	f108 0801 	add.w	r8, r8, #1
 801533c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8015340:	e722      	b.n	8015188 <__kernel_rem_pio2+0x2a8>
 8015342:	4620      	mov	r0, r4
 8015344:	4629      	mov	r1, r5
 8015346:	f7eb fc27 	bl	8000b98 <__aeabi_d2iz>
 801534a:	ab0c      	add	r3, sp, #48	@ 0x30
 801534c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015350:	e71a      	b.n	8015188 <__kernel_rem_pio2+0x2a8>
 8015352:	ab0c      	add	r3, sp, #48	@ 0x30
 8015354:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015358:	f7eb f904 	bl	8000564 <__aeabi_i2d>
 801535c:	4622      	mov	r2, r4
 801535e:	462b      	mov	r3, r5
 8015360:	f7eb f96a 	bl	8000638 <__aeabi_dmul>
 8015364:	4652      	mov	r2, sl
 8015366:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801536a:	465b      	mov	r3, fp
 801536c:	4620      	mov	r0, r4
 801536e:	4629      	mov	r1, r5
 8015370:	f7eb f962 	bl	8000638 <__aeabi_dmul>
 8015374:	3e01      	subs	r6, #1
 8015376:	4604      	mov	r4, r0
 8015378:	460d      	mov	r5, r1
 801537a:	e718      	b.n	80151ae <__kernel_rem_pio2+0x2ce>
 801537c:	9906      	ldr	r1, [sp, #24]
 801537e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8015382:	9106      	str	r1, [sp, #24]
 8015384:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8015388:	f7eb f956 	bl	8000638 <__aeabi_dmul>
 801538c:	4602      	mov	r2, r0
 801538e:	460b      	mov	r3, r1
 8015390:	4650      	mov	r0, sl
 8015392:	4659      	mov	r1, fp
 8015394:	f7ea ff9a 	bl	80002cc <__adddf3>
 8015398:	3601      	adds	r6, #1
 801539a:	4682      	mov	sl, r0
 801539c:	468b      	mov	fp, r1
 801539e:	9b00      	ldr	r3, [sp, #0]
 80153a0:	429e      	cmp	r6, r3
 80153a2:	dc01      	bgt.n	80153a8 <__kernel_rem_pio2+0x4c8>
 80153a4:	42b5      	cmp	r5, r6
 80153a6:	dae9      	bge.n	801537c <__kernel_rem_pio2+0x49c>
 80153a8:	ab48      	add	r3, sp, #288	@ 0x120
 80153aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80153ae:	e9c5 ab00 	strd	sl, fp, [r5]
 80153b2:	3c01      	subs	r4, #1
 80153b4:	e6ff      	b.n	80151b6 <__kernel_rem_pio2+0x2d6>
 80153b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80153b8:	2b02      	cmp	r3, #2
 80153ba:	dc0b      	bgt.n	80153d4 <__kernel_rem_pio2+0x4f4>
 80153bc:	2b00      	cmp	r3, #0
 80153be:	dc39      	bgt.n	8015434 <__kernel_rem_pio2+0x554>
 80153c0:	d05d      	beq.n	801547e <__kernel_rem_pio2+0x59e>
 80153c2:	9b02      	ldr	r3, [sp, #8]
 80153c4:	f003 0007 	and.w	r0, r3, #7
 80153c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80153cc:	ecbd 8b02 	vpop	{d8}
 80153d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80153d6:	2b03      	cmp	r3, #3
 80153d8:	d1f3      	bne.n	80153c2 <__kernel_rem_pio2+0x4e2>
 80153da:	9b05      	ldr	r3, [sp, #20]
 80153dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80153e0:	eb0d 0403 	add.w	r4, sp, r3
 80153e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80153e8:	4625      	mov	r5, r4
 80153ea:	46c2      	mov	sl, r8
 80153ec:	f1ba 0f00 	cmp.w	sl, #0
 80153f0:	f1a5 0508 	sub.w	r5, r5, #8
 80153f4:	dc6b      	bgt.n	80154ce <__kernel_rem_pio2+0x5ee>
 80153f6:	4645      	mov	r5, r8
 80153f8:	2d01      	cmp	r5, #1
 80153fa:	f1a4 0408 	sub.w	r4, r4, #8
 80153fe:	f300 8087 	bgt.w	8015510 <__kernel_rem_pio2+0x630>
 8015402:	9c05      	ldr	r4, [sp, #20]
 8015404:	ab48      	add	r3, sp, #288	@ 0x120
 8015406:	441c      	add	r4, r3
 8015408:	2000      	movs	r0, #0
 801540a:	2100      	movs	r1, #0
 801540c:	f1b8 0f01 	cmp.w	r8, #1
 8015410:	f300 809c 	bgt.w	801554c <__kernel_rem_pio2+0x66c>
 8015414:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8015418:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801541c:	f1b9 0f00 	cmp.w	r9, #0
 8015420:	f040 80a6 	bne.w	8015570 <__kernel_rem_pio2+0x690>
 8015424:	9b04      	ldr	r3, [sp, #16]
 8015426:	e9c3 7800 	strd	r7, r8, [r3]
 801542a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801542e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015432:	e7c6      	b.n	80153c2 <__kernel_rem_pio2+0x4e2>
 8015434:	9d05      	ldr	r5, [sp, #20]
 8015436:	ab48      	add	r3, sp, #288	@ 0x120
 8015438:	441d      	add	r5, r3
 801543a:	4644      	mov	r4, r8
 801543c:	2000      	movs	r0, #0
 801543e:	2100      	movs	r1, #0
 8015440:	2c00      	cmp	r4, #0
 8015442:	da35      	bge.n	80154b0 <__kernel_rem_pio2+0x5d0>
 8015444:	f1b9 0f00 	cmp.w	r9, #0
 8015448:	d038      	beq.n	80154bc <__kernel_rem_pio2+0x5dc>
 801544a:	4602      	mov	r2, r0
 801544c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015450:	9c04      	ldr	r4, [sp, #16]
 8015452:	e9c4 2300 	strd	r2, r3, [r4]
 8015456:	4602      	mov	r2, r0
 8015458:	460b      	mov	r3, r1
 801545a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801545e:	f7ea ff33 	bl	80002c8 <__aeabi_dsub>
 8015462:	ad4a      	add	r5, sp, #296	@ 0x128
 8015464:	2401      	movs	r4, #1
 8015466:	45a0      	cmp	r8, r4
 8015468:	da2b      	bge.n	80154c2 <__kernel_rem_pio2+0x5e2>
 801546a:	f1b9 0f00 	cmp.w	r9, #0
 801546e:	d002      	beq.n	8015476 <__kernel_rem_pio2+0x596>
 8015470:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015474:	4619      	mov	r1, r3
 8015476:	9b04      	ldr	r3, [sp, #16]
 8015478:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801547c:	e7a1      	b.n	80153c2 <__kernel_rem_pio2+0x4e2>
 801547e:	9c05      	ldr	r4, [sp, #20]
 8015480:	ab48      	add	r3, sp, #288	@ 0x120
 8015482:	441c      	add	r4, r3
 8015484:	2000      	movs	r0, #0
 8015486:	2100      	movs	r1, #0
 8015488:	f1b8 0f00 	cmp.w	r8, #0
 801548c:	da09      	bge.n	80154a2 <__kernel_rem_pio2+0x5c2>
 801548e:	f1b9 0f00 	cmp.w	r9, #0
 8015492:	d002      	beq.n	801549a <__kernel_rem_pio2+0x5ba>
 8015494:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015498:	4619      	mov	r1, r3
 801549a:	9b04      	ldr	r3, [sp, #16]
 801549c:	e9c3 0100 	strd	r0, r1, [r3]
 80154a0:	e78f      	b.n	80153c2 <__kernel_rem_pio2+0x4e2>
 80154a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80154a6:	f7ea ff11 	bl	80002cc <__adddf3>
 80154aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80154ae:	e7eb      	b.n	8015488 <__kernel_rem_pio2+0x5a8>
 80154b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80154b4:	f7ea ff0a 	bl	80002cc <__adddf3>
 80154b8:	3c01      	subs	r4, #1
 80154ba:	e7c1      	b.n	8015440 <__kernel_rem_pio2+0x560>
 80154bc:	4602      	mov	r2, r0
 80154be:	460b      	mov	r3, r1
 80154c0:	e7c6      	b.n	8015450 <__kernel_rem_pio2+0x570>
 80154c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80154c6:	f7ea ff01 	bl	80002cc <__adddf3>
 80154ca:	3401      	adds	r4, #1
 80154cc:	e7cb      	b.n	8015466 <__kernel_rem_pio2+0x586>
 80154ce:	ed95 7b00 	vldr	d7, [r5]
 80154d2:	ed8d 7b00 	vstr	d7, [sp]
 80154d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80154da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154de:	ec53 2b17 	vmov	r2, r3, d7
 80154e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80154e6:	f7ea fef1 	bl	80002cc <__adddf3>
 80154ea:	4602      	mov	r2, r0
 80154ec:	460b      	mov	r3, r1
 80154ee:	4606      	mov	r6, r0
 80154f0:	460f      	mov	r7, r1
 80154f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154f6:	f7ea fee7 	bl	80002c8 <__aeabi_dsub>
 80154fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80154fe:	f7ea fee5 	bl	80002cc <__adddf3>
 8015502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015506:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801550a:	e9c5 6700 	strd	r6, r7, [r5]
 801550e:	e76d      	b.n	80153ec <__kernel_rem_pio2+0x50c>
 8015510:	ed94 7b00 	vldr	d7, [r4]
 8015514:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8015518:	ec51 0b17 	vmov	r0, r1, d7
 801551c:	4652      	mov	r2, sl
 801551e:	465b      	mov	r3, fp
 8015520:	ed8d 7b00 	vstr	d7, [sp]
 8015524:	f7ea fed2 	bl	80002cc <__adddf3>
 8015528:	4602      	mov	r2, r0
 801552a:	460b      	mov	r3, r1
 801552c:	4606      	mov	r6, r0
 801552e:	460f      	mov	r7, r1
 8015530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015534:	f7ea fec8 	bl	80002c8 <__aeabi_dsub>
 8015538:	4652      	mov	r2, sl
 801553a:	465b      	mov	r3, fp
 801553c:	f7ea fec6 	bl	80002cc <__adddf3>
 8015540:	3d01      	subs	r5, #1
 8015542:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015546:	e9c4 6700 	strd	r6, r7, [r4]
 801554a:	e755      	b.n	80153f8 <__kernel_rem_pio2+0x518>
 801554c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015550:	f7ea febc 	bl	80002cc <__adddf3>
 8015554:	f108 38ff 	add.w	r8, r8, #4294967295
 8015558:	e758      	b.n	801540c <__kernel_rem_pio2+0x52c>
 801555a:	bf00      	nop
 801555c:	f3af 8000 	nop.w
	...
 8015568:	41700000 	.word	0x41700000
 801556c:	3e700000 	.word	0x3e700000
 8015570:	9b04      	ldr	r3, [sp, #16]
 8015572:	9a04      	ldr	r2, [sp, #16]
 8015574:	601f      	str	r7, [r3, #0]
 8015576:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801557a:	605c      	str	r4, [r3, #4]
 801557c:	609d      	str	r5, [r3, #8]
 801557e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015582:	60d3      	str	r3, [r2, #12]
 8015584:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015588:	6110      	str	r0, [r2, #16]
 801558a:	6153      	str	r3, [r2, #20]
 801558c:	e719      	b.n	80153c2 <__kernel_rem_pio2+0x4e2>
 801558e:	bf00      	nop

08015590 <scalbn>:
 8015590:	b570      	push	{r4, r5, r6, lr}
 8015592:	ec55 4b10 	vmov	r4, r5, d0
 8015596:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801559a:	4606      	mov	r6, r0
 801559c:	462b      	mov	r3, r5
 801559e:	b991      	cbnz	r1, 80155c6 <scalbn+0x36>
 80155a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80155a4:	4323      	orrs	r3, r4
 80155a6:	d03d      	beq.n	8015624 <scalbn+0x94>
 80155a8:	4b35      	ldr	r3, [pc, #212]	@ (8015680 <scalbn+0xf0>)
 80155aa:	4620      	mov	r0, r4
 80155ac:	4629      	mov	r1, r5
 80155ae:	2200      	movs	r2, #0
 80155b0:	f7eb f842 	bl	8000638 <__aeabi_dmul>
 80155b4:	4b33      	ldr	r3, [pc, #204]	@ (8015684 <scalbn+0xf4>)
 80155b6:	429e      	cmp	r6, r3
 80155b8:	4604      	mov	r4, r0
 80155ba:	460d      	mov	r5, r1
 80155bc:	da0f      	bge.n	80155de <scalbn+0x4e>
 80155be:	a328      	add	r3, pc, #160	@ (adr r3, 8015660 <scalbn+0xd0>)
 80155c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c4:	e01e      	b.n	8015604 <scalbn+0x74>
 80155c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80155ca:	4291      	cmp	r1, r2
 80155cc:	d10b      	bne.n	80155e6 <scalbn+0x56>
 80155ce:	4622      	mov	r2, r4
 80155d0:	4620      	mov	r0, r4
 80155d2:	4629      	mov	r1, r5
 80155d4:	f7ea fe7a 	bl	80002cc <__adddf3>
 80155d8:	4604      	mov	r4, r0
 80155da:	460d      	mov	r5, r1
 80155dc:	e022      	b.n	8015624 <scalbn+0x94>
 80155de:	460b      	mov	r3, r1
 80155e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80155e4:	3936      	subs	r1, #54	@ 0x36
 80155e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80155ea:	4296      	cmp	r6, r2
 80155ec:	dd0d      	ble.n	801560a <scalbn+0x7a>
 80155ee:	2d00      	cmp	r5, #0
 80155f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8015668 <scalbn+0xd8>)
 80155f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155f6:	da02      	bge.n	80155fe <scalbn+0x6e>
 80155f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8015670 <scalbn+0xe0>)
 80155fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8015668 <scalbn+0xd8>)
 8015600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015604:	f7eb f818 	bl	8000638 <__aeabi_dmul>
 8015608:	e7e6      	b.n	80155d8 <scalbn+0x48>
 801560a:	1872      	adds	r2, r6, r1
 801560c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015610:	428a      	cmp	r2, r1
 8015612:	dcec      	bgt.n	80155ee <scalbn+0x5e>
 8015614:	2a00      	cmp	r2, #0
 8015616:	dd08      	ble.n	801562a <scalbn+0x9a>
 8015618:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801561c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015620:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015624:	ec45 4b10 	vmov	d0, r4, r5
 8015628:	bd70      	pop	{r4, r5, r6, pc}
 801562a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801562e:	da08      	bge.n	8015642 <scalbn+0xb2>
 8015630:	2d00      	cmp	r5, #0
 8015632:	a10b      	add	r1, pc, #44	@ (adr r1, 8015660 <scalbn+0xd0>)
 8015634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015638:	dac1      	bge.n	80155be <scalbn+0x2e>
 801563a:	a10f      	add	r1, pc, #60	@ (adr r1, 8015678 <scalbn+0xe8>)
 801563c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015640:	e7bd      	b.n	80155be <scalbn+0x2e>
 8015642:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015646:	3236      	adds	r2, #54	@ 0x36
 8015648:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801564c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015650:	4620      	mov	r0, r4
 8015652:	4b0d      	ldr	r3, [pc, #52]	@ (8015688 <scalbn+0xf8>)
 8015654:	4629      	mov	r1, r5
 8015656:	2200      	movs	r2, #0
 8015658:	e7d4      	b.n	8015604 <scalbn+0x74>
 801565a:	bf00      	nop
 801565c:	f3af 8000 	nop.w
 8015660:	c2f8f359 	.word	0xc2f8f359
 8015664:	01a56e1f 	.word	0x01a56e1f
 8015668:	8800759c 	.word	0x8800759c
 801566c:	7e37e43c 	.word	0x7e37e43c
 8015670:	8800759c 	.word	0x8800759c
 8015674:	fe37e43c 	.word	0xfe37e43c
 8015678:	c2f8f359 	.word	0xc2f8f359
 801567c:	81a56e1f 	.word	0x81a56e1f
 8015680:	43500000 	.word	0x43500000
 8015684:	ffff3cb0 	.word	0xffff3cb0
 8015688:	3c900000 	.word	0x3c900000
 801568c:	00000000 	.word	0x00000000

08015690 <floor>:
 8015690:	ec51 0b10 	vmov	r0, r1, d0
 8015694:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801569c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80156a0:	2e13      	cmp	r6, #19
 80156a2:	460c      	mov	r4, r1
 80156a4:	4605      	mov	r5, r0
 80156a6:	4680      	mov	r8, r0
 80156a8:	dc34      	bgt.n	8015714 <floor+0x84>
 80156aa:	2e00      	cmp	r6, #0
 80156ac:	da17      	bge.n	80156de <floor+0x4e>
 80156ae:	a332      	add	r3, pc, #200	@ (adr r3, 8015778 <floor+0xe8>)
 80156b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b4:	f7ea fe0a 	bl	80002cc <__adddf3>
 80156b8:	2200      	movs	r2, #0
 80156ba:	2300      	movs	r3, #0
 80156bc:	f7eb fa4c 	bl	8000b58 <__aeabi_dcmpgt>
 80156c0:	b150      	cbz	r0, 80156d8 <floor+0x48>
 80156c2:	2c00      	cmp	r4, #0
 80156c4:	da55      	bge.n	8015772 <floor+0xe2>
 80156c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80156ca:	432c      	orrs	r4, r5
 80156cc:	2500      	movs	r5, #0
 80156ce:	42ac      	cmp	r4, r5
 80156d0:	4c2b      	ldr	r4, [pc, #172]	@ (8015780 <floor+0xf0>)
 80156d2:	bf08      	it	eq
 80156d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80156d8:	4621      	mov	r1, r4
 80156da:	4628      	mov	r0, r5
 80156dc:	e023      	b.n	8015726 <floor+0x96>
 80156de:	4f29      	ldr	r7, [pc, #164]	@ (8015784 <floor+0xf4>)
 80156e0:	4137      	asrs	r7, r6
 80156e2:	ea01 0307 	and.w	r3, r1, r7
 80156e6:	4303      	orrs	r3, r0
 80156e8:	d01d      	beq.n	8015726 <floor+0x96>
 80156ea:	a323      	add	r3, pc, #140	@ (adr r3, 8015778 <floor+0xe8>)
 80156ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f0:	f7ea fdec 	bl	80002cc <__adddf3>
 80156f4:	2200      	movs	r2, #0
 80156f6:	2300      	movs	r3, #0
 80156f8:	f7eb fa2e 	bl	8000b58 <__aeabi_dcmpgt>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d0eb      	beq.n	80156d8 <floor+0x48>
 8015700:	2c00      	cmp	r4, #0
 8015702:	bfbe      	ittt	lt
 8015704:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8015708:	4133      	asrlt	r3, r6
 801570a:	18e4      	addlt	r4, r4, r3
 801570c:	ea24 0407 	bic.w	r4, r4, r7
 8015710:	2500      	movs	r5, #0
 8015712:	e7e1      	b.n	80156d8 <floor+0x48>
 8015714:	2e33      	cmp	r6, #51	@ 0x33
 8015716:	dd0a      	ble.n	801572e <floor+0x9e>
 8015718:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801571c:	d103      	bne.n	8015726 <floor+0x96>
 801571e:	4602      	mov	r2, r0
 8015720:	460b      	mov	r3, r1
 8015722:	f7ea fdd3 	bl	80002cc <__adddf3>
 8015726:	ec41 0b10 	vmov	d0, r0, r1
 801572a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801572e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8015732:	f04f 37ff 	mov.w	r7, #4294967295
 8015736:	40df      	lsrs	r7, r3
 8015738:	4207      	tst	r7, r0
 801573a:	d0f4      	beq.n	8015726 <floor+0x96>
 801573c:	a30e      	add	r3, pc, #56	@ (adr r3, 8015778 <floor+0xe8>)
 801573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015742:	f7ea fdc3 	bl	80002cc <__adddf3>
 8015746:	2200      	movs	r2, #0
 8015748:	2300      	movs	r3, #0
 801574a:	f7eb fa05 	bl	8000b58 <__aeabi_dcmpgt>
 801574e:	2800      	cmp	r0, #0
 8015750:	d0c2      	beq.n	80156d8 <floor+0x48>
 8015752:	2c00      	cmp	r4, #0
 8015754:	da0a      	bge.n	801576c <floor+0xdc>
 8015756:	2e14      	cmp	r6, #20
 8015758:	d101      	bne.n	801575e <floor+0xce>
 801575a:	3401      	adds	r4, #1
 801575c:	e006      	b.n	801576c <floor+0xdc>
 801575e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8015762:	2301      	movs	r3, #1
 8015764:	40b3      	lsls	r3, r6
 8015766:	441d      	add	r5, r3
 8015768:	4545      	cmp	r5, r8
 801576a:	d3f6      	bcc.n	801575a <floor+0xca>
 801576c:	ea25 0507 	bic.w	r5, r5, r7
 8015770:	e7b2      	b.n	80156d8 <floor+0x48>
 8015772:	2500      	movs	r5, #0
 8015774:	462c      	mov	r4, r5
 8015776:	e7af      	b.n	80156d8 <floor+0x48>
 8015778:	8800759c 	.word	0x8800759c
 801577c:	7e37e43c 	.word	0x7e37e43c
 8015780:	bff00000 	.word	0xbff00000
 8015784:	000fffff 	.word	0x000fffff

08015788 <_init>:
 8015788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801578a:	bf00      	nop
 801578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801578e:	bc08      	pop	{r3}
 8015790:	469e      	mov	lr, r3
 8015792:	4770      	bx	lr

08015794 <_fini>:
 8015794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015796:	bf00      	nop
 8015798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801579a:	bc08      	pop	{r3}
 801579c:	469e      	mov	lr, r3
 801579e:	4770      	bx	lr
