
canf446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003acc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003c9c  08003c9c  00004c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d8c  08003d8c  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003d8c  08003d8c  00004d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d94  08003d94  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d98  08003d98  00004d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003d9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000068  08003e04  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003e04  00005250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000755a  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f5  00000000  00000000  0000c5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000530  00000000  00000000  0000e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d4d  00000000  00000000  0000ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d77  00000000  00000000  0003097d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca23f  00000000  00000000  000396f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000248c  00000000  00000000  00103978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  00105e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c84 	.word	0x08003c84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003c84 	.word	0x08003c84

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_GPIO_EXTI_Callback>:

uint32_t TxMailbox;
int datacheck = 0;
int sendDataFlag = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005b0:	d109      	bne.n	80005c6 <HAL_GPIO_EXTI_Callback+0x26>
    {
        sendDataFlag = !sendDataFlag;  // Đảo trạng thái gửi dữ liệu (Bật/Tắt)
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x64>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf0c      	ite	eq
 80005ba:	2301      	moveq	r3, #1
 80005bc:	2300      	movne	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x64>)
 80005c4:	601a      	str	r2, [r3, #0]
    }

    if (sendDataFlag)
 80005c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x64>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d016      	beq.n	80005fc <HAL_GPIO_EXTI_Callback+0x5c>
    {
        // Randomize dữ liệu
        for (int i = 0; i < 8; i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	e010      	b.n	80005f6 <HAL_GPIO_EXTI_Callback+0x56>
        {
            TxData[i] = rand() % 256;  // Gửi giá trị ngẫu nhiên từ 0 đến 255
 80005d4:	f002 fb78 	bl	8002cc8 <rand>
 80005d8:	4603      	mov	r3, r0
 80005da:	425a      	negs	r2, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	b2d2      	uxtb	r2, r2
 80005e0:	bf58      	it	pl
 80005e2:	4253      	negpl	r3, r2
 80005e4:	b2d9      	uxtb	r1, r3
 80005e6:	4a08      	ldr	r2, [pc, #32]	@ (8000608 <HAL_GPIO_EXTI_Callback+0x68>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	460a      	mov	r2, r1
 80005ee:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 8; i++)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3301      	adds	r3, #1
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	ddeb      	ble.n	80005d4 <HAL_GPIO_EXTI_Callback+0x34>
        }
    }
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000f8 	.word	0x200000f8
 8000608:	200000e0 	.word	0x200000e0

0800060c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if (hcan->Instance == CAN1)  // Kiểm tra đúng CAN1
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d10c      	bne.n	8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
	{
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000620:	4a09      	ldr	r2, [pc, #36]	@ (8000648 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000622:	2100      	movs	r1, #0
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 fee1 	bl	80013ec <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 8)
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d102      	bne.n	8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
	{
		datacheck = 1;
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000634:	2201      	movs	r2, #1
 8000636:	601a      	str	r2, [r3, #0]
	}
}
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40006400 	.word	0x40006400
 8000644:	200000e8 	.word	0x200000e8
 8000648:	200000c4 	.word	0x200000c4
 800064c:	200000f4 	.word	0x200000f4

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fb43 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f853 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f915 	bl	800088c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000662:	f000 f8c1 	bl	80007e8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000666:	481f      	ldr	r0, [pc, #124]	@ (80006e4 <main+0x94>)
 8000668:	f000 fdac 	bl	80011c4 <HAL_CAN_Start>
  //Thongbao
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800066c:	2102      	movs	r1, #2
 800066e:	481d      	ldr	r0, [pc, #116]	@ (80006e4 <main+0x94>)
 8000670:	f000 ffde 	bl	8001630 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 8;
 8000674:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <main+0x98>)
 8000676:	2208      	movs	r2, #8
 8000678:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800067a:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <main+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <main+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <main+0x98>)
 8000688:	f240 4246 	movw	r2, #1094	@ 0x446
 800068c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (sendDataFlag)
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <main+0x9c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d009      	beq.n	80006aa <main+0x5a>
	  	      {
	  	        HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <main+0xa0>)
 8000698:	4a16      	ldr	r2, [pc, #88]	@ (80006f4 <main+0xa4>)
 800069a:	4913      	ldr	r1, [pc, #76]	@ (80006e8 <main+0x98>)
 800069c:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <main+0x94>)
 800069e:	f000 fdd5 	bl	800124c <HAL_CAN_AddTxMessage>
	  	        HAL_Delay(2000);  // Gửi mỗi 2 giây
 80006a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006a6:	f000 fb8d 	bl	8000dc4 <HAL_Delay>
	  	      }
	  	  if (datacheck)
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <main+0xa8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0ed      	beq.n	800068e <main+0x3e>
	  	  {
	  		 //blink led
	  		  for (int i=0; i<RxData[1]; i++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	e00b      	b.n	80006d0 <main+0x80>
	  		  {
	  			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006b8:	2120      	movs	r1, #32
 80006ba:	4810      	ldr	r0, [pc, #64]	@ (80006fc <main+0xac>)
 80006bc:	f001 fccd 	bl	800205a <HAL_GPIO_TogglePin>
	  			  HAL_Delay(RxData[0]);
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <main+0xb0>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fb7d 	bl	8000dc4 <HAL_Delay>
	  		  for (int i=0; i<RxData[1]; i++)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <main+0xb0>)
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4293      	cmp	r3, r2
 80006da:	dbed      	blt.n	80006b8 <main+0x68>
	  		  }
	  		  datacheck = 0;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <main+0xa8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
	  if (sendDataFlag)
 80006e2:	e7d4      	b.n	800068e <main+0x3e>
 80006e4:	20000084 	.word	0x20000084
 80006e8:	200000ac 	.word	0x200000ac
 80006ec:	200000f8 	.word	0x200000f8
 80006f0:	200000f0 	.word	0x200000f0
 80006f4:	200000e0 	.word	0x200000e0
 80006f8:	200000f4 	.word	0x200000f4
 80006fc:	40020000 	.word	0x40020000
 8000700:	200000e8 	.word	0x200000e8

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	@ 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fc1b 	bl	8002f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemClock_Config+0xdc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a2b      	ldr	r2, [pc, #172]	@ (80007e0 <SystemClock_Config+0xdc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemClock_Config+0xdc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <SystemClock_Config+0xe0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a25      	ldr	r2, [pc, #148]	@ (80007e4 <SystemClock_Config+0xe0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <SystemClock_Config+0xe0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000768:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000778:	23b4      	movs	r3, #180	@ 0xb4
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fffd 	bl	800278c <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000798:	f000 f8e0 	bl	800095c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800079c:	f001 fc90 	bl	80020c0 <HAL_PWREx_EnableOverDrive>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007a6:	f000 f8d9 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2105      	movs	r1, #5
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fcc9 	bl	8002160 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007d4:	f000 f8c2 	bl	800095c <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	@ 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <MX_CAN1_Init+0x9c>)
 80007f0:	4a25      	ldr	r2, [pc, #148]	@ (8000888 <MX_CAN1_Init+0xa0>)
 80007f2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <MX_CAN1_Init+0x9c>)
 80007f6:	2212      	movs	r2, #18
 80007f8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <MX_CAN1_Init+0x9c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_CAN1_Init+0x9c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_CAN1_Init+0x9c>)
 8000808:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800080c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_CAN1_Init+0x9c>)
 8000810:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000814:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_CAN1_Init+0x9c>)
 8000818:	2200      	movs	r2, #0
 800081a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_CAN1_Init+0x9c>)
 800081e:	2200      	movs	r2, #0
 8000820:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_CAN1_Init+0x9c>)
 8000824:	2200      	movs	r2, #0
 8000826:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_CAN1_Init+0x9c>)
 800082a:	2200      	movs	r2, #0
 800082c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_CAN1_Init+0x9c>)
 8000830:	2200      	movs	r2, #0
 8000832:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_CAN1_Init+0x9c>)
 8000836:	2200      	movs	r2, #0
 8000838:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <MX_CAN1_Init+0x9c>)
 800083c:	f000 fae6 	bl	8000e0c <HAL_CAN_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000846:	f000 f889 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 800084e:	230a      	movs	r3, #10
 8000850:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0000;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0000;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;
 800086e:	2314      	movs	r3, #20
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4803      	ldr	r0, [pc, #12]	@ (8000884 <MX_CAN1_Init+0x9c>)
 8000878:	f000 fbc4 	bl	8001004 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	@ 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000084 	.word	0x20000084
 8000888:	40006400 	.word	0x40006400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a29      	ldr	r2, [pc, #164]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	4816      	ldr	r0, [pc, #88]	@ (8000954 <MX_GPIO_Init+0xc8>)
 80008fc:	f001 fb94 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000906:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	4810      	ldr	r0, [pc, #64]	@ (8000958 <MX_GPIO_Init+0xcc>)
 8000918:	f001 f9f2 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800091c:	2320      	movs	r3, #32
 800091e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	4808      	ldr	r0, [pc, #32]	@ (8000954 <MX_GPIO_Init+0xc8>)
 8000934:	f001 f9e4 	bl	8001d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2028      	movs	r0, #40	@ 0x28
 800093e:	f001 f9a8 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000942:	2028      	movs	r0, #40	@ 0x28
 8000944:	f001 f9c1 	bl	8001cca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000
 8000958:	40020800 	.word	0x40020800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097c:	6453      	str	r3, [r2, #68]	@ 0x44
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	@ 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a6:	2007      	movs	r0, #7
 80009a8:	f001 f968 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <HAL_CAN_MspInit+0x94>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d134      	bne.n	8000a44 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <HAL_CAN_MspInit+0x98>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a50 <HAL_CAN_MspInit+0x98>)
 80009e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <HAL_CAN_MspInit+0x98>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_CAN_MspInit+0x98>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a14      	ldr	r2, [pc, #80]	@ (8000a50 <HAL_CAN_MspInit+0x98>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <HAL_CAN_MspInit+0x98>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a24:	2309      	movs	r3, #9
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <HAL_CAN_MspInit+0x9c>)
 8000a30:	f001 f966 	bl	8001d00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2014      	movs	r0, #20
 8000a3a:	f001 f92a 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a3e:	2014      	movs	r0, #20
 8000a40:	f001 f943 	bl	8001cca <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	@ 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40006400 	.word	0x40006400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aae:	f000 f969 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <CAN1_RX0_IRQHandler+0x10>)
 8000abe:	f000 fddd 	bl	800167c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000084 	.word	0x20000084

08000acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ad0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ad4:	f001 fadc 	bl	8002090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return 1;
 8000ae0:	2301      	movs	r3, #1
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_kill>:

int _kill(int pid, int sig)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000af6:	f002 fa79 	bl	8002fec <__errno>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2216      	movs	r2, #22
 8000afe:	601a      	str	r2, [r3, #0]
  return -1;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_exit>:

void _exit (int status)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffe7 	bl	8000aec <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b1e:	bf00      	nop
 8000b20:	e7fd      	b.n	8000b1e <_exit+0x12>

08000b22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e00a      	b.n	8000b4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b34:	f3af 8000 	nop.w
 8000b38:	4601      	mov	r1, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	60ba      	str	r2, [r7, #8]
 8000b40:	b2ca      	uxtb	r2, r1
 8000b42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	dbf0      	blt.n	8000b34 <_read+0x12>
  }

  return len;
 8000b52:	687b      	ldr	r3, [r7, #4]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e009      	b.n	8000b82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	60ba      	str	r2, [r7, #8]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	dbf1      	blt.n	8000b6e <_write+0x12>
  }
  return len;
 8000b8a:	687b      	ldr	r3, [r7, #4]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <_close>:

int _close(int file)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_isatty>:

int _isatty(int file)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f002 f9de 	bl	8002fec <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20020000 	.word	0x20020000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200000fc 	.word	0x200000fc
 8000c64:	20000250 	.word	0x20000250

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c90:	f7ff ffea 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f002 f99d 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fcc7 	bl	8000650 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cd0:	08003d9c 	.word	0x08003d9c
  ldr r2, =_sbss
 8000cd4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cd8:	20000250 	.word	0x20000250

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 ffb7 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe28 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 ffcf 	bl	8001ce6 <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 ff97 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	@ (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000100 	.word	0x20000100

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000100 	.word	0x20000100

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <HAL_Delay+0x44>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e0ed      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fdc4 	bl	80009b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e40:	f7ff ffb4 	bl	8000dac <HAL_GetTick>
 8000e44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e46:	e012      	b.n	8000e6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e48:	f7ff ffb0 	bl	8000dac <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	d90b      	bls.n	8000e6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2205      	movs	r2, #5
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e0c5      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0e5      	beq.n	8000e48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0202 	bic.w	r2, r2, #2
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e8c:	f7ff ff8e 	bl	8000dac <HAL_GetTick>
 8000e90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e92:	e012      	b.n	8000eba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e94:	f7ff ff8a 	bl	8000dac <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d90b      	bls.n	8000eba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e09f      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e5      	bne.n	8000e94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7e1b      	ldrb	r3, [r3, #24]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d108      	bne.n	8000ee2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e007      	b.n	8000ef2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7e5b      	ldrb	r3, [r3, #25]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d108      	bne.n	8000f0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7e9b      	ldrb	r3, [r3, #26]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d108      	bne.n	8000f36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0220 	orr.w	r2, r2, #32
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e007      	b.n	8000f46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0220 	bic.w	r2, r2, #32
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7edb      	ldrb	r3, [r3, #27]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d108      	bne.n	8000f60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0210 	bic.w	r2, r2, #16
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0210 	orr.w	r2, r2, #16
 8000f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7f1b      	ldrb	r3, [r3, #28]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0208 	orr.w	r2, r2, #8
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e007      	b.n	8000f9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0208 	bic.w	r2, r2, #8
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7f5b      	ldrb	r3, [r3, #29]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d108      	bne.n	8000fb4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0204 	orr.w	r2, r2, #4
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e007      	b.n	8000fc4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0204 	bic.w	r2, r2, #4
 8000fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	ea42 0103 	orr.w	r1, r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800101c:	7cfb      	ldrb	r3, [r7, #19]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d003      	beq.n	800102a <HAL_CAN_ConfigFilter+0x26>
 8001022:	7cfb      	ldrb	r3, [r7, #19]
 8001024:	2b02      	cmp	r3, #2
 8001026:	f040 80be 	bne.w	80011a6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800102a:	4b65      	ldr	r3, [pc, #404]	@ (80011c0 <HAL_CAN_ConfigFilter+0x1bc>)
 800102c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001044:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	431a      	orrs	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	2201      	movs	r2, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d123      	bne.n	80010d4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3248      	adds	r2, #72	@ 0x48
 80010b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ca:	6979      	ldr	r1, [r7, #20]
 80010cc:	3348      	adds	r3, #72	@ 0x48
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d122      	bne.n	8001122 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	431a      	orrs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3248      	adds	r2, #72	@ 0x48
 8001102:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001116:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001118:	6979      	ldr	r1, [r7, #20]
 800111a:	3348      	adds	r3, #72	@ 0x48
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	401a      	ands	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800113c:	e007      	b.n	800114e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	401a      	ands	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001168:	e007      	b.n	800117a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	431a      	orrs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001198:	f023 0201 	bic.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e006      	b.n	80011b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
  }
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40006400 	.word	0x40006400

080011c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d12e      	bne.n	8001236 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011f0:	f7ff fddc 	bl	8000dac <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011f6:	e012      	b.n	800121e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f8:	f7ff fdd8 	bl	8000dac <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b0a      	cmp	r3, #10
 8001204:	d90b      	bls.n	800121e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2205      	movs	r2, #5
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e012      	b.n	8001244 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e5      	bne.n	80011f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e006      	b.n	8001244 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
  }
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001260:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800126a:	7ffb      	ldrb	r3, [r7, #31]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d003      	beq.n	8001278 <HAL_CAN_AddTxMessage+0x2c>
 8001270:	7ffb      	ldrb	r3, [r7, #31]
 8001272:	2b02      	cmp	r3, #2
 8001274:	f040 80ad 	bne.w	80013d2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10a      	bne.n	8001298 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 8095 	beq.w	80013c2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	0e1b      	lsrs	r3, r3, #24
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012a2:	2201      	movs	r2, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10d      	bne.n	80012d0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012be:	68f9      	ldr	r1, [r7, #12]
 80012c0:	6809      	ldr	r1, [r1, #0]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3318      	adds	r3, #24
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	440b      	add	r3, r1
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e00f      	b.n	80012f0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012da:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e0:	68f9      	ldr	r1, [r7, #12]
 80012e2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012e4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3318      	adds	r3, #24
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	440b      	add	r3, r1
 80012ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3318      	adds	r3, #24
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	440b      	add	r3, r1
 8001300:	3304      	adds	r3, #4
 8001302:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	7d1b      	ldrb	r3, [r3, #20]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d111      	bne.n	8001330 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3318      	adds	r3, #24
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	3304      	adds	r3, #4
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	6811      	ldr	r1, [r2, #0]
 8001320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3318      	adds	r3, #24
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	440b      	add	r3, r1
 800132c:	3304      	adds	r3, #4
 800132e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3307      	adds	r3, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	061a      	lsls	r2, r3, #24
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3306      	adds	r3, #6
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3305      	adds	r3, #5
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	4313      	orrs	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	3204      	adds	r2, #4
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	4610      	mov	r0, r2
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	6811      	ldr	r1, [r2, #0]
 8001358:	ea43 0200 	orr.w	r2, r3, r0
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	440b      	add	r3, r1
 8001362:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001366:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3303      	adds	r3, #3
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	061a      	lsls	r2, r3, #24
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3302      	adds	r3, #2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	041b      	lsls	r3, r3, #16
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	4313      	orrs	r3, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	4610      	mov	r0, r2
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	6811      	ldr	r1, [r2, #0]
 800138e:	ea43 0200 	orr.w	r2, r3, r0
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	440b      	add	r3, r1
 8001398:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800139c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3318      	adds	r3, #24
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4413      	add	r3, r2
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	6811      	ldr	r1, [r2, #0]
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3318      	adds	r3, #24
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	440b      	add	r3, r1
 80013bc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e00e      	b.n	80013e0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e006      	b.n	80013e0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
  }
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3724      	adds	r7, #36	@ 0x24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001400:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d003      	beq.n	8001410 <HAL_CAN_GetRxMessage+0x24>
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b02      	cmp	r3, #2
 800140c:	f040 8103 	bne.w	8001616 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10e      	bne.n	8001434 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d116      	bne.n	8001452 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0f7      	b.n	8001624 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e0e8      	b.n	8001624 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	331b      	adds	r3, #27
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0204 	and.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10c      	bne.n	800148a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	331b      	adds	r3, #27
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0d5b      	lsrs	r3, r3, #21
 8001480:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e00b      	b.n	80014a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	331b      	adds	r3, #27
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	331b      	adds	r3, #27
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0202 	and.w	r2, r3, #2
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	331b      	adds	r3, #27
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	3304      	adds	r3, #4
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2208      	movs	r2, #8
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	e00b      	b.n	80014f0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	331b      	adds	r3, #27
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	3304      	adds	r3, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 020f 	and.w	r2, r3, #15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	331b      	adds	r3, #27
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4413      	add	r3, r2
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	b2da      	uxtb	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	331b      	adds	r3, #27
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0c1b      	lsrs	r3, r3, #16
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0a1a      	lsrs	r2, r3, #8
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0c1a      	lsrs	r2, r3, #16
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3302      	adds	r3, #2
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0e1a      	lsrs	r2, r3, #24
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3303      	adds	r3, #3
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4413      	add	r3, r2
 800158e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3304      	adds	r3, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0a1a      	lsrs	r2, r3, #8
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3305      	adds	r3, #5
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	0c1a      	lsrs	r2, r3, #16
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3306      	adds	r3, #6
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0e1a      	lsrs	r2, r3, #24
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3307      	adds	r3, #7
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d108      	bne.n	8001602 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	e007      	b.n	8001612 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e006      	b.n	8001624 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d002      	beq.n	800164e <HAL_CAN_ActivateNotification+0x1e>
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d109      	bne.n	8001662 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6959      	ldr	r1, [r3, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e006      	b.n	8001670 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
  }
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d07c      	beq.n	80017bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f983 	bl	80019ea <HAL_CAN_TxMailbox0CompleteCallback>
 80016e4:	e016      	b.n	8001714 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f8:	e00c      	b.n	8001714 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
 800170c:	e002      	b.n	8001714 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f989 	bl	8001a26 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d024      	beq.n	8001768 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001726:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f963 	bl	80019fe <HAL_CAN_TxMailbox1CompleteCallback>
 8001738:	e016      	b.n	8001768 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
 800174c:	e00c      	b.n	8001768 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001760:	e002      	b.n	8001768 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f969 	bl	8001a3a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d024      	beq.n	80017bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800177a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f943 	bl	8001a12 <HAL_CAN_TxMailbox2CompleteCallback>
 800178c:	e016      	b.n	80017bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a0:	e00c      	b.n	80017bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	e002      	b.n	80017bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f949 	bl	8001a4e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00c      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2210      	movs	r2, #16
 80017de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2208      	movs	r2, #8
 80017fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f930 	bl	8001a62 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7fe fef6 	bl	800060c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2208      	movs	r2, #8
 800185e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f912 	bl	8001a8a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8f9 	bl	8001a76 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f8fc 	bl	8001a9e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00b      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2208      	movs	r2, #8
 80018c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f8f5 	bl	8001ab2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d07b      	beq.n	80019ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d072      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001936:	2b00      	cmp	r3, #0
 8001938:	d043      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03e      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800194a:	2b60      	cmp	r3, #96	@ 0x60
 800194c:	d02b      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x32a>
 800194e:	2b60      	cmp	r3, #96	@ 0x60
 8001950:	d82e      	bhi.n	80019b0 <HAL_CAN_IRQHandler+0x334>
 8001952:	2b50      	cmp	r3, #80	@ 0x50
 8001954:	d022      	beq.n	800199c <HAL_CAN_IRQHandler+0x320>
 8001956:	2b50      	cmp	r3, #80	@ 0x50
 8001958:	d82a      	bhi.n	80019b0 <HAL_CAN_IRQHandler+0x334>
 800195a:	2b40      	cmp	r3, #64	@ 0x40
 800195c:	d019      	beq.n	8001992 <HAL_CAN_IRQHandler+0x316>
 800195e:	2b40      	cmp	r3, #64	@ 0x40
 8001960:	d826      	bhi.n	80019b0 <HAL_CAN_IRQHandler+0x334>
 8001962:	2b30      	cmp	r3, #48	@ 0x30
 8001964:	d010      	beq.n	8001988 <HAL_CAN_IRQHandler+0x30c>
 8001966:	2b30      	cmp	r3, #48	@ 0x30
 8001968:	d822      	bhi.n	80019b0 <HAL_CAN_IRQHandler+0x334>
 800196a:	2b10      	cmp	r3, #16
 800196c:	d002      	beq.n	8001974 <HAL_CAN_IRQHandler+0x2f8>
 800196e:	2b20      	cmp	r3, #32
 8001970:	d005      	beq.n	800197e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001972:	e01d      	b.n	80019b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800197c:	e019      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001986:	e014      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001990:	e00f      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800199a:	e00a      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a4:	e005      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019ae:	e000      	b.n	80019b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80019b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699a      	ldr	r2, [r3, #24]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2204      	movs	r2, #4
 80019c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f872 	bl	8001ac6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	@ 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	@ (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	@ (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	@ (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	@ (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	@ 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff29 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff3e 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff31 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffa2 	bl	8001c38 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e165      	b.n	8001fe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8154 	bne.w	8001fe2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d005      	beq.n	8001d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d130      	bne.n	8001db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d017      	beq.n	8001df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d123      	bne.n	8001e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80ae 	beq.w	8001fe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002000 <HAL_GPIO_Init+0x300>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002000 <HAL_GPIO_Init+0x300>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b5a      	ldr	r3, [pc, #360]	@ (8002000 <HAL_GPIO_Init+0x300>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea2:	4a58      	ldr	r2, [pc, #352]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8002008 <HAL_GPIO_Init+0x308>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d025      	beq.n	8001f1a <HAL_GPIO_Init+0x21a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800200c <HAL_GPIO_Init+0x30c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <HAL_GPIO_Init+0x216>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8002010 <HAL_GPIO_Init+0x310>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x212>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4c      	ldr	r2, [pc, #304]	@ (8002014 <HAL_GPIO_Init+0x314>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x20e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8002018 <HAL_GPIO_Init+0x318>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x20a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800201c <HAL_GPIO_Init+0x31c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x206>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a49      	ldr	r2, [pc, #292]	@ (8002020 <HAL_GPIO_Init+0x320>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x202>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e00c      	b.n	8001f1c <HAL_GPIO_Init+0x21c>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e00a      	b.n	8001f1c <HAL_GPIO_Init+0x21c>
 8001f06:	2305      	movs	r3, #5
 8001f08:	e008      	b.n	8001f1c <HAL_GPIO_Init+0x21c>
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x21c>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e004      	b.n	8001f1c <HAL_GPIO_Init+0x21c>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_Init+0x21c>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x21c>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f002 0203 	and.w	r2, r2, #3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4093      	lsls	r3, r2
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2c:	4935      	ldr	r1, [pc, #212]	@ (8002004 <HAL_GPIO_Init+0x304>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a31      	ldr	r2, [pc, #196]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b2f      	ldr	r3, [pc, #188]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a26      	ldr	r2, [pc, #152]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8e:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fdc:	4a11      	ldr	r2, [pc, #68]	@ (8002024 <HAL_GPIO_Init+0x324>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	f67f ae96 	bls.w	8001d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3724      	adds	r7, #36	@ 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40013800 	.word	0x40013800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	40020800 	.word	0x40020800
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40021000 	.word	0x40021000
 800201c:	40021400 	.word	0x40021400
 8002020:	40021800 	.word	0x40021800
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43d9      	mvns	r1, r3
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	400b      	ands	r3, r1
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	619a      	str	r2, [r3, #24]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa76 	bl	80005a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40013c00 	.word	0x40013c00

080020c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x90>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x90>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020da:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x90>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <HAL_PWREx_EnableOverDrive+0x94>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7fe fe5e 	bl	8000dac <HAL_GetTick>
 80020f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020f2:	e009      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020f4:	f7fe fe5a 	bl	8000dac <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002102:	d901      	bls.n	8002108 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e01f      	b.n	8002148 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x98>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d1ee      	bne.n	80020f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7fe fe46 	bl	8000dac <HAL_GetTick>
 8002120:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002122:	e009      	b.n	8002138 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002124:	f7fe fe42 	bl	8000dac <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002132:	d901      	bls.n	8002138 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e007      	b.n	8002148 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002138:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x98>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002144:	d1ee      	bne.n	8002124 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	420e0040 	.word	0x420e0040
 8002158:	40007000 	.word	0x40007000
 800215c:	420e0044 	.word	0x420e0044

08002160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0cc      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002174:	4b68      	ldr	r3, [pc, #416]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d90c      	bls.n	800219c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b65      	ldr	r3, [pc, #404]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b63      	ldr	r3, [pc, #396]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b8      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	4b59      	ldr	r3, [pc, #356]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a58      	ldr	r2, [pc, #352]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021cc:	4b53      	ldr	r3, [pc, #332]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a52      	ldr	r2, [pc, #328]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b50      	ldr	r3, [pc, #320]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	494d      	ldr	r1, [pc, #308]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d044      	beq.n	8002280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b47      	ldr	r3, [pc, #284]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d119      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d003      	beq.n	800221e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221a:	2b03      	cmp	r3, #3
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b3f      	ldr	r3, [pc, #252]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e067      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223e:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4934      	ldr	r1, [pc, #208]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002250:	f7fe fdac 	bl	8000dac <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	e00a      	b.n	800226e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f7fe fda8 	bl	8000dac <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e04f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 020c 	and.w	r2, r3, #12
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	429a      	cmp	r2, r3
 800227e:	d1eb      	bne.n	8002258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002280:	4b25      	ldr	r3, [pc, #148]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d20c      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e032      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4916      	ldr	r1, [pc, #88]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	490e      	ldr	r1, [pc, #56]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022e6:	f000 f821 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022ea:	4602      	mov	r2, r0
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	490a      	ldr	r1, [pc, #40]	@ (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	5ccb      	ldrb	r3, [r1, r3]
 80022fa:	fa22 f303 	lsr.w	r3, r2, r3
 80022fe:	4a09      	ldr	r2, [pc, #36]	@ (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fd0c 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00
 800231c:	40023800 	.word	0x40023800
 8002320:	08003c9c 	.word	0x08003c9c
 8002324:	20000000 	.word	0x20000000
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002330:	b0ae      	sub	sp, #184	@ 0xb8
 8002332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002352:	4bcb      	ldr	r3, [pc, #812]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b0c      	cmp	r3, #12
 800235c:	f200 8206 	bhi.w	800276c <HAL_RCC_GetSysClockFreq+0x440>
 8002360:	a201      	add	r2, pc, #4	@ (adr r2, 8002368 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	0800239d 	.word	0x0800239d
 800236c:	0800276d 	.word	0x0800276d
 8002370:	0800276d 	.word	0x0800276d
 8002374:	0800276d 	.word	0x0800276d
 8002378:	080023a5 	.word	0x080023a5
 800237c:	0800276d 	.word	0x0800276d
 8002380:	0800276d 	.word	0x0800276d
 8002384:	0800276d 	.word	0x0800276d
 8002388:	080023ad 	.word	0x080023ad
 800238c:	0800276d 	.word	0x0800276d
 8002390:	0800276d 	.word	0x0800276d
 8002394:	0800276d 	.word	0x0800276d
 8002398:	0800259d 	.word	0x0800259d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4bb9      	ldr	r3, [pc, #740]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x358>)
 800239e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023a2:	e1e7      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023a4:	4bb8      	ldr	r3, [pc, #736]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023aa:	e1e3      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ac:	4bb4      	ldr	r3, [pc, #720]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023b8:	4bb1      	ldr	r3, [pc, #708]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d071      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c4:	4bae      	ldr	r3, [pc, #696]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80023d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023ea:	4622      	mov	r2, r4
 80023ec:	462b      	mov	r3, r5
 80023ee:	f04f 0000 	mov.w	r0, #0
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	0159      	lsls	r1, r3, #5
 80023f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023fc:	0150      	lsls	r0, r2, #5
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4621      	mov	r1, r4
 8002404:	1a51      	subs	r1, r2, r1
 8002406:	6439      	str	r1, [r7, #64]	@ 0x40
 8002408:	4629      	mov	r1, r5
 800240a:	eb63 0301 	sbc.w	r3, r3, r1
 800240e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800241c:	4649      	mov	r1, r9
 800241e:	018b      	lsls	r3, r1, #6
 8002420:	4641      	mov	r1, r8
 8002422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002426:	4641      	mov	r1, r8
 8002428:	018a      	lsls	r2, r1, #6
 800242a:	4641      	mov	r1, r8
 800242c:	1a51      	subs	r1, r2, r1
 800242e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002430:	4649      	mov	r1, r9
 8002432:	eb63 0301 	sbc.w	r3, r3, r1
 8002436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002444:	4649      	mov	r1, r9
 8002446:	00cb      	lsls	r3, r1, #3
 8002448:	4641      	mov	r1, r8
 800244a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244e:	4641      	mov	r1, r8
 8002450:	00ca      	lsls	r2, r1, #3
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	4603      	mov	r3, r0
 8002458:	4622      	mov	r2, r4
 800245a:	189b      	adds	r3, r3, r2
 800245c:	633b      	str	r3, [r7, #48]	@ 0x30
 800245e:	462b      	mov	r3, r5
 8002460:	460a      	mov	r2, r1
 8002462:	eb42 0303 	adc.w	r3, r2, r3
 8002466:	637b      	str	r3, [r7, #52]	@ 0x34
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002474:	4629      	mov	r1, r5
 8002476:	024b      	lsls	r3, r1, #9
 8002478:	4621      	mov	r1, r4
 800247a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800247e:	4621      	mov	r1, r4
 8002480:	024a      	lsls	r2, r1, #9
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800248a:	2200      	movs	r2, #0
 800248c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002494:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002498:	f7fd ff0a 	bl	80002b0 <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4613      	mov	r3, r2
 80024a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024a6:	e067      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a8:	4b75      	ldr	r3, [pc, #468]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80024b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024c2:	2300      	movs	r3, #0
 80024c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	0159      	lsls	r1, r3, #5
 80024d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024dc:	0150      	lsls	r0, r2, #5
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4621      	mov	r1, r4
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80024e8:	4629      	mov	r1, r5
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80024fc:	4649      	mov	r1, r9
 80024fe:	018b      	lsls	r3, r1, #6
 8002500:	4641      	mov	r1, r8
 8002502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002506:	4641      	mov	r1, r8
 8002508:	018a      	lsls	r2, r1, #6
 800250a:	4641      	mov	r1, r8
 800250c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002510:	4649      	mov	r1, r9
 8002512:	eb63 0b01 	sbc.w	fp, r3, r1
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002522:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002526:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800252a:	4692      	mov	sl, r2
 800252c:	469b      	mov	fp, r3
 800252e:	4623      	mov	r3, r4
 8002530:	eb1a 0303 	adds.w	r3, sl, r3
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	462b      	mov	r3, r5
 8002538:	eb4b 0303 	adc.w	r3, fp, r3
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800254a:	4629      	mov	r1, r5
 800254c:	028b      	lsls	r3, r1, #10
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002554:	4621      	mov	r1, r4
 8002556:	028a      	lsls	r2, r1, #10
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002560:	2200      	movs	r2, #0
 8002562:	673b      	str	r3, [r7, #112]	@ 0x70
 8002564:	677a      	str	r2, [r7, #116]	@ 0x74
 8002566:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800256a:	f7fd fea1 	bl	80002b0 <__aeabi_uldivmod>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4613      	mov	r3, r2
 8002574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002578:	4b41      	ldr	r3, [pc, #260]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	3301      	adds	r3, #1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800258a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800258e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800259a:	e0eb      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4b38      	ldr	r3, [pc, #224]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a8:	4b35      	ldr	r3, [pc, #212]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d06b      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b4:	4b32      	ldr	r3, [pc, #200]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	2200      	movs	r2, #0
 80025bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80025c8:	2300      	movs	r3, #0
 80025ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80025cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80025d0:	4622      	mov	r2, r4
 80025d2:	462b      	mov	r3, r5
 80025d4:	f04f 0000 	mov.w	r0, #0
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	0159      	lsls	r1, r3, #5
 80025de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e2:	0150      	lsls	r0, r2, #5
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4621      	mov	r1, r4
 80025ea:	1a51      	subs	r1, r2, r1
 80025ec:	61b9      	str	r1, [r7, #24]
 80025ee:	4629      	mov	r1, r5
 80025f0:	eb63 0301 	sbc.w	r3, r3, r1
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002602:	4659      	mov	r1, fp
 8002604:	018b      	lsls	r3, r1, #6
 8002606:	4651      	mov	r1, sl
 8002608:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260c:	4651      	mov	r1, sl
 800260e:	018a      	lsls	r2, r1, #6
 8002610:	4651      	mov	r1, sl
 8002612:	ebb2 0801 	subs.w	r8, r2, r1
 8002616:	4659      	mov	r1, fp
 8002618:	eb63 0901 	sbc.w	r9, r3, r1
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002630:	4690      	mov	r8, r2
 8002632:	4699      	mov	r9, r3
 8002634:	4623      	mov	r3, r4
 8002636:	eb18 0303 	adds.w	r3, r8, r3
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	462b      	mov	r3, r5
 800263e:	eb49 0303 	adc.w	r3, r9, r3
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002650:	4629      	mov	r1, r5
 8002652:	024b      	lsls	r3, r1, #9
 8002654:	4621      	mov	r1, r4
 8002656:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800265a:	4621      	mov	r1, r4
 800265c:	024a      	lsls	r2, r1, #9
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002666:	2200      	movs	r2, #0
 8002668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800266a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800266c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002670:	f7fd fe1e 	bl	80002b0 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4613      	mov	r3, r2
 800267a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800267e:	e065      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x420>
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268c:	4b3d      	ldr	r3, [pc, #244]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x458>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	2200      	movs	r2, #0
 8002694:	4618      	mov	r0, r3
 8002696:	4611      	mov	r1, r2
 8002698:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800269c:	653b      	str	r3, [r7, #80]	@ 0x50
 800269e:	2300      	movs	r3, #0
 80026a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80026a6:	4642      	mov	r2, r8
 80026a8:	464b      	mov	r3, r9
 80026aa:	f04f 0000 	mov.w	r0, #0
 80026ae:	f04f 0100 	mov.w	r1, #0
 80026b2:	0159      	lsls	r1, r3, #5
 80026b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b8:	0150      	lsls	r0, r2, #5
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4641      	mov	r1, r8
 80026c0:	1a51      	subs	r1, r2, r1
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	4649      	mov	r1, r9
 80026c6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80026d8:	4659      	mov	r1, fp
 80026da:	018b      	lsls	r3, r1, #6
 80026dc:	4651      	mov	r1, sl
 80026de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e2:	4651      	mov	r1, sl
 80026e4:	018a      	lsls	r2, r1, #6
 80026e6:	4651      	mov	r1, sl
 80026e8:	1a54      	subs	r4, r2, r1
 80026ea:	4659      	mov	r1, fp
 80026ec:	eb63 0501 	sbc.w	r5, r3, r1
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	00eb      	lsls	r3, r5, #3
 80026fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fe:	00e2      	lsls	r2, r4, #3
 8002700:	4614      	mov	r4, r2
 8002702:	461d      	mov	r5, r3
 8002704:	4643      	mov	r3, r8
 8002706:	18e3      	adds	r3, r4, r3
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	464b      	mov	r3, r9
 800270c:	eb45 0303 	adc.w	r3, r5, r3
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800271e:	4629      	mov	r1, r5
 8002720:	028b      	lsls	r3, r1, #10
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002728:	4621      	mov	r1, r4
 800272a:	028a      	lsls	r2, r1, #10
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002734:	2200      	movs	r2, #0
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002738:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800273a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800273e:	f7fd fdb7 	bl	80002b0 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4613      	mov	r3, r2
 8002748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800274c:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x458>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0f1b      	lsrs	r3, r3, #28
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800275a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800275e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800276a:	e003      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x45c>)
 800276e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002772:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002778:	4618      	mov	r0, r3
 800277a:	37b8      	adds	r7, #184	@ 0xb8
 800277c:	46bd      	mov	sp, r7
 800277e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	00f42400 	.word	0x00f42400

0800278c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e28d      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8083 	beq.w	80028b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027ac:	4b94      	ldr	r3, [pc, #592]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d019      	beq.n	80027ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027b8:	4b91      	ldr	r3, [pc, #580]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d0:	d00c      	beq.n	80027ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d112      	bne.n	8002804 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b88      	ldr	r3, [pc, #544]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ea:	d10b      	bne.n	8002804 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	4b84      	ldr	r3, [pc, #528]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05b      	beq.n	80028b0 <HAL_RCC_OscConfig+0x124>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d157      	bne.n	80028b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e25a      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x90>
 800280e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7b      	ldr	r2, [pc, #492]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xcc>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xb4>
 8002826:	4b76      	ldr	r3, [pc, #472]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b73      	ldr	r3, [pc, #460]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a72      	ldr	r2, [pc, #456]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xcc>
 8002840:	4b6f      	ldr	r3, [pc, #444]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6e      	ldr	r2, [pc, #440]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6b      	ldr	r2, [pc, #428]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe faa4 	bl	8000dac <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe faa0 	bl	8000dac <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e21f      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b61      	ldr	r3, [pc, #388]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xdc>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fa90 	bl	8000dac <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fa8c 	bl	8000dac <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e20b      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b57      	ldr	r3, [pc, #348]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x104>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d06f      	beq.n	800299e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028be:	4b50      	ldr	r3, [pc, #320]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d017      	beq.n	80028fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d105      	bne.n	80028e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b47      	ldr	r3, [pc, #284]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ee:	4b44      	ldr	r3, [pc, #272]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b41      	ldr	r3, [pc, #260]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x186>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e1d3      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b3b      	ldr	r3, [pc, #236]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4937      	ldr	r1, [pc, #220]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e03a      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <HAL_RCC_OscConfig+0x278>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7fe fa39 	bl	8000dac <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293e:	f7fe fa35 	bl	8000dac <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1b4      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b28      	ldr	r3, [pc, #160]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4925      	ldr	r1, [pc, #148]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
 8002970:	e015      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_OscConfig+0x278>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fa18 	bl	8000dac <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe fa14 	bl	8000dac <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e193      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d036      	beq.n	8002a18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe f9f8 	bl	8000dac <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe f9f4 	bl	8000dac <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e173      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_RCC_OscConfig+0x274>)
 80029d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x234>
 80029de:	e01b      	b.n	8002a18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_RCC_OscConfig+0x27c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe f9e1 	bl	8000dac <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e00e      	b.n	8002a0c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe f9dd 	bl	8000dac <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d907      	bls.n	8002a0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e15c      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ea      	bne.n	80029ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8097 	beq.w	8002b54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b83      	ldr	r3, [pc, #524]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a46:	4b7c      	ldr	r3, [pc, #496]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b79      	ldr	r3, [pc, #484]	@ (8002c3c <HAL_RCC_OscConfig+0x4b0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b76      	ldr	r3, [pc, #472]	@ (8002c3c <HAL_RCC_OscConfig+0x4b0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a75      	ldr	r2, [pc, #468]	@ (8002c3c <HAL_RCC_OscConfig+0x4b0>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe f99d 	bl	8000dac <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe f999 	bl	8000dac <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e118      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b6c      	ldr	r3, [pc, #432]	@ (8002c3c <HAL_RCC_OscConfig+0x4b0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x31e>
 8002a9c:	4b66      	ldr	r3, [pc, #408]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	4a65      	ldr	r2, [pc, #404]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x358>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x340>
 8002ab2:	4b61      	ldr	r3, [pc, #388]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a60      	ldr	r2, [pc, #384]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	4b5e      	ldr	r3, [pc, #376]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac2:	4a5d      	ldr	r2, [pc, #372]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x358>
 8002acc:	4b5a      	ldr	r3, [pc, #360]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a59      	ldr	r2, [pc, #356]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad8:	4b57      	ldr	r3, [pc, #348]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002adc:	4a56      	ldr	r2, [pc, #344]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe f95e 	bl	8000dac <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fe f95a 	bl	8000dac <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0d7      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <HAL_RCC_OscConfig+0x368>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe f948 	bl	8000dac <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe f944 	bl	8000dac <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0c1      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	4b40      	ldr	r3, [pc, #256]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b3b      	ldr	r3, [pc, #236]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80ad 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5e:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d060      	beq.n	8002c2c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d145      	bne.n	8002bfe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b33      	ldr	r3, [pc, #204]	@ (8002c40 <HAL_RCC_OscConfig+0x4b4>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe f918 	bl	8000dac <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe f914 	bl	8000dac <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e093      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	071b      	lsls	r3, r3, #28
 8002bca:	491b      	ldr	r1, [pc, #108]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <HAL_RCC_OscConfig+0x4b4>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe f8e9 	bl	8000dac <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bde:	f7fe f8e5 	bl	8000dac <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e064      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x452>
 8002bfc:	e05c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_RCC_OscConfig+0x4b4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe f8d2 	bl	8000dac <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe f8ce 	bl	8000dac <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e04d      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x480>
 8002c2a:	e045      	b.n	8002cb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e040      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000
 8002c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c44:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <HAL_RCC_OscConfig+0x538>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d030      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d129      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d122      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c74:	4013      	ands	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d119      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d10f      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <rand>:
 8002cc8:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <rand+0x5c>)
 8002cca:	b510      	push	{r4, lr}
 8002ccc:	681c      	ldr	r4, [r3, #0]
 8002cce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002cd0:	b9b3      	cbnz	r3, 8002d00 <rand+0x38>
 8002cd2:	2018      	movs	r0, #24
 8002cd4:	f000 fa20 	bl	8003118 <malloc>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6320      	str	r0, [r4, #48]	@ 0x30
 8002cdc:	b920      	cbnz	r0, 8002ce8 <rand+0x20>
 8002cde:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <rand+0x60>)
 8002ce0:	4812      	ldr	r0, [pc, #72]	@ (8002d2c <rand+0x64>)
 8002ce2:	2152      	movs	r1, #82	@ 0x52
 8002ce4:	f000 f9b0 	bl	8003048 <__assert_func>
 8002ce8:	4911      	ldr	r1, [pc, #68]	@ (8002d30 <rand+0x68>)
 8002cea:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <rand+0x6c>)
 8002cec:	e9c0 1300 	strd	r1, r3, [r0]
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <rand+0x70>)
 8002cf2:	6083      	str	r3, [r0, #8]
 8002cf4:	230b      	movs	r3, #11
 8002cf6:	8183      	strh	r3, [r0, #12]
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002d00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002d02:	480e      	ldr	r0, [pc, #56]	@ (8002d3c <rand+0x74>)
 8002d04:	690b      	ldr	r3, [r1, #16]
 8002d06:	694c      	ldr	r4, [r1, #20]
 8002d08:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <rand+0x78>)
 8002d0a:	4358      	muls	r0, r3
 8002d0c:	fb02 0004 	mla	r0, r2, r4, r0
 8002d10:	fba3 3202 	umull	r3, r2, r3, r2
 8002d14:	3301      	adds	r3, #1
 8002d16:	eb40 0002 	adc.w	r0, r0, r2
 8002d1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002d1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002d22:	bd10      	pop	{r4, pc}
 8002d24:	20000018 	.word	0x20000018
 8002d28:	08003cac 	.word	0x08003cac
 8002d2c:	08003cc3 	.word	0x08003cc3
 8002d30:	abcd330e 	.word	0xabcd330e
 8002d34:	e66d1234 	.word	0xe66d1234
 8002d38:	0005deec 	.word	0x0005deec
 8002d3c:	5851f42d 	.word	0x5851f42d
 8002d40:	4c957f2d 	.word	0x4c957f2d

08002d44 <std>:
 8002d44:	2300      	movs	r3, #0
 8002d46:	b510      	push	{r4, lr}
 8002d48:	4604      	mov	r4, r0
 8002d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d52:	6083      	str	r3, [r0, #8]
 8002d54:	8181      	strh	r1, [r0, #12]
 8002d56:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d58:	81c2      	strh	r2, [r0, #14]
 8002d5a:	6183      	str	r3, [r0, #24]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	2208      	movs	r2, #8
 8002d60:	305c      	adds	r0, #92	@ 0x5c
 8002d62:	f000 f8f4 	bl	8002f4e <memset>
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <std+0x58>)
 8002d68:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <std+0x5c>)
 8002d6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <std+0x60>)
 8002d70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <std+0x64>)
 8002d74:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <std+0x68>)
 8002d78:	6224      	str	r4, [r4, #32]
 8002d7a:	429c      	cmp	r4, r3
 8002d7c:	d006      	beq.n	8002d8c <std+0x48>
 8002d7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d82:	4294      	cmp	r4, r2
 8002d84:	d002      	beq.n	8002d8c <std+0x48>
 8002d86:	33d0      	adds	r3, #208	@ 0xd0
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d105      	bne.n	8002d98 <std+0x54>
 8002d8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d94:	f000 b954 	b.w	8003040 <__retarget_lock_init_recursive>
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	08002ec9 	.word	0x08002ec9
 8002da0:	08002eeb 	.word	0x08002eeb
 8002da4:	08002f23 	.word	0x08002f23
 8002da8:	08002f47 	.word	0x08002f47
 8002dac:	20000104 	.word	0x20000104

08002db0 <stdio_exit_handler>:
 8002db0:	4a02      	ldr	r2, [pc, #8]	@ (8002dbc <stdio_exit_handler+0xc>)
 8002db2:	4903      	ldr	r1, [pc, #12]	@ (8002dc0 <stdio_exit_handler+0x10>)
 8002db4:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <stdio_exit_handler+0x14>)
 8002db6:	f000 b869 	b.w	8002e8c <_fwalk_sglue>
 8002dba:	bf00      	nop
 8002dbc:	2000000c 	.word	0x2000000c
 8002dc0:	0800338d 	.word	0x0800338d
 8002dc4:	2000001c 	.word	0x2000001c

08002dc8 <cleanup_stdio>:
 8002dc8:	6841      	ldr	r1, [r0, #4]
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <cleanup_stdio+0x34>)
 8002dcc:	4299      	cmp	r1, r3
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	d001      	beq.n	8002dd8 <cleanup_stdio+0x10>
 8002dd4:	f000 fada 	bl	800338c <_fflush_r>
 8002dd8:	68a1      	ldr	r1, [r4, #8]
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <cleanup_stdio+0x38>)
 8002ddc:	4299      	cmp	r1, r3
 8002dde:	d002      	beq.n	8002de6 <cleanup_stdio+0x1e>
 8002de0:	4620      	mov	r0, r4
 8002de2:	f000 fad3 	bl	800338c <_fflush_r>
 8002de6:	68e1      	ldr	r1, [r4, #12]
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <cleanup_stdio+0x3c>)
 8002dea:	4299      	cmp	r1, r3
 8002dec:	d004      	beq.n	8002df8 <cleanup_stdio+0x30>
 8002dee:	4620      	mov	r0, r4
 8002df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df4:	f000 baca 	b.w	800338c <_fflush_r>
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000104 	.word	0x20000104
 8002e00:	2000016c 	.word	0x2000016c
 8002e04:	200001d4 	.word	0x200001d4

08002e08 <global_stdio_init.part.0>:
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <global_stdio_init.part.0+0x30>)
 8002e0c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e3c <global_stdio_init.part.0+0x34>)
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e40 <global_stdio_init.part.0+0x38>)
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	4620      	mov	r0, r4
 8002e14:	2200      	movs	r2, #0
 8002e16:	2104      	movs	r1, #4
 8002e18:	f7ff ff94 	bl	8002d44 <std>
 8002e1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e20:	2201      	movs	r2, #1
 8002e22:	2109      	movs	r1, #9
 8002e24:	f7ff ff8e 	bl	8002d44 <std>
 8002e28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e32:	2112      	movs	r1, #18
 8002e34:	f7ff bf86 	b.w	8002d44 <std>
 8002e38:	2000023c 	.word	0x2000023c
 8002e3c:	20000104 	.word	0x20000104
 8002e40:	08002db1 	.word	0x08002db1

08002e44 <__sfp_lock_acquire>:
 8002e44:	4801      	ldr	r0, [pc, #4]	@ (8002e4c <__sfp_lock_acquire+0x8>)
 8002e46:	f000 b8fc 	b.w	8003042 <__retarget_lock_acquire_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	20000245 	.word	0x20000245

08002e50 <__sfp_lock_release>:
 8002e50:	4801      	ldr	r0, [pc, #4]	@ (8002e58 <__sfp_lock_release+0x8>)
 8002e52:	f000 b8f7 	b.w	8003044 <__retarget_lock_release_recursive>
 8002e56:	bf00      	nop
 8002e58:	20000245 	.word	0x20000245

08002e5c <__sinit>:
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	4604      	mov	r4, r0
 8002e60:	f7ff fff0 	bl	8002e44 <__sfp_lock_acquire>
 8002e64:	6a23      	ldr	r3, [r4, #32]
 8002e66:	b11b      	cbz	r3, 8002e70 <__sinit+0x14>
 8002e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e6c:	f7ff bff0 	b.w	8002e50 <__sfp_lock_release>
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <__sinit+0x28>)
 8002e72:	6223      	str	r3, [r4, #32]
 8002e74:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <__sinit+0x2c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f5      	bne.n	8002e68 <__sinit+0xc>
 8002e7c:	f7ff ffc4 	bl	8002e08 <global_stdio_init.part.0>
 8002e80:	e7f2      	b.n	8002e68 <__sinit+0xc>
 8002e82:	bf00      	nop
 8002e84:	08002dc9 	.word	0x08002dc9
 8002e88:	2000023c 	.word	0x2000023c

08002e8c <_fwalk_sglue>:
 8002e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e90:	4607      	mov	r7, r0
 8002e92:	4688      	mov	r8, r1
 8002e94:	4614      	mov	r4, r2
 8002e96:	2600      	movs	r6, #0
 8002e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8002ea0:	d505      	bpl.n	8002eae <_fwalk_sglue+0x22>
 8002ea2:	6824      	ldr	r4, [r4, #0]
 8002ea4:	2c00      	cmp	r4, #0
 8002ea6:	d1f7      	bne.n	8002e98 <_fwalk_sglue+0xc>
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eae:	89ab      	ldrh	r3, [r5, #12]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d907      	bls.n	8002ec4 <_fwalk_sglue+0x38>
 8002eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	d003      	beq.n	8002ec4 <_fwalk_sglue+0x38>
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	47c0      	blx	r8
 8002ec2:	4306      	orrs	r6, r0
 8002ec4:	3568      	adds	r5, #104	@ 0x68
 8002ec6:	e7e9      	b.n	8002e9c <_fwalk_sglue+0x10>

08002ec8 <__sread>:
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	460c      	mov	r4, r1
 8002ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed0:	f000 f868 	bl	8002fa4 <_read_r>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	bfab      	itete	ge
 8002ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002eda:	89a3      	ldrhlt	r3, [r4, #12]
 8002edc:	181b      	addge	r3, r3, r0
 8002ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ee2:	bfac      	ite	ge
 8002ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ee6:	81a3      	strhlt	r3, [r4, #12]
 8002ee8:	bd10      	pop	{r4, pc}

08002eea <__swrite>:
 8002eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eee:	461f      	mov	r7, r3
 8002ef0:	898b      	ldrh	r3, [r1, #12]
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	4616      	mov	r6, r2
 8002efa:	d505      	bpl.n	8002f08 <__swrite+0x1e>
 8002efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f00:	2302      	movs	r3, #2
 8002f02:	2200      	movs	r2, #0
 8002f04:	f000 f83c 	bl	8002f80 <_lseek_r>
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f12:	81a3      	strh	r3, [r4, #12]
 8002f14:	4632      	mov	r2, r6
 8002f16:	463b      	mov	r3, r7
 8002f18:	4628      	mov	r0, r5
 8002f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f1e:	f000 b853 	b.w	8002fc8 <_write_r>

08002f22 <__sseek>:
 8002f22:	b510      	push	{r4, lr}
 8002f24:	460c      	mov	r4, r1
 8002f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2a:	f000 f829 	bl	8002f80 <_lseek_r>
 8002f2e:	1c43      	adds	r3, r0, #1
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	bf15      	itete	ne
 8002f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f3e:	81a3      	strheq	r3, [r4, #12]
 8002f40:	bf18      	it	ne
 8002f42:	81a3      	strhne	r3, [r4, #12]
 8002f44:	bd10      	pop	{r4, pc}

08002f46 <__sclose>:
 8002f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f4a:	f000 b809 	b.w	8002f60 <_close_r>

08002f4e <memset>:
 8002f4e:	4402      	add	r2, r0
 8002f50:	4603      	mov	r3, r0
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d100      	bne.n	8002f58 <memset+0xa>
 8002f56:	4770      	bx	lr
 8002f58:	f803 1b01 	strb.w	r1, [r3], #1
 8002f5c:	e7f9      	b.n	8002f52 <memset+0x4>
	...

08002f60 <_close_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	4d06      	ldr	r5, [pc, #24]	@ (8002f7c <_close_r+0x1c>)
 8002f64:	2300      	movs	r3, #0
 8002f66:	4604      	mov	r4, r0
 8002f68:	4608      	mov	r0, r1
 8002f6a:	602b      	str	r3, [r5, #0]
 8002f6c:	f7fd fe12 	bl	8000b94 <_close>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d102      	bne.n	8002f7a <_close_r+0x1a>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b103      	cbz	r3, 8002f7a <_close_r+0x1a>
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	20000240 	.word	0x20000240

08002f80 <_lseek_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4d07      	ldr	r5, [pc, #28]	@ (8002fa0 <_lseek_r+0x20>)
 8002f84:	4604      	mov	r4, r0
 8002f86:	4608      	mov	r0, r1
 8002f88:	4611      	mov	r1, r2
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	602a      	str	r2, [r5, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7fd fe27 	bl	8000be2 <_lseek>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d102      	bne.n	8002f9e <_lseek_r+0x1e>
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	b103      	cbz	r3, 8002f9e <_lseek_r+0x1e>
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	20000240 	.word	0x20000240

08002fa4 <_read_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4d07      	ldr	r5, [pc, #28]	@ (8002fc4 <_read_r+0x20>)
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4608      	mov	r0, r1
 8002fac:	4611      	mov	r1, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	602a      	str	r2, [r5, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f7fd fdb5 	bl	8000b22 <_read>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_read_r+0x1e>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_read_r+0x1e>
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	20000240 	.word	0x20000240

08002fc8 <_write_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4d07      	ldr	r5, [pc, #28]	@ (8002fe8 <_write_r+0x20>)
 8002fcc:	4604      	mov	r4, r0
 8002fce:	4608      	mov	r0, r1
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	602a      	str	r2, [r5, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f7fd fdc0 	bl	8000b5c <_write>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_write_r+0x1e>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_write_r+0x1e>
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	20000240 	.word	0x20000240

08002fec <__errno>:
 8002fec:	4b01      	ldr	r3, [pc, #4]	@ (8002ff4 <__errno+0x8>)
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000018 	.word	0x20000018

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4d0d      	ldr	r5, [pc, #52]	@ (8003030 <__libc_init_array+0x38>)
 8002ffc:	4c0d      	ldr	r4, [pc, #52]	@ (8003034 <__libc_init_array+0x3c>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	2600      	movs	r6, #0
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	4d0b      	ldr	r5, [pc, #44]	@ (8003038 <__libc_init_array+0x40>)
 800300a:	4c0c      	ldr	r4, [pc, #48]	@ (800303c <__libc_init_array+0x44>)
 800300c:	f000 fe3a 	bl	8003c84 <_init>
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	2600      	movs	r6, #0
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	08003d94 	.word	0x08003d94
 8003034:	08003d94 	.word	0x08003d94
 8003038:	08003d94 	.word	0x08003d94
 800303c:	08003d98 	.word	0x08003d98

08003040 <__retarget_lock_init_recursive>:
 8003040:	4770      	bx	lr

08003042 <__retarget_lock_acquire_recursive>:
 8003042:	4770      	bx	lr

08003044 <__retarget_lock_release_recursive>:
 8003044:	4770      	bx	lr
	...

08003048 <__assert_func>:
 8003048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800304a:	4614      	mov	r4, r2
 800304c:	461a      	mov	r2, r3
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <__assert_func+0x2c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4605      	mov	r5, r0
 8003054:	68d8      	ldr	r0, [r3, #12]
 8003056:	b954      	cbnz	r4, 800306e <__assert_func+0x26>
 8003058:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <__assert_func+0x30>)
 800305a:	461c      	mov	r4, r3
 800305c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003060:	9100      	str	r1, [sp, #0]
 8003062:	462b      	mov	r3, r5
 8003064:	4905      	ldr	r1, [pc, #20]	@ (800307c <__assert_func+0x34>)
 8003066:	f000 f9b9 	bl	80033dc <fiprintf>
 800306a:	f000 f9d9 	bl	8003420 <abort>
 800306e:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <__assert_func+0x38>)
 8003070:	e7f4      	b.n	800305c <__assert_func+0x14>
 8003072:	bf00      	nop
 8003074:	20000018 	.word	0x20000018
 8003078:	08003d56 	.word	0x08003d56
 800307c:	08003d28 	.word	0x08003d28
 8003080:	08003d1b 	.word	0x08003d1b

08003084 <_free_r>:
 8003084:	b538      	push	{r3, r4, r5, lr}
 8003086:	4605      	mov	r5, r0
 8003088:	2900      	cmp	r1, #0
 800308a:	d041      	beq.n	8003110 <_free_r+0x8c>
 800308c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003090:	1f0c      	subs	r4, r1, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	bfb8      	it	lt
 8003096:	18e4      	addlt	r4, r4, r3
 8003098:	f000 f8e8 	bl	800326c <__malloc_lock>
 800309c:	4a1d      	ldr	r2, [pc, #116]	@ (8003114 <_free_r+0x90>)
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	b933      	cbnz	r3, 80030b0 <_free_r+0x2c>
 80030a2:	6063      	str	r3, [r4, #4]
 80030a4:	6014      	str	r4, [r2, #0]
 80030a6:	4628      	mov	r0, r5
 80030a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030ac:	f000 b8e4 	b.w	8003278 <__malloc_unlock>
 80030b0:	42a3      	cmp	r3, r4
 80030b2:	d908      	bls.n	80030c6 <_free_r+0x42>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	1821      	adds	r1, r4, r0
 80030b8:	428b      	cmp	r3, r1
 80030ba:	bf01      	itttt	eq
 80030bc:	6819      	ldreq	r1, [r3, #0]
 80030be:	685b      	ldreq	r3, [r3, #4]
 80030c0:	1809      	addeq	r1, r1, r0
 80030c2:	6021      	streq	r1, [r4, #0]
 80030c4:	e7ed      	b.n	80030a2 <_free_r+0x1e>
 80030c6:	461a      	mov	r2, r3
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b10b      	cbz	r3, 80030d0 <_free_r+0x4c>
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	d9fa      	bls.n	80030c6 <_free_r+0x42>
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	1850      	adds	r0, r2, r1
 80030d4:	42a0      	cmp	r0, r4
 80030d6:	d10b      	bne.n	80030f0 <_free_r+0x6c>
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	4401      	add	r1, r0
 80030dc:	1850      	adds	r0, r2, r1
 80030de:	4283      	cmp	r3, r0
 80030e0:	6011      	str	r1, [r2, #0]
 80030e2:	d1e0      	bne.n	80030a6 <_free_r+0x22>
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	6053      	str	r3, [r2, #4]
 80030ea:	4408      	add	r0, r1
 80030ec:	6010      	str	r0, [r2, #0]
 80030ee:	e7da      	b.n	80030a6 <_free_r+0x22>
 80030f0:	d902      	bls.n	80030f8 <_free_r+0x74>
 80030f2:	230c      	movs	r3, #12
 80030f4:	602b      	str	r3, [r5, #0]
 80030f6:	e7d6      	b.n	80030a6 <_free_r+0x22>
 80030f8:	6820      	ldr	r0, [r4, #0]
 80030fa:	1821      	adds	r1, r4, r0
 80030fc:	428b      	cmp	r3, r1
 80030fe:	bf04      	itt	eq
 8003100:	6819      	ldreq	r1, [r3, #0]
 8003102:	685b      	ldreq	r3, [r3, #4]
 8003104:	6063      	str	r3, [r4, #4]
 8003106:	bf04      	itt	eq
 8003108:	1809      	addeq	r1, r1, r0
 800310a:	6021      	streq	r1, [r4, #0]
 800310c:	6054      	str	r4, [r2, #4]
 800310e:	e7ca      	b.n	80030a6 <_free_r+0x22>
 8003110:	bd38      	pop	{r3, r4, r5, pc}
 8003112:	bf00      	nop
 8003114:	2000024c 	.word	0x2000024c

08003118 <malloc>:
 8003118:	4b02      	ldr	r3, [pc, #8]	@ (8003124 <malloc+0xc>)
 800311a:	4601      	mov	r1, r0
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	f000 b825 	b.w	800316c <_malloc_r>
 8003122:	bf00      	nop
 8003124:	20000018 	.word	0x20000018

08003128 <sbrk_aligned>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	4e0f      	ldr	r6, [pc, #60]	@ (8003168 <sbrk_aligned+0x40>)
 800312c:	460c      	mov	r4, r1
 800312e:	6831      	ldr	r1, [r6, #0]
 8003130:	4605      	mov	r5, r0
 8003132:	b911      	cbnz	r1, 800313a <sbrk_aligned+0x12>
 8003134:	f000 f964 	bl	8003400 <_sbrk_r>
 8003138:	6030      	str	r0, [r6, #0]
 800313a:	4621      	mov	r1, r4
 800313c:	4628      	mov	r0, r5
 800313e:	f000 f95f 	bl	8003400 <_sbrk_r>
 8003142:	1c43      	adds	r3, r0, #1
 8003144:	d103      	bne.n	800314e <sbrk_aligned+0x26>
 8003146:	f04f 34ff 	mov.w	r4, #4294967295
 800314a:	4620      	mov	r0, r4
 800314c:	bd70      	pop	{r4, r5, r6, pc}
 800314e:	1cc4      	adds	r4, r0, #3
 8003150:	f024 0403 	bic.w	r4, r4, #3
 8003154:	42a0      	cmp	r0, r4
 8003156:	d0f8      	beq.n	800314a <sbrk_aligned+0x22>
 8003158:	1a21      	subs	r1, r4, r0
 800315a:	4628      	mov	r0, r5
 800315c:	f000 f950 	bl	8003400 <_sbrk_r>
 8003160:	3001      	adds	r0, #1
 8003162:	d1f2      	bne.n	800314a <sbrk_aligned+0x22>
 8003164:	e7ef      	b.n	8003146 <sbrk_aligned+0x1e>
 8003166:	bf00      	nop
 8003168:	20000248 	.word	0x20000248

0800316c <_malloc_r>:
 800316c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003170:	1ccd      	adds	r5, r1, #3
 8003172:	f025 0503 	bic.w	r5, r5, #3
 8003176:	3508      	adds	r5, #8
 8003178:	2d0c      	cmp	r5, #12
 800317a:	bf38      	it	cc
 800317c:	250c      	movcc	r5, #12
 800317e:	2d00      	cmp	r5, #0
 8003180:	4606      	mov	r6, r0
 8003182:	db01      	blt.n	8003188 <_malloc_r+0x1c>
 8003184:	42a9      	cmp	r1, r5
 8003186:	d904      	bls.n	8003192 <_malloc_r+0x26>
 8003188:	230c      	movs	r3, #12
 800318a:	6033      	str	r3, [r6, #0]
 800318c:	2000      	movs	r0, #0
 800318e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003268 <_malloc_r+0xfc>
 8003196:	f000 f869 	bl	800326c <__malloc_lock>
 800319a:	f8d8 3000 	ldr.w	r3, [r8]
 800319e:	461c      	mov	r4, r3
 80031a0:	bb44      	cbnz	r4, 80031f4 <_malloc_r+0x88>
 80031a2:	4629      	mov	r1, r5
 80031a4:	4630      	mov	r0, r6
 80031a6:	f7ff ffbf 	bl	8003128 <sbrk_aligned>
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	4604      	mov	r4, r0
 80031ae:	d158      	bne.n	8003262 <_malloc_r+0xf6>
 80031b0:	f8d8 4000 	ldr.w	r4, [r8]
 80031b4:	4627      	mov	r7, r4
 80031b6:	2f00      	cmp	r7, #0
 80031b8:	d143      	bne.n	8003242 <_malloc_r+0xd6>
 80031ba:	2c00      	cmp	r4, #0
 80031bc:	d04b      	beq.n	8003256 <_malloc_r+0xea>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	4639      	mov	r1, r7
 80031c2:	4630      	mov	r0, r6
 80031c4:	eb04 0903 	add.w	r9, r4, r3
 80031c8:	f000 f91a 	bl	8003400 <_sbrk_r>
 80031cc:	4581      	cmp	r9, r0
 80031ce:	d142      	bne.n	8003256 <_malloc_r+0xea>
 80031d0:	6821      	ldr	r1, [r4, #0]
 80031d2:	1a6d      	subs	r5, r5, r1
 80031d4:	4629      	mov	r1, r5
 80031d6:	4630      	mov	r0, r6
 80031d8:	f7ff ffa6 	bl	8003128 <sbrk_aligned>
 80031dc:	3001      	adds	r0, #1
 80031de:	d03a      	beq.n	8003256 <_malloc_r+0xea>
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	442b      	add	r3, r5
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	f8d8 3000 	ldr.w	r3, [r8]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	bb62      	cbnz	r2, 8003248 <_malloc_r+0xdc>
 80031ee:	f8c8 7000 	str.w	r7, [r8]
 80031f2:	e00f      	b.n	8003214 <_malloc_r+0xa8>
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	1b52      	subs	r2, r2, r5
 80031f8:	d420      	bmi.n	800323c <_malloc_r+0xd0>
 80031fa:	2a0b      	cmp	r2, #11
 80031fc:	d917      	bls.n	800322e <_malloc_r+0xc2>
 80031fe:	1961      	adds	r1, r4, r5
 8003200:	42a3      	cmp	r3, r4
 8003202:	6025      	str	r5, [r4, #0]
 8003204:	bf18      	it	ne
 8003206:	6059      	strne	r1, [r3, #4]
 8003208:	6863      	ldr	r3, [r4, #4]
 800320a:	bf08      	it	eq
 800320c:	f8c8 1000 	streq.w	r1, [r8]
 8003210:	5162      	str	r2, [r4, r5]
 8003212:	604b      	str	r3, [r1, #4]
 8003214:	4630      	mov	r0, r6
 8003216:	f000 f82f 	bl	8003278 <__malloc_unlock>
 800321a:	f104 000b 	add.w	r0, r4, #11
 800321e:	1d23      	adds	r3, r4, #4
 8003220:	f020 0007 	bic.w	r0, r0, #7
 8003224:	1ac2      	subs	r2, r0, r3
 8003226:	bf1c      	itt	ne
 8003228:	1a1b      	subne	r3, r3, r0
 800322a:	50a3      	strne	r3, [r4, r2]
 800322c:	e7af      	b.n	800318e <_malloc_r+0x22>
 800322e:	6862      	ldr	r2, [r4, #4]
 8003230:	42a3      	cmp	r3, r4
 8003232:	bf0c      	ite	eq
 8003234:	f8c8 2000 	streq.w	r2, [r8]
 8003238:	605a      	strne	r2, [r3, #4]
 800323a:	e7eb      	b.n	8003214 <_malloc_r+0xa8>
 800323c:	4623      	mov	r3, r4
 800323e:	6864      	ldr	r4, [r4, #4]
 8003240:	e7ae      	b.n	80031a0 <_malloc_r+0x34>
 8003242:	463c      	mov	r4, r7
 8003244:	687f      	ldr	r7, [r7, #4]
 8003246:	e7b6      	b.n	80031b6 <_malloc_r+0x4a>
 8003248:	461a      	mov	r2, r3
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	42a3      	cmp	r3, r4
 800324e:	d1fb      	bne.n	8003248 <_malloc_r+0xdc>
 8003250:	2300      	movs	r3, #0
 8003252:	6053      	str	r3, [r2, #4]
 8003254:	e7de      	b.n	8003214 <_malloc_r+0xa8>
 8003256:	230c      	movs	r3, #12
 8003258:	6033      	str	r3, [r6, #0]
 800325a:	4630      	mov	r0, r6
 800325c:	f000 f80c 	bl	8003278 <__malloc_unlock>
 8003260:	e794      	b.n	800318c <_malloc_r+0x20>
 8003262:	6005      	str	r5, [r0, #0]
 8003264:	e7d6      	b.n	8003214 <_malloc_r+0xa8>
 8003266:	bf00      	nop
 8003268:	2000024c 	.word	0x2000024c

0800326c <__malloc_lock>:
 800326c:	4801      	ldr	r0, [pc, #4]	@ (8003274 <__malloc_lock+0x8>)
 800326e:	f7ff bee8 	b.w	8003042 <__retarget_lock_acquire_recursive>
 8003272:	bf00      	nop
 8003274:	20000244 	.word	0x20000244

08003278 <__malloc_unlock>:
 8003278:	4801      	ldr	r0, [pc, #4]	@ (8003280 <__malloc_unlock+0x8>)
 800327a:	f7ff bee3 	b.w	8003044 <__retarget_lock_release_recursive>
 800327e:	bf00      	nop
 8003280:	20000244 	.word	0x20000244

08003284 <__sflush_r>:
 8003284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800328c:	0716      	lsls	r6, r2, #28
 800328e:	4605      	mov	r5, r0
 8003290:	460c      	mov	r4, r1
 8003292:	d454      	bmi.n	800333e <__sflush_r+0xba>
 8003294:	684b      	ldr	r3, [r1, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	dc02      	bgt.n	80032a0 <__sflush_r+0x1c>
 800329a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	dd48      	ble.n	8003332 <__sflush_r+0xae>
 80032a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032a2:	2e00      	cmp	r6, #0
 80032a4:	d045      	beq.n	8003332 <__sflush_r+0xae>
 80032a6:	2300      	movs	r3, #0
 80032a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80032ac:	682f      	ldr	r7, [r5, #0]
 80032ae:	6a21      	ldr	r1, [r4, #32]
 80032b0:	602b      	str	r3, [r5, #0]
 80032b2:	d030      	beq.n	8003316 <__sflush_r+0x92>
 80032b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	0759      	lsls	r1, r3, #29
 80032ba:	d505      	bpl.n	80032c8 <__sflush_r+0x44>
 80032bc:	6863      	ldr	r3, [r4, #4]
 80032be:	1ad2      	subs	r2, r2, r3
 80032c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032c2:	b10b      	cbz	r3, 80032c8 <__sflush_r+0x44>
 80032c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032c6:	1ad2      	subs	r2, r2, r3
 80032c8:	2300      	movs	r3, #0
 80032ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032cc:	6a21      	ldr	r1, [r4, #32]
 80032ce:	4628      	mov	r0, r5
 80032d0:	47b0      	blx	r6
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	d106      	bne.n	80032e6 <__sflush_r+0x62>
 80032d8:	6829      	ldr	r1, [r5, #0]
 80032da:	291d      	cmp	r1, #29
 80032dc:	d82b      	bhi.n	8003336 <__sflush_r+0xb2>
 80032de:	4a2a      	ldr	r2, [pc, #168]	@ (8003388 <__sflush_r+0x104>)
 80032e0:	410a      	asrs	r2, r1
 80032e2:	07d6      	lsls	r6, r2, #31
 80032e4:	d427      	bmi.n	8003336 <__sflush_r+0xb2>
 80032e6:	2200      	movs	r2, #0
 80032e8:	6062      	str	r2, [r4, #4]
 80032ea:	04d9      	lsls	r1, r3, #19
 80032ec:	6922      	ldr	r2, [r4, #16]
 80032ee:	6022      	str	r2, [r4, #0]
 80032f0:	d504      	bpl.n	80032fc <__sflush_r+0x78>
 80032f2:	1c42      	adds	r2, r0, #1
 80032f4:	d101      	bne.n	80032fa <__sflush_r+0x76>
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	b903      	cbnz	r3, 80032fc <__sflush_r+0x78>
 80032fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80032fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032fe:	602f      	str	r7, [r5, #0]
 8003300:	b1b9      	cbz	r1, 8003332 <__sflush_r+0xae>
 8003302:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003306:	4299      	cmp	r1, r3
 8003308:	d002      	beq.n	8003310 <__sflush_r+0x8c>
 800330a:	4628      	mov	r0, r5
 800330c:	f7ff feba 	bl	8003084 <_free_r>
 8003310:	2300      	movs	r3, #0
 8003312:	6363      	str	r3, [r4, #52]	@ 0x34
 8003314:	e00d      	b.n	8003332 <__sflush_r+0xae>
 8003316:	2301      	movs	r3, #1
 8003318:	4628      	mov	r0, r5
 800331a:	47b0      	blx	r6
 800331c:	4602      	mov	r2, r0
 800331e:	1c50      	adds	r0, r2, #1
 8003320:	d1c9      	bne.n	80032b6 <__sflush_r+0x32>
 8003322:	682b      	ldr	r3, [r5, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0c6      	beq.n	80032b6 <__sflush_r+0x32>
 8003328:	2b1d      	cmp	r3, #29
 800332a:	d001      	beq.n	8003330 <__sflush_r+0xac>
 800332c:	2b16      	cmp	r3, #22
 800332e:	d11e      	bne.n	800336e <__sflush_r+0xea>
 8003330:	602f      	str	r7, [r5, #0]
 8003332:	2000      	movs	r0, #0
 8003334:	e022      	b.n	800337c <__sflush_r+0xf8>
 8003336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800333a:	b21b      	sxth	r3, r3
 800333c:	e01b      	b.n	8003376 <__sflush_r+0xf2>
 800333e:	690f      	ldr	r7, [r1, #16]
 8003340:	2f00      	cmp	r7, #0
 8003342:	d0f6      	beq.n	8003332 <__sflush_r+0xae>
 8003344:	0793      	lsls	r3, r2, #30
 8003346:	680e      	ldr	r6, [r1, #0]
 8003348:	bf08      	it	eq
 800334a:	694b      	ldreq	r3, [r1, #20]
 800334c:	600f      	str	r7, [r1, #0]
 800334e:	bf18      	it	ne
 8003350:	2300      	movne	r3, #0
 8003352:	eba6 0807 	sub.w	r8, r6, r7
 8003356:	608b      	str	r3, [r1, #8]
 8003358:	f1b8 0f00 	cmp.w	r8, #0
 800335c:	dde9      	ble.n	8003332 <__sflush_r+0xae>
 800335e:	6a21      	ldr	r1, [r4, #32]
 8003360:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003362:	4643      	mov	r3, r8
 8003364:	463a      	mov	r2, r7
 8003366:	4628      	mov	r0, r5
 8003368:	47b0      	blx	r6
 800336a:	2800      	cmp	r0, #0
 800336c:	dc08      	bgt.n	8003380 <__sflush_r+0xfc>
 800336e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003376:	81a3      	strh	r3, [r4, #12]
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003380:	4407      	add	r7, r0
 8003382:	eba8 0800 	sub.w	r8, r8, r0
 8003386:	e7e7      	b.n	8003358 <__sflush_r+0xd4>
 8003388:	dfbffffe 	.word	0xdfbffffe

0800338c <_fflush_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	690b      	ldr	r3, [r1, #16]
 8003390:	4605      	mov	r5, r0
 8003392:	460c      	mov	r4, r1
 8003394:	b913      	cbnz	r3, 800339c <_fflush_r+0x10>
 8003396:	2500      	movs	r5, #0
 8003398:	4628      	mov	r0, r5
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	b118      	cbz	r0, 80033a6 <_fflush_r+0x1a>
 800339e:	6a03      	ldr	r3, [r0, #32]
 80033a0:	b90b      	cbnz	r3, 80033a6 <_fflush_r+0x1a>
 80033a2:	f7ff fd5b 	bl	8002e5c <__sinit>
 80033a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f3      	beq.n	8003396 <_fflush_r+0xa>
 80033ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033b0:	07d0      	lsls	r0, r2, #31
 80033b2:	d404      	bmi.n	80033be <_fflush_r+0x32>
 80033b4:	0599      	lsls	r1, r3, #22
 80033b6:	d402      	bmi.n	80033be <_fflush_r+0x32>
 80033b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ba:	f7ff fe42 	bl	8003042 <__retarget_lock_acquire_recursive>
 80033be:	4628      	mov	r0, r5
 80033c0:	4621      	mov	r1, r4
 80033c2:	f7ff ff5f 	bl	8003284 <__sflush_r>
 80033c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033c8:	07da      	lsls	r2, r3, #31
 80033ca:	4605      	mov	r5, r0
 80033cc:	d4e4      	bmi.n	8003398 <_fflush_r+0xc>
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	059b      	lsls	r3, r3, #22
 80033d2:	d4e1      	bmi.n	8003398 <_fflush_r+0xc>
 80033d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033d6:	f7ff fe35 	bl	8003044 <__retarget_lock_release_recursive>
 80033da:	e7dd      	b.n	8003398 <_fflush_r+0xc>

080033dc <fiprintf>:
 80033dc:	b40e      	push	{r1, r2, r3}
 80033de:	b503      	push	{r0, r1, lr}
 80033e0:	4601      	mov	r1, r0
 80033e2:	ab03      	add	r3, sp, #12
 80033e4:	4805      	ldr	r0, [pc, #20]	@ (80033fc <fiprintf+0x20>)
 80033e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80033ea:	6800      	ldr	r0, [r0, #0]
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	f000 f847 	bl	8003480 <_vfiprintf_r>
 80033f2:	b002      	add	sp, #8
 80033f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80033f8:	b003      	add	sp, #12
 80033fa:	4770      	bx	lr
 80033fc:	20000018 	.word	0x20000018

08003400 <_sbrk_r>:
 8003400:	b538      	push	{r3, r4, r5, lr}
 8003402:	4d06      	ldr	r5, [pc, #24]	@ (800341c <_sbrk_r+0x1c>)
 8003404:	2300      	movs	r3, #0
 8003406:	4604      	mov	r4, r0
 8003408:	4608      	mov	r0, r1
 800340a:	602b      	str	r3, [r5, #0]
 800340c:	f7fd fbf6 	bl	8000bfc <_sbrk>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d102      	bne.n	800341a <_sbrk_r+0x1a>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	b103      	cbz	r3, 800341a <_sbrk_r+0x1a>
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	20000240 	.word	0x20000240

08003420 <abort>:
 8003420:	b508      	push	{r3, lr}
 8003422:	2006      	movs	r0, #6
 8003424:	f000 fb8e 	bl	8003b44 <raise>
 8003428:	2001      	movs	r0, #1
 800342a:	f7fd fb6f 	bl	8000b0c <_exit>

0800342e <__sfputc_r>:
 800342e:	6893      	ldr	r3, [r2, #8]
 8003430:	3b01      	subs	r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	b410      	push	{r4}
 8003436:	6093      	str	r3, [r2, #8]
 8003438:	da08      	bge.n	800344c <__sfputc_r+0x1e>
 800343a:	6994      	ldr	r4, [r2, #24]
 800343c:	42a3      	cmp	r3, r4
 800343e:	db01      	blt.n	8003444 <__sfputc_r+0x16>
 8003440:	290a      	cmp	r1, #10
 8003442:	d103      	bne.n	800344c <__sfputc_r+0x1e>
 8003444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003448:	f000 bac0 	b.w	80039cc <__swbuf_r>
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	1c58      	adds	r0, r3, #1
 8003450:	6010      	str	r0, [r2, #0]
 8003452:	7019      	strb	r1, [r3, #0]
 8003454:	4608      	mov	r0, r1
 8003456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800345a:	4770      	bx	lr

0800345c <__sfputs_r>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	4606      	mov	r6, r0
 8003460:	460f      	mov	r7, r1
 8003462:	4614      	mov	r4, r2
 8003464:	18d5      	adds	r5, r2, r3
 8003466:	42ac      	cmp	r4, r5
 8003468:	d101      	bne.n	800346e <__sfputs_r+0x12>
 800346a:	2000      	movs	r0, #0
 800346c:	e007      	b.n	800347e <__sfputs_r+0x22>
 800346e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003472:	463a      	mov	r2, r7
 8003474:	4630      	mov	r0, r6
 8003476:	f7ff ffda 	bl	800342e <__sfputc_r>
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	d1f3      	bne.n	8003466 <__sfputs_r+0xa>
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003480 <_vfiprintf_r>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	460d      	mov	r5, r1
 8003486:	b09d      	sub	sp, #116	@ 0x74
 8003488:	4614      	mov	r4, r2
 800348a:	4698      	mov	r8, r3
 800348c:	4606      	mov	r6, r0
 800348e:	b118      	cbz	r0, 8003498 <_vfiprintf_r+0x18>
 8003490:	6a03      	ldr	r3, [r0, #32]
 8003492:	b90b      	cbnz	r3, 8003498 <_vfiprintf_r+0x18>
 8003494:	f7ff fce2 	bl	8002e5c <__sinit>
 8003498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800349a:	07d9      	lsls	r1, r3, #31
 800349c:	d405      	bmi.n	80034aa <_vfiprintf_r+0x2a>
 800349e:	89ab      	ldrh	r3, [r5, #12]
 80034a0:	059a      	lsls	r2, r3, #22
 80034a2:	d402      	bmi.n	80034aa <_vfiprintf_r+0x2a>
 80034a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034a6:	f7ff fdcc 	bl	8003042 <__retarget_lock_acquire_recursive>
 80034aa:	89ab      	ldrh	r3, [r5, #12]
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	d501      	bpl.n	80034b4 <_vfiprintf_r+0x34>
 80034b0:	692b      	ldr	r3, [r5, #16]
 80034b2:	b99b      	cbnz	r3, 80034dc <_vfiprintf_r+0x5c>
 80034b4:	4629      	mov	r1, r5
 80034b6:	4630      	mov	r0, r6
 80034b8:	f000 fac6 	bl	8003a48 <__swsetup_r>
 80034bc:	b170      	cbz	r0, 80034dc <_vfiprintf_r+0x5c>
 80034be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034c0:	07dc      	lsls	r4, r3, #31
 80034c2:	d504      	bpl.n	80034ce <_vfiprintf_r+0x4e>
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	b01d      	add	sp, #116	@ 0x74
 80034ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ce:	89ab      	ldrh	r3, [r5, #12]
 80034d0:	0598      	lsls	r0, r3, #22
 80034d2:	d4f7      	bmi.n	80034c4 <_vfiprintf_r+0x44>
 80034d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034d6:	f7ff fdb5 	bl	8003044 <__retarget_lock_release_recursive>
 80034da:	e7f3      	b.n	80034c4 <_vfiprintf_r+0x44>
 80034dc:	2300      	movs	r3, #0
 80034de:	9309      	str	r3, [sp, #36]	@ 0x24
 80034e0:	2320      	movs	r3, #32
 80034e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ea:	2330      	movs	r3, #48	@ 0x30
 80034ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800369c <_vfiprintf_r+0x21c>
 80034f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034f4:	f04f 0901 	mov.w	r9, #1
 80034f8:	4623      	mov	r3, r4
 80034fa:	469a      	mov	sl, r3
 80034fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003500:	b10a      	cbz	r2, 8003506 <_vfiprintf_r+0x86>
 8003502:	2a25      	cmp	r2, #37	@ 0x25
 8003504:	d1f9      	bne.n	80034fa <_vfiprintf_r+0x7a>
 8003506:	ebba 0b04 	subs.w	fp, sl, r4
 800350a:	d00b      	beq.n	8003524 <_vfiprintf_r+0xa4>
 800350c:	465b      	mov	r3, fp
 800350e:	4622      	mov	r2, r4
 8003510:	4629      	mov	r1, r5
 8003512:	4630      	mov	r0, r6
 8003514:	f7ff ffa2 	bl	800345c <__sfputs_r>
 8003518:	3001      	adds	r0, #1
 800351a:	f000 80a7 	beq.w	800366c <_vfiprintf_r+0x1ec>
 800351e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003520:	445a      	add	r2, fp
 8003522:	9209      	str	r2, [sp, #36]	@ 0x24
 8003524:	f89a 3000 	ldrb.w	r3, [sl]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 809f 	beq.w	800366c <_vfiprintf_r+0x1ec>
 800352e:	2300      	movs	r3, #0
 8003530:	f04f 32ff 	mov.w	r2, #4294967295
 8003534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003538:	f10a 0a01 	add.w	sl, sl, #1
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	9307      	str	r3, [sp, #28]
 8003540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003544:	931a      	str	r3, [sp, #104]	@ 0x68
 8003546:	4654      	mov	r4, sl
 8003548:	2205      	movs	r2, #5
 800354a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800354e:	4853      	ldr	r0, [pc, #332]	@ (800369c <_vfiprintf_r+0x21c>)
 8003550:	f7fc fe5e 	bl	8000210 <memchr>
 8003554:	9a04      	ldr	r2, [sp, #16]
 8003556:	b9d8      	cbnz	r0, 8003590 <_vfiprintf_r+0x110>
 8003558:	06d1      	lsls	r1, r2, #27
 800355a:	bf44      	itt	mi
 800355c:	2320      	movmi	r3, #32
 800355e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003562:	0713      	lsls	r3, r2, #28
 8003564:	bf44      	itt	mi
 8003566:	232b      	movmi	r3, #43	@ 0x2b
 8003568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800356c:	f89a 3000 	ldrb.w	r3, [sl]
 8003570:	2b2a      	cmp	r3, #42	@ 0x2a
 8003572:	d015      	beq.n	80035a0 <_vfiprintf_r+0x120>
 8003574:	9a07      	ldr	r2, [sp, #28]
 8003576:	4654      	mov	r4, sl
 8003578:	2000      	movs	r0, #0
 800357a:	f04f 0c0a 	mov.w	ip, #10
 800357e:	4621      	mov	r1, r4
 8003580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003584:	3b30      	subs	r3, #48	@ 0x30
 8003586:	2b09      	cmp	r3, #9
 8003588:	d94b      	bls.n	8003622 <_vfiprintf_r+0x1a2>
 800358a:	b1b0      	cbz	r0, 80035ba <_vfiprintf_r+0x13a>
 800358c:	9207      	str	r2, [sp, #28]
 800358e:	e014      	b.n	80035ba <_vfiprintf_r+0x13a>
 8003590:	eba0 0308 	sub.w	r3, r0, r8
 8003594:	fa09 f303 	lsl.w	r3, r9, r3
 8003598:	4313      	orrs	r3, r2
 800359a:	9304      	str	r3, [sp, #16]
 800359c:	46a2      	mov	sl, r4
 800359e:	e7d2      	b.n	8003546 <_vfiprintf_r+0xc6>
 80035a0:	9b03      	ldr	r3, [sp, #12]
 80035a2:	1d19      	adds	r1, r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	9103      	str	r1, [sp, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bfbb      	ittet	lt
 80035ac:	425b      	neglt	r3, r3
 80035ae:	f042 0202 	orrlt.w	r2, r2, #2
 80035b2:	9307      	strge	r3, [sp, #28]
 80035b4:	9307      	strlt	r3, [sp, #28]
 80035b6:	bfb8      	it	lt
 80035b8:	9204      	strlt	r2, [sp, #16]
 80035ba:	7823      	ldrb	r3, [r4, #0]
 80035bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80035be:	d10a      	bne.n	80035d6 <_vfiprintf_r+0x156>
 80035c0:	7863      	ldrb	r3, [r4, #1]
 80035c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80035c4:	d132      	bne.n	800362c <_vfiprintf_r+0x1ac>
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	1d1a      	adds	r2, r3, #4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	9203      	str	r2, [sp, #12]
 80035ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035d2:	3402      	adds	r4, #2
 80035d4:	9305      	str	r3, [sp, #20]
 80035d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80036ac <_vfiprintf_r+0x22c>
 80035da:	7821      	ldrb	r1, [r4, #0]
 80035dc:	2203      	movs	r2, #3
 80035de:	4650      	mov	r0, sl
 80035e0:	f7fc fe16 	bl	8000210 <memchr>
 80035e4:	b138      	cbz	r0, 80035f6 <_vfiprintf_r+0x176>
 80035e6:	9b04      	ldr	r3, [sp, #16]
 80035e8:	eba0 000a 	sub.w	r0, r0, sl
 80035ec:	2240      	movs	r2, #64	@ 0x40
 80035ee:	4082      	lsls	r2, r0
 80035f0:	4313      	orrs	r3, r2
 80035f2:	3401      	adds	r4, #1
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fa:	4829      	ldr	r0, [pc, #164]	@ (80036a0 <_vfiprintf_r+0x220>)
 80035fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003600:	2206      	movs	r2, #6
 8003602:	f7fc fe05 	bl	8000210 <memchr>
 8003606:	2800      	cmp	r0, #0
 8003608:	d03f      	beq.n	800368a <_vfiprintf_r+0x20a>
 800360a:	4b26      	ldr	r3, [pc, #152]	@ (80036a4 <_vfiprintf_r+0x224>)
 800360c:	bb1b      	cbnz	r3, 8003656 <_vfiprintf_r+0x1d6>
 800360e:	9b03      	ldr	r3, [sp, #12]
 8003610:	3307      	adds	r3, #7
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	3308      	adds	r3, #8
 8003618:	9303      	str	r3, [sp, #12]
 800361a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800361c:	443b      	add	r3, r7
 800361e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003620:	e76a      	b.n	80034f8 <_vfiprintf_r+0x78>
 8003622:	fb0c 3202 	mla	r2, ip, r2, r3
 8003626:	460c      	mov	r4, r1
 8003628:	2001      	movs	r0, #1
 800362a:	e7a8      	b.n	800357e <_vfiprintf_r+0xfe>
 800362c:	2300      	movs	r3, #0
 800362e:	3401      	adds	r4, #1
 8003630:	9305      	str	r3, [sp, #20]
 8003632:	4619      	mov	r1, r3
 8003634:	f04f 0c0a 	mov.w	ip, #10
 8003638:	4620      	mov	r0, r4
 800363a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800363e:	3a30      	subs	r2, #48	@ 0x30
 8003640:	2a09      	cmp	r2, #9
 8003642:	d903      	bls.n	800364c <_vfiprintf_r+0x1cc>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0c6      	beq.n	80035d6 <_vfiprintf_r+0x156>
 8003648:	9105      	str	r1, [sp, #20]
 800364a:	e7c4      	b.n	80035d6 <_vfiprintf_r+0x156>
 800364c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003650:	4604      	mov	r4, r0
 8003652:	2301      	movs	r3, #1
 8003654:	e7f0      	b.n	8003638 <_vfiprintf_r+0x1b8>
 8003656:	ab03      	add	r3, sp, #12
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462a      	mov	r2, r5
 800365c:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <_vfiprintf_r+0x228>)
 800365e:	a904      	add	r1, sp, #16
 8003660:	4630      	mov	r0, r6
 8003662:	f3af 8000 	nop.w
 8003666:	4607      	mov	r7, r0
 8003668:	1c78      	adds	r0, r7, #1
 800366a:	d1d6      	bne.n	800361a <_vfiprintf_r+0x19a>
 800366c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800366e:	07d9      	lsls	r1, r3, #31
 8003670:	d405      	bmi.n	800367e <_vfiprintf_r+0x1fe>
 8003672:	89ab      	ldrh	r3, [r5, #12]
 8003674:	059a      	lsls	r2, r3, #22
 8003676:	d402      	bmi.n	800367e <_vfiprintf_r+0x1fe>
 8003678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800367a:	f7ff fce3 	bl	8003044 <__retarget_lock_release_recursive>
 800367e:	89ab      	ldrh	r3, [r5, #12]
 8003680:	065b      	lsls	r3, r3, #25
 8003682:	f53f af1f 	bmi.w	80034c4 <_vfiprintf_r+0x44>
 8003686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003688:	e71e      	b.n	80034c8 <_vfiprintf_r+0x48>
 800368a:	ab03      	add	r3, sp, #12
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	462a      	mov	r2, r5
 8003690:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <_vfiprintf_r+0x228>)
 8003692:	a904      	add	r1, sp, #16
 8003694:	4630      	mov	r0, r6
 8003696:	f000 f879 	bl	800378c <_printf_i>
 800369a:	e7e4      	b.n	8003666 <_vfiprintf_r+0x1e6>
 800369c:	08003d57 	.word	0x08003d57
 80036a0:	08003d61 	.word	0x08003d61
 80036a4:	00000000 	.word	0x00000000
 80036a8:	0800345d 	.word	0x0800345d
 80036ac:	08003d5d 	.word	0x08003d5d

080036b0 <_printf_common>:
 80036b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b4:	4616      	mov	r6, r2
 80036b6:	4698      	mov	r8, r3
 80036b8:	688a      	ldr	r2, [r1, #8]
 80036ba:	690b      	ldr	r3, [r1, #16]
 80036bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bfb8      	it	lt
 80036c4:	4613      	movlt	r3, r2
 80036c6:	6033      	str	r3, [r6, #0]
 80036c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036cc:	4607      	mov	r7, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	b10a      	cbz	r2, 80036d6 <_printf_common+0x26>
 80036d2:	3301      	adds	r3, #1
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	0699      	lsls	r1, r3, #26
 80036da:	bf42      	ittt	mi
 80036dc:	6833      	ldrmi	r3, [r6, #0]
 80036de:	3302      	addmi	r3, #2
 80036e0:	6033      	strmi	r3, [r6, #0]
 80036e2:	6825      	ldr	r5, [r4, #0]
 80036e4:	f015 0506 	ands.w	r5, r5, #6
 80036e8:	d106      	bne.n	80036f8 <_printf_common+0x48>
 80036ea:	f104 0a19 	add.w	sl, r4, #25
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	6832      	ldr	r2, [r6, #0]
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dc26      	bgt.n	8003746 <_printf_common+0x96>
 80036f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	3b00      	subs	r3, #0
 8003700:	bf18      	it	ne
 8003702:	2301      	movne	r3, #1
 8003704:	0692      	lsls	r2, r2, #26
 8003706:	d42b      	bmi.n	8003760 <_printf_common+0xb0>
 8003708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800370c:	4641      	mov	r1, r8
 800370e:	4638      	mov	r0, r7
 8003710:	47c8      	blx	r9
 8003712:	3001      	adds	r0, #1
 8003714:	d01e      	beq.n	8003754 <_printf_common+0xa4>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	6922      	ldr	r2, [r4, #16]
 800371a:	f003 0306 	and.w	r3, r3, #6
 800371e:	2b04      	cmp	r3, #4
 8003720:	bf02      	ittt	eq
 8003722:	68e5      	ldreq	r5, [r4, #12]
 8003724:	6833      	ldreq	r3, [r6, #0]
 8003726:	1aed      	subeq	r5, r5, r3
 8003728:	68a3      	ldr	r3, [r4, #8]
 800372a:	bf0c      	ite	eq
 800372c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003730:	2500      	movne	r5, #0
 8003732:	4293      	cmp	r3, r2
 8003734:	bfc4      	itt	gt
 8003736:	1a9b      	subgt	r3, r3, r2
 8003738:	18ed      	addgt	r5, r5, r3
 800373a:	2600      	movs	r6, #0
 800373c:	341a      	adds	r4, #26
 800373e:	42b5      	cmp	r5, r6
 8003740:	d11a      	bne.n	8003778 <_printf_common+0xc8>
 8003742:	2000      	movs	r0, #0
 8003744:	e008      	b.n	8003758 <_printf_common+0xa8>
 8003746:	2301      	movs	r3, #1
 8003748:	4652      	mov	r2, sl
 800374a:	4641      	mov	r1, r8
 800374c:	4638      	mov	r0, r7
 800374e:	47c8      	blx	r9
 8003750:	3001      	adds	r0, #1
 8003752:	d103      	bne.n	800375c <_printf_common+0xac>
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375c:	3501      	adds	r5, #1
 800375e:	e7c6      	b.n	80036ee <_printf_common+0x3e>
 8003760:	18e1      	adds	r1, r4, r3
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	2030      	movs	r0, #48	@ 0x30
 8003766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800376a:	4422      	add	r2, r4
 800376c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003774:	3302      	adds	r3, #2
 8003776:	e7c7      	b.n	8003708 <_printf_common+0x58>
 8003778:	2301      	movs	r3, #1
 800377a:	4622      	mov	r2, r4
 800377c:	4641      	mov	r1, r8
 800377e:	4638      	mov	r0, r7
 8003780:	47c8      	blx	r9
 8003782:	3001      	adds	r0, #1
 8003784:	d0e6      	beq.n	8003754 <_printf_common+0xa4>
 8003786:	3601      	adds	r6, #1
 8003788:	e7d9      	b.n	800373e <_printf_common+0x8e>
	...

0800378c <_printf_i>:
 800378c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003790:	7e0f      	ldrb	r7, [r1, #24]
 8003792:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003794:	2f78      	cmp	r7, #120	@ 0x78
 8003796:	4691      	mov	r9, r2
 8003798:	4680      	mov	r8, r0
 800379a:	460c      	mov	r4, r1
 800379c:	469a      	mov	sl, r3
 800379e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037a2:	d807      	bhi.n	80037b4 <_printf_i+0x28>
 80037a4:	2f62      	cmp	r7, #98	@ 0x62
 80037a6:	d80a      	bhi.n	80037be <_printf_i+0x32>
 80037a8:	2f00      	cmp	r7, #0
 80037aa:	f000 80d2 	beq.w	8003952 <_printf_i+0x1c6>
 80037ae:	2f58      	cmp	r7, #88	@ 0x58
 80037b0:	f000 80b9 	beq.w	8003926 <_printf_i+0x19a>
 80037b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037bc:	e03a      	b.n	8003834 <_printf_i+0xa8>
 80037be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037c2:	2b15      	cmp	r3, #21
 80037c4:	d8f6      	bhi.n	80037b4 <_printf_i+0x28>
 80037c6:	a101      	add	r1, pc, #4	@ (adr r1, 80037cc <_printf_i+0x40>)
 80037c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037cc:	08003825 	.word	0x08003825
 80037d0:	08003839 	.word	0x08003839
 80037d4:	080037b5 	.word	0x080037b5
 80037d8:	080037b5 	.word	0x080037b5
 80037dc:	080037b5 	.word	0x080037b5
 80037e0:	080037b5 	.word	0x080037b5
 80037e4:	08003839 	.word	0x08003839
 80037e8:	080037b5 	.word	0x080037b5
 80037ec:	080037b5 	.word	0x080037b5
 80037f0:	080037b5 	.word	0x080037b5
 80037f4:	080037b5 	.word	0x080037b5
 80037f8:	08003939 	.word	0x08003939
 80037fc:	08003863 	.word	0x08003863
 8003800:	080038f3 	.word	0x080038f3
 8003804:	080037b5 	.word	0x080037b5
 8003808:	080037b5 	.word	0x080037b5
 800380c:	0800395b 	.word	0x0800395b
 8003810:	080037b5 	.word	0x080037b5
 8003814:	08003863 	.word	0x08003863
 8003818:	080037b5 	.word	0x080037b5
 800381c:	080037b5 	.word	0x080037b5
 8003820:	080038fb 	.word	0x080038fb
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6032      	str	r2, [r6, #0]
 800382c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003834:	2301      	movs	r3, #1
 8003836:	e09d      	b.n	8003974 <_printf_i+0x1e8>
 8003838:	6833      	ldr	r3, [r6, #0]
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	1d19      	adds	r1, r3, #4
 800383e:	6031      	str	r1, [r6, #0]
 8003840:	0606      	lsls	r6, r0, #24
 8003842:	d501      	bpl.n	8003848 <_printf_i+0xbc>
 8003844:	681d      	ldr	r5, [r3, #0]
 8003846:	e003      	b.n	8003850 <_printf_i+0xc4>
 8003848:	0645      	lsls	r5, r0, #25
 800384a:	d5fb      	bpl.n	8003844 <_printf_i+0xb8>
 800384c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003850:	2d00      	cmp	r5, #0
 8003852:	da03      	bge.n	800385c <_printf_i+0xd0>
 8003854:	232d      	movs	r3, #45	@ 0x2d
 8003856:	426d      	negs	r5, r5
 8003858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800385c:	4859      	ldr	r0, [pc, #356]	@ (80039c4 <_printf_i+0x238>)
 800385e:	230a      	movs	r3, #10
 8003860:	e011      	b.n	8003886 <_printf_i+0xfa>
 8003862:	6821      	ldr	r1, [r4, #0]
 8003864:	6833      	ldr	r3, [r6, #0]
 8003866:	0608      	lsls	r0, r1, #24
 8003868:	f853 5b04 	ldr.w	r5, [r3], #4
 800386c:	d402      	bmi.n	8003874 <_printf_i+0xe8>
 800386e:	0649      	lsls	r1, r1, #25
 8003870:	bf48      	it	mi
 8003872:	b2ad      	uxthmi	r5, r5
 8003874:	2f6f      	cmp	r7, #111	@ 0x6f
 8003876:	4853      	ldr	r0, [pc, #332]	@ (80039c4 <_printf_i+0x238>)
 8003878:	6033      	str	r3, [r6, #0]
 800387a:	bf14      	ite	ne
 800387c:	230a      	movne	r3, #10
 800387e:	2308      	moveq	r3, #8
 8003880:	2100      	movs	r1, #0
 8003882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003886:	6866      	ldr	r6, [r4, #4]
 8003888:	60a6      	str	r6, [r4, #8]
 800388a:	2e00      	cmp	r6, #0
 800388c:	bfa2      	ittt	ge
 800388e:	6821      	ldrge	r1, [r4, #0]
 8003890:	f021 0104 	bicge.w	r1, r1, #4
 8003894:	6021      	strge	r1, [r4, #0]
 8003896:	b90d      	cbnz	r5, 800389c <_printf_i+0x110>
 8003898:	2e00      	cmp	r6, #0
 800389a:	d04b      	beq.n	8003934 <_printf_i+0x1a8>
 800389c:	4616      	mov	r6, r2
 800389e:	fbb5 f1f3 	udiv	r1, r5, r3
 80038a2:	fb03 5711 	mls	r7, r3, r1, r5
 80038a6:	5dc7      	ldrb	r7, [r0, r7]
 80038a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038ac:	462f      	mov	r7, r5
 80038ae:	42bb      	cmp	r3, r7
 80038b0:	460d      	mov	r5, r1
 80038b2:	d9f4      	bls.n	800389e <_printf_i+0x112>
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d10b      	bne.n	80038d0 <_printf_i+0x144>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	07df      	lsls	r7, r3, #31
 80038bc:	d508      	bpl.n	80038d0 <_printf_i+0x144>
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	6861      	ldr	r1, [r4, #4]
 80038c2:	4299      	cmp	r1, r3
 80038c4:	bfde      	ittt	le
 80038c6:	2330      	movle	r3, #48	@ 0x30
 80038c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038d0:	1b92      	subs	r2, r2, r6
 80038d2:	6122      	str	r2, [r4, #16]
 80038d4:	f8cd a000 	str.w	sl, [sp]
 80038d8:	464b      	mov	r3, r9
 80038da:	aa03      	add	r2, sp, #12
 80038dc:	4621      	mov	r1, r4
 80038de:	4640      	mov	r0, r8
 80038e0:	f7ff fee6 	bl	80036b0 <_printf_common>
 80038e4:	3001      	adds	r0, #1
 80038e6:	d14a      	bne.n	800397e <_printf_i+0x1f2>
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	b004      	add	sp, #16
 80038ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	f043 0320 	orr.w	r3, r3, #32
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	4833      	ldr	r0, [pc, #204]	@ (80039c8 <_printf_i+0x23c>)
 80038fc:	2778      	movs	r7, #120	@ 0x78
 80038fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	6831      	ldr	r1, [r6, #0]
 8003906:	061f      	lsls	r7, r3, #24
 8003908:	f851 5b04 	ldr.w	r5, [r1], #4
 800390c:	d402      	bmi.n	8003914 <_printf_i+0x188>
 800390e:	065f      	lsls	r7, r3, #25
 8003910:	bf48      	it	mi
 8003912:	b2ad      	uxthmi	r5, r5
 8003914:	6031      	str	r1, [r6, #0]
 8003916:	07d9      	lsls	r1, r3, #31
 8003918:	bf44      	itt	mi
 800391a:	f043 0320 	orrmi.w	r3, r3, #32
 800391e:	6023      	strmi	r3, [r4, #0]
 8003920:	b11d      	cbz	r5, 800392a <_printf_i+0x19e>
 8003922:	2310      	movs	r3, #16
 8003924:	e7ac      	b.n	8003880 <_printf_i+0xf4>
 8003926:	4827      	ldr	r0, [pc, #156]	@ (80039c4 <_printf_i+0x238>)
 8003928:	e7e9      	b.n	80038fe <_printf_i+0x172>
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	f023 0320 	bic.w	r3, r3, #32
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	e7f6      	b.n	8003922 <_printf_i+0x196>
 8003934:	4616      	mov	r6, r2
 8003936:	e7bd      	b.n	80038b4 <_printf_i+0x128>
 8003938:	6833      	ldr	r3, [r6, #0]
 800393a:	6825      	ldr	r5, [r4, #0]
 800393c:	6961      	ldr	r1, [r4, #20]
 800393e:	1d18      	adds	r0, r3, #4
 8003940:	6030      	str	r0, [r6, #0]
 8003942:	062e      	lsls	r6, r5, #24
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	d501      	bpl.n	800394c <_printf_i+0x1c0>
 8003948:	6019      	str	r1, [r3, #0]
 800394a:	e002      	b.n	8003952 <_printf_i+0x1c6>
 800394c:	0668      	lsls	r0, r5, #25
 800394e:	d5fb      	bpl.n	8003948 <_printf_i+0x1bc>
 8003950:	8019      	strh	r1, [r3, #0]
 8003952:	2300      	movs	r3, #0
 8003954:	6123      	str	r3, [r4, #16]
 8003956:	4616      	mov	r6, r2
 8003958:	e7bc      	b.n	80038d4 <_printf_i+0x148>
 800395a:	6833      	ldr	r3, [r6, #0]
 800395c:	1d1a      	adds	r2, r3, #4
 800395e:	6032      	str	r2, [r6, #0]
 8003960:	681e      	ldr	r6, [r3, #0]
 8003962:	6862      	ldr	r2, [r4, #4]
 8003964:	2100      	movs	r1, #0
 8003966:	4630      	mov	r0, r6
 8003968:	f7fc fc52 	bl	8000210 <memchr>
 800396c:	b108      	cbz	r0, 8003972 <_printf_i+0x1e6>
 800396e:	1b80      	subs	r0, r0, r6
 8003970:	6060      	str	r0, [r4, #4]
 8003972:	6863      	ldr	r3, [r4, #4]
 8003974:	6123      	str	r3, [r4, #16]
 8003976:	2300      	movs	r3, #0
 8003978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800397c:	e7aa      	b.n	80038d4 <_printf_i+0x148>
 800397e:	6923      	ldr	r3, [r4, #16]
 8003980:	4632      	mov	r2, r6
 8003982:	4649      	mov	r1, r9
 8003984:	4640      	mov	r0, r8
 8003986:	47d0      	blx	sl
 8003988:	3001      	adds	r0, #1
 800398a:	d0ad      	beq.n	80038e8 <_printf_i+0x15c>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	079b      	lsls	r3, r3, #30
 8003990:	d413      	bmi.n	80039ba <_printf_i+0x22e>
 8003992:	68e0      	ldr	r0, [r4, #12]
 8003994:	9b03      	ldr	r3, [sp, #12]
 8003996:	4298      	cmp	r0, r3
 8003998:	bfb8      	it	lt
 800399a:	4618      	movlt	r0, r3
 800399c:	e7a6      	b.n	80038ec <_printf_i+0x160>
 800399e:	2301      	movs	r3, #1
 80039a0:	4632      	mov	r2, r6
 80039a2:	4649      	mov	r1, r9
 80039a4:	4640      	mov	r0, r8
 80039a6:	47d0      	blx	sl
 80039a8:	3001      	adds	r0, #1
 80039aa:	d09d      	beq.n	80038e8 <_printf_i+0x15c>
 80039ac:	3501      	adds	r5, #1
 80039ae:	68e3      	ldr	r3, [r4, #12]
 80039b0:	9903      	ldr	r1, [sp, #12]
 80039b2:	1a5b      	subs	r3, r3, r1
 80039b4:	42ab      	cmp	r3, r5
 80039b6:	dcf2      	bgt.n	800399e <_printf_i+0x212>
 80039b8:	e7eb      	b.n	8003992 <_printf_i+0x206>
 80039ba:	2500      	movs	r5, #0
 80039bc:	f104 0619 	add.w	r6, r4, #25
 80039c0:	e7f5      	b.n	80039ae <_printf_i+0x222>
 80039c2:	bf00      	nop
 80039c4:	08003d68 	.word	0x08003d68
 80039c8:	08003d79 	.word	0x08003d79

080039cc <__swbuf_r>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	460e      	mov	r6, r1
 80039d0:	4614      	mov	r4, r2
 80039d2:	4605      	mov	r5, r0
 80039d4:	b118      	cbz	r0, 80039de <__swbuf_r+0x12>
 80039d6:	6a03      	ldr	r3, [r0, #32]
 80039d8:	b90b      	cbnz	r3, 80039de <__swbuf_r+0x12>
 80039da:	f7ff fa3f 	bl	8002e5c <__sinit>
 80039de:	69a3      	ldr	r3, [r4, #24]
 80039e0:	60a3      	str	r3, [r4, #8]
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	071a      	lsls	r2, r3, #28
 80039e6:	d501      	bpl.n	80039ec <__swbuf_r+0x20>
 80039e8:	6923      	ldr	r3, [r4, #16]
 80039ea:	b943      	cbnz	r3, 80039fe <__swbuf_r+0x32>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 f82a 	bl	8003a48 <__swsetup_r>
 80039f4:	b118      	cbz	r0, 80039fe <__swbuf_r+0x32>
 80039f6:	f04f 37ff 	mov.w	r7, #4294967295
 80039fa:	4638      	mov	r0, r7
 80039fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	6922      	ldr	r2, [r4, #16]
 8003a02:	1a98      	subs	r0, r3, r2
 8003a04:	6963      	ldr	r3, [r4, #20]
 8003a06:	b2f6      	uxtb	r6, r6
 8003a08:	4283      	cmp	r3, r0
 8003a0a:	4637      	mov	r7, r6
 8003a0c:	dc05      	bgt.n	8003a1a <__swbuf_r+0x4e>
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	f7ff fcbb 	bl	800338c <_fflush_r>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d1ed      	bne.n	80039f6 <__swbuf_r+0x2a>
 8003a1a:	68a3      	ldr	r3, [r4, #8]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	60a3      	str	r3, [r4, #8]
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	6022      	str	r2, [r4, #0]
 8003a26:	701e      	strb	r6, [r3, #0]
 8003a28:	6962      	ldr	r2, [r4, #20]
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d004      	beq.n	8003a3a <__swbuf_r+0x6e>
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	07db      	lsls	r3, r3, #31
 8003a34:	d5e1      	bpl.n	80039fa <__swbuf_r+0x2e>
 8003a36:	2e0a      	cmp	r6, #10
 8003a38:	d1df      	bne.n	80039fa <__swbuf_r+0x2e>
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f7ff fca5 	bl	800338c <_fflush_r>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d0d9      	beq.n	80039fa <__swbuf_r+0x2e>
 8003a46:	e7d6      	b.n	80039f6 <__swbuf_r+0x2a>

08003a48 <__swsetup_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	4b29      	ldr	r3, [pc, #164]	@ (8003af0 <__swsetup_r+0xa8>)
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	460c      	mov	r4, r1
 8003a52:	b118      	cbz	r0, 8003a5c <__swsetup_r+0x14>
 8003a54:	6a03      	ldr	r3, [r0, #32]
 8003a56:	b90b      	cbnz	r3, 8003a5c <__swsetup_r+0x14>
 8003a58:	f7ff fa00 	bl	8002e5c <__sinit>
 8003a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a60:	0719      	lsls	r1, r3, #28
 8003a62:	d422      	bmi.n	8003aaa <__swsetup_r+0x62>
 8003a64:	06da      	lsls	r2, r3, #27
 8003a66:	d407      	bmi.n	8003a78 <__swsetup_r+0x30>
 8003a68:	2209      	movs	r2, #9
 8003a6a:	602a      	str	r2, [r5, #0]
 8003a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a70:	81a3      	strh	r3, [r4, #12]
 8003a72:	f04f 30ff 	mov.w	r0, #4294967295
 8003a76:	e033      	b.n	8003ae0 <__swsetup_r+0x98>
 8003a78:	0758      	lsls	r0, r3, #29
 8003a7a:	d512      	bpl.n	8003aa2 <__swsetup_r+0x5a>
 8003a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a7e:	b141      	cbz	r1, 8003a92 <__swsetup_r+0x4a>
 8003a80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a84:	4299      	cmp	r1, r3
 8003a86:	d002      	beq.n	8003a8e <__swsetup_r+0x46>
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f7ff fafb 	bl	8003084 <_free_r>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a98:	81a3      	strh	r3, [r4, #12]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	89a3      	ldrh	r3, [r4, #12]
 8003aa4:	f043 0308 	orr.w	r3, r3, #8
 8003aa8:	81a3      	strh	r3, [r4, #12]
 8003aaa:	6923      	ldr	r3, [r4, #16]
 8003aac:	b94b      	cbnz	r3, 8003ac2 <__swsetup_r+0x7a>
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab8:	d003      	beq.n	8003ac2 <__swsetup_r+0x7a>
 8003aba:	4621      	mov	r1, r4
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 f883 	bl	8003bc8 <__smakebuf_r>
 8003ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac6:	f013 0201 	ands.w	r2, r3, #1
 8003aca:	d00a      	beq.n	8003ae2 <__swsetup_r+0x9a>
 8003acc:	2200      	movs	r2, #0
 8003ace:	60a2      	str	r2, [r4, #8]
 8003ad0:	6962      	ldr	r2, [r4, #20]
 8003ad2:	4252      	negs	r2, r2
 8003ad4:	61a2      	str	r2, [r4, #24]
 8003ad6:	6922      	ldr	r2, [r4, #16]
 8003ad8:	b942      	cbnz	r2, 8003aec <__swsetup_r+0xa4>
 8003ada:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ade:	d1c5      	bne.n	8003a6c <__swsetup_r+0x24>
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}
 8003ae2:	0799      	lsls	r1, r3, #30
 8003ae4:	bf58      	it	pl
 8003ae6:	6962      	ldrpl	r2, [r4, #20]
 8003ae8:	60a2      	str	r2, [r4, #8]
 8003aea:	e7f4      	b.n	8003ad6 <__swsetup_r+0x8e>
 8003aec:	2000      	movs	r0, #0
 8003aee:	e7f7      	b.n	8003ae0 <__swsetup_r+0x98>
 8003af0:	20000018 	.word	0x20000018

08003af4 <_raise_r>:
 8003af4:	291f      	cmp	r1, #31
 8003af6:	b538      	push	{r3, r4, r5, lr}
 8003af8:	4605      	mov	r5, r0
 8003afa:	460c      	mov	r4, r1
 8003afc:	d904      	bls.n	8003b08 <_raise_r+0x14>
 8003afe:	2316      	movs	r3, #22
 8003b00:	6003      	str	r3, [r0, #0]
 8003b02:	f04f 30ff 	mov.w	r0, #4294967295
 8003b06:	bd38      	pop	{r3, r4, r5, pc}
 8003b08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003b0a:	b112      	cbz	r2, 8003b12 <_raise_r+0x1e>
 8003b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003b10:	b94b      	cbnz	r3, 8003b26 <_raise_r+0x32>
 8003b12:	4628      	mov	r0, r5
 8003b14:	f000 f830 	bl	8003b78 <_getpid_r>
 8003b18:	4622      	mov	r2, r4
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b22:	f000 b817 	b.w	8003b54 <_kill_r>
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d00a      	beq.n	8003b40 <_raise_r+0x4c>
 8003b2a:	1c59      	adds	r1, r3, #1
 8003b2c:	d103      	bne.n	8003b36 <_raise_r+0x42>
 8003b2e:	2316      	movs	r3, #22
 8003b30:	6003      	str	r3, [r0, #0]
 8003b32:	2001      	movs	r0, #1
 8003b34:	e7e7      	b.n	8003b06 <_raise_r+0x12>
 8003b36:	2100      	movs	r1, #0
 8003b38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	4798      	blx	r3
 8003b40:	2000      	movs	r0, #0
 8003b42:	e7e0      	b.n	8003b06 <_raise_r+0x12>

08003b44 <raise>:
 8003b44:	4b02      	ldr	r3, [pc, #8]	@ (8003b50 <raise+0xc>)
 8003b46:	4601      	mov	r1, r0
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	f7ff bfd3 	b.w	8003af4 <_raise_r>
 8003b4e:	bf00      	nop
 8003b50:	20000018 	.word	0x20000018

08003b54 <_kill_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d07      	ldr	r5, [pc, #28]	@ (8003b74 <_kill_r+0x20>)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	f7fc ffc3 	bl	8000aec <_kill>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	d102      	bne.n	8003b70 <_kill_r+0x1c>
 8003b6a:	682b      	ldr	r3, [r5, #0]
 8003b6c:	b103      	cbz	r3, 8003b70 <_kill_r+0x1c>
 8003b6e:	6023      	str	r3, [r4, #0]
 8003b70:	bd38      	pop	{r3, r4, r5, pc}
 8003b72:	bf00      	nop
 8003b74:	20000240 	.word	0x20000240

08003b78 <_getpid_r>:
 8003b78:	f7fc bfb0 	b.w	8000adc <_getpid>

08003b7c <__swhatbuf_r>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	460c      	mov	r4, r1
 8003b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b84:	2900      	cmp	r1, #0
 8003b86:	b096      	sub	sp, #88	@ 0x58
 8003b88:	4615      	mov	r5, r2
 8003b8a:	461e      	mov	r6, r3
 8003b8c:	da0d      	bge.n	8003baa <__swhatbuf_r+0x2e>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2340      	movne	r3, #64	@ 0x40
 8003b9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	6031      	str	r1, [r6, #0]
 8003ba4:	602b      	str	r3, [r5, #0]
 8003ba6:	b016      	add	sp, #88	@ 0x58
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	466a      	mov	r2, sp
 8003bac:	f000 f848 	bl	8003c40 <_fstat_r>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	dbec      	blt.n	8003b8e <__swhatbuf_r+0x12>
 8003bb4:	9901      	ldr	r1, [sp, #4]
 8003bb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003bba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003bbe:	4259      	negs	r1, r3
 8003bc0:	4159      	adcs	r1, r3
 8003bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bc6:	e7eb      	b.n	8003ba0 <__swhatbuf_r+0x24>

08003bc8 <__smakebuf_r>:
 8003bc8:	898b      	ldrh	r3, [r1, #12]
 8003bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bcc:	079d      	lsls	r5, r3, #30
 8003bce:	4606      	mov	r6, r0
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	d507      	bpl.n	8003be4 <__smakebuf_r+0x1c>
 8003bd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	6123      	str	r3, [r4, #16]
 8003bdc:	2301      	movs	r3, #1
 8003bde:	6163      	str	r3, [r4, #20]
 8003be0:	b003      	add	sp, #12
 8003be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be4:	ab01      	add	r3, sp, #4
 8003be6:	466a      	mov	r2, sp
 8003be8:	f7ff ffc8 	bl	8003b7c <__swhatbuf_r>
 8003bec:	9f00      	ldr	r7, [sp, #0]
 8003bee:	4605      	mov	r5, r0
 8003bf0:	4639      	mov	r1, r7
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f7ff faba 	bl	800316c <_malloc_r>
 8003bf8:	b948      	cbnz	r0, 8003c0e <__smakebuf_r+0x46>
 8003bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bfe:	059a      	lsls	r2, r3, #22
 8003c00:	d4ee      	bmi.n	8003be0 <__smakebuf_r+0x18>
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	f043 0302 	orr.w	r3, r3, #2
 8003c0a:	81a3      	strh	r3, [r4, #12]
 8003c0c:	e7e2      	b.n	8003bd4 <__smakebuf_r+0xc>
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	6020      	str	r0, [r4, #0]
 8003c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c16:	81a3      	strh	r3, [r4, #12]
 8003c18:	9b01      	ldr	r3, [sp, #4]
 8003c1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c1e:	b15b      	cbz	r3, 8003c38 <__smakebuf_r+0x70>
 8003c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c24:	4630      	mov	r0, r6
 8003c26:	f000 f81d 	bl	8003c64 <_isatty_r>
 8003c2a:	b128      	cbz	r0, 8003c38 <__smakebuf_r+0x70>
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	81a3      	strh	r3, [r4, #12]
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	431d      	orrs	r5, r3
 8003c3c:	81a5      	strh	r5, [r4, #12]
 8003c3e:	e7cf      	b.n	8003be0 <__smakebuf_r+0x18>

08003c40 <_fstat_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	4d07      	ldr	r5, [pc, #28]	@ (8003c60 <_fstat_r+0x20>)
 8003c44:	2300      	movs	r3, #0
 8003c46:	4604      	mov	r4, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	f7fc ffad 	bl	8000bac <_fstat>
 8003c52:	1c43      	adds	r3, r0, #1
 8003c54:	d102      	bne.n	8003c5c <_fstat_r+0x1c>
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	b103      	cbz	r3, 8003c5c <_fstat_r+0x1c>
 8003c5a:	6023      	str	r3, [r4, #0]
 8003c5c:	bd38      	pop	{r3, r4, r5, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000240 	.word	0x20000240

08003c64 <_isatty_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	4d06      	ldr	r5, [pc, #24]	@ (8003c80 <_isatty_r+0x1c>)
 8003c68:	2300      	movs	r3, #0
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	602b      	str	r3, [r5, #0]
 8003c70:	f7fc ffac 	bl	8000bcc <_isatty>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	d102      	bne.n	8003c7e <_isatty_r+0x1a>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	b103      	cbz	r3, 8003c7e <_isatty_r+0x1a>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	20000240 	.word	0x20000240

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
